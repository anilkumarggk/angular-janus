var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AttachRemoteFeedEvent.html",[0,0.215,1,1.203]],["body/interfaces/AttachRemoteFeedEvent.html",[0,0.398,1,2.096,2,0.966,3,0.537,4,0.304,5,0.369,6,1.955,7,0.866,8,1.955,9,0.369,10,2.754,11,0.876,12,2.554,13,2.248,14,2.655,15,0.876,16,0.617,17,1.584,18,1.261,19,1.047,20,0.701,21,2.554,22,0.243,23,0.995,24,0.89,25,0.838,26,0.482,27,0.046,28,2.22,29,2.845,30,1.993,31,0.769,32,0.978,33,2.554,34,0.397,35,1.67,36,0.589,37,0.487,38,0.878,39,1.955,40,1.775,41,1.721,42,1.414,43,1.955,44,1.261,45,0.672,46,0.762,47,0.762,48,0.995,49,1.526,50,0.995,51,0.995,52,1.526,53,1.955,54,1.526,55,1.955,56,1.993,57,0.511,58,0.878,59,2.23,60,1.411,61,1.721,62,1.526,63,0.304,64,1.721,65,1.955,66,1.955,67,2.248,68,0.469,69,1.212,70,0.482,71,0.838,72,0.966,73,2.554,74,2.554,75,2.554,76,0.637,77,0.966,78,0.966,79,1.955,80,1.25,81,1.955,82,1.955,83,1.955,84,1.955,85,0.859,86,1.955,87,1.526,88,1.955,89,1.721,90,0.859,91,0.374,92,1.955,93,1.721,94,0.672,95,1.993,96,1.721,97,1.764,98,2.22,99,1.955,100,0.438,101,1.526,102,1.955,103,1.212,104,0.878,105,1.955,106,1.526,107,0.589,108,1.955,109,0.369,110,1.526,111,1.526,112,1.721,113,0.859,114,1.123,115,1.526,116,1.721,117,1.212,118,0.667,119,1.775,120,1.955,121,1.526,122,1.123,123,1.212,124,0.762,125,1.359,126,1.955,127,1.955,128,1.212,129,1.955,130,1.082,131,1.526,132,0.025,133,0.032,134,0.025]],["title/components/AudioBoxComponent.html",[109,0.327,135,0.855]],["body/components/AudioBoxComponent.html",[3,0.364,4,0.3,5,0.364,9,0.364,16,0.478,22,0.239,25,0.882,26,0.566,27,0.046,32,0.87,34,0.439,36,0.581,37,0.545,48,0.751,57,0.661,60,1.113,62,1.975,63,0.54,68,0.3,70,0.588,71,0.504,76,0.432,78,1.25,85,0.848,91,0.372,109,0.588,124,1.169,132,0.024,133,0.032,134,0.024,135,1.482,136,1.57,137,1.34,138,1.505,139,1.505,140,1.505,141,5.297,142,4.321,143,2.606,144,3.42,145,3.42,146,2.911,147,1.759,148,2.205,149,2.826,150,0.848,151,1.975,152,1.975,153,2.298,154,0.995,155,2.205,156,2.205,157,1.759,158,3.818,159,1.975,160,3.42,161,2.531,162,3.42,163,1.975,164,2.228,165,1.759,166,2.606,167,3.678,168,2.165,169,3.194,170,1.964,171,0.938,172,1.564,173,3.194,174,1.482,175,1.57,176,1.579,177,2.531,178,2.085,179,2.911,180,2.531,181,3.194,182,3.42,183,3.194,184,3.42,185,1.975,186,2.222,187,2.218,188,3.194,189,1.964,190,1.505,191,1.928,192,2.531,193,1.928,194,1.928,195,1.068,196,3.42,197,2.218,198,2.606,199,1.169,200,1.759,201,2.606,202,1.34,203,3.194,204,3.194,205,1.505,206,2.606,207,1.196,208,2.218,209,3.194,210,2.606,211,1.928,212,3.194,213,2.606,214,2.606,215,3.194,216,3.194,217,3.194,218,2.606,219,3.194,220,2.606,221,1.196,222,1.34,223,2.341,224,1.505,225,1.505,226,0.952,227,1.505,228,0.952,229,1.505,230,0.848,231,1.505,232,0.952,233,1.34,234,1.505,235,0.952,236,1.505,237,1.505]],["title/components/DefaultVideoRoomComponent.html",[109,0.327,226,0.855]],["body/components/DefaultVideoRoomComponent.html",[1,0.737,3,0.2,4,0.165,5,0.2,7,0.711,9,0.2,11,0.851,14,1.45,15,0.595,16,0.43,17,1.412,18,0.814,19,0.685,22,0.204,23,0.642,24,0.755,25,0.884,26,0.602,27,0.046,28,1.286,30,1.576,31,0.785,32,0.566,34,0.354,35,1.507,36,0.32,37,0.438,38,0.694,40,1.403,42,1.261,46,0.787,47,0.961,48,1.151,57,0.277,60,0.724,63,0.165,68,0.165,69,1.412,70,0.2,76,0.238,78,0.814,85,1.298,91,0.437,94,0.365,95,1.576,97,1.618,98,1.286,100,0.238,103,1.412,104,0.783,107,0.919,109,0.567,118,0.595,119,2.217,122,1.083,123,1.022,125,1.145,128,0.658,131,1.576,132,0.013,133,0.021,134,0.013,135,0.524,136,1.412,137,0.737,138,0.828,139,0.828,140,0.828,147,1.145,148,1.576,149,2.02,150,0.466,151,1.286,152,1.286,153,1.955,154,0.847,155,0.828,156,0.828,157,1.145,159,1.286,161,1.648,163,1.286,164,1.45,165,1.145,168,2.25,170,1.892,171,0.87,172,1.507,174,0.814,175,1.412,176,1.508,178,0.737,185,2.036,186,2.217,189,1.713,190,0.828,191,1.061,192,1.648,195,0.588,199,1.243,200,1.582,202,2.122,205,0.828,207,1.792,211,1.061,221,0.658,222,0.737,223,1.777,224,0.828,225,0.828,226,1.124,227,0.828,228,0.524,229,0.828,230,0.466,231,0.828,232,0.524,233,0.737,234,0.828,235,0.524,236,0.828,237,0.828,238,5.398,239,4.403,240,1.758,241,2.729,242,2.729,243,0.787,244,2.729,245,2.729,246,2.226,247,1.777,248,3.076,249,2.729,250,2.729,251,2.729,252,2.729,253,1.022,254,2.226,255,1.403,256,2.729,257,1.286,258,2.729,259,2.02,260,3.345,261,2.729,262,3.324,263,3.345,264,2.729,265,2.226,266,2.729,267,2.729,268,2.729,269,1.45,270,1.434,271,3.076,272,2.729,273,2.226,274,1.758,275,1.758,276,2.729,277,2.619,278,3.771,279,2.729,280,2.729,281,2.226,282,2.323,283,1.286,284,2.226,285,1.145,286,1.286,287,1.147,288,3.331,289,2.729,290,2.226,291,2.729,292,1.758,293,2.226,294,1.758,295,1.758,296,2.729,297,2.226,298,1.758,299,1.758,300,2.729,301,1.758,302,2.729,303,2.729,304,2.543,305,2.729,306,2.226,307,1.895,308,1.648,309,2.323,310,2.226,311,3.345,312,2.004,313,2.729,314,2.729,315,1.758,316,3.001,317,1.895,318,2.729,319,2.226,320,1.758,321,2.729,322,3.771,323,1.758,324,1.758,325,2.226,326,1.758,327,1.618,328,3.802,329,0.814,330,1.758,331,1.758,332,2.729,333,1.758,334,1.758,335,1.758,336,1.758,337,1.758,338,1.434,339,1.895,340,1.758,341,1.221,342,1.648,343,0.934,344,2.226,345,1.061,346,0.934,347,0.658,348,0.588,349,1.061,350,2.729,351,1.758,352,1.758,353,1.758,354,3.345,355,1.758,356,0.934,357,1.758,358,1.434,359,2.036,360,1.434,361,1.758,362,1.758,363,1.758,364,1.758,365,2.729,366,2.729,367,1.758,368,1.434,369,1.061,370,1.061,371,1.061,372,1.758,373,3.331,374,1.758,375,1.758,376,1.758,377,1.758,378,1.434,379,1.758,380,1.434,381,1.758,382,1.758,383,1.758,384,1.758,385,1.758,386,1.758,387,2.729,388,2.729,389,2.729,390,1.758,391,3.345,392,4.321,393,1.434,394,1.758,395,2.729,396,1.758,397,1.758,398,1.061,399,1.758,400,1.758,401,1.758,402,1.758,403,1.758,404,1.758,405,1.221,406,1.924,407,4.083,408,1.758,409,1.758,410,2.729,411,2.729,412,2.619,413,3.076,414,1.758,415,1.221,416,1.221,417,1.758,418,1.061,419,1.434,420,1.061,421,1.758,422,1.758,423,0.658,424,1.221,425,1.221,426,1.434,427,1.434,428,1.758,429,2.277,430,3.345,431,3.771,432,1.758,433,2.729,434,1.758,435,1.758,436,3.345,437,2.729,438,1.758,439,1.758,440,1.758,441,1.221,442,1.758,443,3.771,444,0.737,445,3.345,446,1.758,447,1.758,448,3.345,449,1.758,450,3.345,451,1.758,452,1.758,453,1.758,454,3.771,455,2.729,456,3.345,457,1.758,458,2.729,459,1.758,460,1.758,461,1.434,462,1.758,463,1.221,464,1.648,465,1.895,466,1.221,467,1.648,468,1.061,469,1.648,470,1.45,471,1.221,472,2.729,473,0.588,474,1.221,475,1.758,476,1.758,477,1.221,478,1.434,479,1.221,480,1.434,481,1.758,482,1.221,483,1.434]],["title/components/DeviceSelectorComponent.html",[109,0.327,228,0.855]],["body/components/DeviceSelectorComponent.html",[3,0.328,4,0.27,5,0.328,9,0.328,11,0.616,20,0.644,22,0.215,23,0.919,26,0.506,27,0.046,34,0.482,35,1.484,36,0.523,37,0.52,41,2.077,48,0.919,50,0.676,51,0.676,60,1.037,63,0.27,68,0.27,70,0.643,72,1.42,77,1.42,78,1.165,91,0.293,109,0.506,117,1.463,128,1.076,132,0.022,133,0.03,134,0.022,135,0.857,136,1.463,137,1.206,138,1.355,139,1.355,140,1.355,147,1.999,148,2.092,150,0.763,151,1.841,152,1.841,153,2.34,154,0.972,155,1.355,156,1.355,157,1.639,159,1.841,163,1.841,165,1.639,168,2.244,170,1.206,171,0.807,172,0.961,175,1.463,176,1.532,177,2.36,186,1.639,189,1.639,190,1.355,193,1.736,194,1.736,195,1.484,199,0.676,200,1.999,202,2.381,205,1.355,207,1.463,221,1.076,222,1.206,223,2.244,224,1.355,225,1.355,226,0.857,227,1.355,228,1.42,229,1.355,230,0.763,231,1.355,232,0.857,233,1.206,234,1.355,235,0.857,236,1.355,237,1.355,243,0.676,247,2.092,259,2.681,269,2.077,270,2.345,271,3.886,273,3.188,277,2.714,304,2.077,309,2.714,312,2.531,327,1.463,329,0.857,342,2.36,343,1.528,345,1.736,346,1.528,356,1.528,359,1.355,369,1.736,370,1.736,371,1.736,398,1.736,406,1.355,427,2.345,444,1.639,467,2.36,468,1.736,469,1.736,470,1.528,484,5.424,485,4.424,486,2.875,487,5.139,488,3.188,489,3.188,490,3.908,491,3.908,492,3.908,493,2.714,494,3.188,495,3.908,496,2.714,497,4.44,498,3.908,499,4.44,500,4.44,501,4.44,502,4.44,503,3.622,504,4.44,505,4.44,506,4.764,507,2.876,508,2.875,509,2.875,510,1.639,511,3.908,512,2.875,513,2.875,514,2.875,515,2.875,516,2.875,517,2.875,518,2.875,519,2.345,520,2.875,521,2.875,522,2.875,523,2.345,524,4.44,525,2.875,526,2.345,527,2.875,528,2.875,529,2.875,530,2.875,531,2.875,532,2.875,533,1.355,534,2.875,535,2.875,536,1.736,537,2.875,538,1.736,539,2.875,540,1.996,541,2.875,542,2.875,543,2.875,544,2.875,545,4.44,546,3.622,547,2.345,548,2.875,549,2.345,550,2.875,551,2.345,552,5.139,553,3.908,554,2.875,555,2.875,556,1.996,557,1.996,558,2.875,559,2.875,560,2.875,561,2.875,562,2.875,563,2.875]],["title/interfaces/Devices.html",[0,0.215,37,0.269]],["body/interfaces/Devices.html",[0,0.382,2,0.837,3,0.32,4,0.264,5,0.32,7,0.824,9,0.537,11,0.606,15,0.744,16,0.32,18,1.147,19,0.898,20,0.638,22,0.21,23,0.905,24,0.443,25,0.443,26,0.5,27,0.046,31,0.967,32,0.583,34,0.264,37,0.361,38,0.583,44,0.837,45,1.025,46,1.11,47,0.661,50,1.11,51,1.11,57,0.692,58,0.798,63,0.361,68,0.507,70,0.606,71,0.876,72,1.147,76,0.783,77,1.147,80,1.02,90,0.745,91,0.288,94,0.91,100,0.738,104,0.798,107,0.981,113,0.745,114,0.745,118,0.744,122,1.02,124,0.905,130,1.285,132,0.021,133,0.029,134,0.021,150,0.745,154,0.797,171,0.699,174,1.147,176,1.147,199,1.229,243,0.905,253,1.051,255,1.178,257,1.323,283,1.323,285,1.979,286,1.812,287,1.252,329,0.837,347,1.44,348,1.285,423,1.051,473,0.939,510,1.613,533,2.222,564,1.323,565,2.044,566,1.285,567,1.812,568,2.507,569,1.812,570,1.979,571,2.222,572,1.812,573,1.44,574,1.323,575,2.073,576,1.992,577,1.323,578,1.466,579,2.222,580,1.323,581,1.051,582,1.323,583,1.492,584,1.323,585,1.323,586,2.044,587,1.44,588,1.323,589,1.323,590,1.323,591,1.323,592,1.323,593,1.652,594,1.323,595,1.44,596,1.613,597,0.939,598,1.178,599,1.492,600,1.178,601,1.323,602,1.492,603,1.323,604,1.178,605,1.812,606,1.323,607,1.323,608,2.328,609,1.492,610,1.492,611,1.613,612,1.492,613,2.507,614,1.492,615,1.492,616,1.492,617,2.044,618,1.323,619,1.492,620,1.492,621,2.044,622,1.492,623,1.812,624,1.492,625,1.492,626,2.044,627,1.812,628,1.178,629,2.044,630,1.492,631,0.939,632,2.044,633,1.323,634,1.613,635,1.323,636,1.492,637,1.492,638,1.492,639,1.178,640,1.323,641,1.492,642,1.492,643,1.492,644,1.323,645,1.613,646,1.812,647,1.613,648,1.323,649,1.812,650,1.44,651,1.323,652,1.178,653,1.178,654,1.323,655,1.323,656,1.178,657,1.178,658,1.323,659,1.492]],["title/interfaces/IceServer.html",[0,0.215,650,1.073]],["body/interfaces/IceServer.html",[0,0.382,2,0.838,3,0.32,4,0.264,5,0.32,7,0.824,9,0.538,11,0.607,15,0.744,16,0.32,18,1.147,19,0.898,20,0.638,22,0.21,23,0.905,24,0.443,25,0.443,26,0.5,27,0.046,31,0.967,32,0.583,34,0.264,37,0.264,38,0.583,44,0.838,45,1.026,46,1.11,47,0.661,50,0.661,51,0.661,57,0.692,58,0.798,63,0.361,68,0.507,70,0.538,71,0.851,72,0.838,76,0.783,77,0.838,80,1.021,90,0.746,91,0.288,94,0.911,100,0.738,104,0.798,107,0.981,113,0.746,114,0.746,118,0.744,122,1.021,124,0.905,130,1.286,132,0.021,133,0.029,134,0.021,150,0.746,154,0.797,171,0.699,172,1.577,174,1.147,176,0.838,199,1.23,243,0.905,253,1.052,255,1.179,257,1.324,283,1.324,285,1.98,286,1.813,287,1.252,329,0.838,347,1.441,348,1.286,423,1.052,473,0.939,510,1.614,533,1.324,564,1.324,565,1.493,566,1.286,567,1.813,568,2.508,569,1.813,570,1.98,571,2.223,572,1.813,573,1.441,574,1.324,575,2.074,576,1.992,577,1.324,578,1.467,579,2.223,580,1.324,581,1.052,582,1.324,583,1.493,584,1.324,585,1.324,586,2.045,587,1.441,588,1.324,589,1.324,590,1.324,591,1.324,592,1.324,593,1.652,594,1.324,595,1.441,596,1.614,597,0.939,598,1.179,599,1.493,600,1.179,601,1.324,602,1.493,603,1.324,604,1.179,605,1.813,606,1.324,607,1.324,608,2.329,609,1.493,610,1.493,611,1.614,612,1.493,613,2.508,614,1.493,615,1.493,616,1.493,617,2.045,618,1.324,619,1.493,620,1.493,621,2.045,622,1.493,623,1.813,624,1.493,625,1.493,626,2.045,627,1.813,628,1.179,629,2.045,630,1.493,631,0.939,632,2.045,633,1.324,634,1.841,635,1.324,636,1.493,637,1.493,638,1.493,639,1.179,640,1.324,641,1.493,642,1.493,643,1.493,644,1.324,645,1.614,646,1.813,647,1.614,648,1.324,649,1.813,650,1.767,651,1.813,652,1.614,653,1.179,654,1.324,655,1.324,656,1.614,657,1.98,658,2.223,659,2.508,660,2.292]],["title/modules/JanusModule.html",[661,1.731,662,1.523]],["body/modules/JanusModule.html",[3,0.418,4,0.344,5,0.418,7,0.825,27,0.046,34,0.54,36,0.666,68,0.344,91,0.343,132,0.028,133,0.035,134,0.028,135,1.723,142,2.991,195,1.226,221,1.373,226,1.723,228,1.723,230,1.534,232,1.723,235,1.723,239,2.991,485,2.991,519,2.991,661,2.214,662,3.146,663,2.546,664,1.948,665,3.468,666,2.991,667,2.546,668,4.075,669,2.991,670,2.991,671,2.991,672,3.736,673,2.991,674,2.991,675,3.667,676,3.736,677,4.58,678,2.991,679,4.58,680,3.667,681,2.991,682,3.667,683,3.667,684,3.667,685,3.667,686,4.58,687,3.667,688,3.667,689,3.667,690,2.991,691,3.667,692,4.995,693,2.991,694,4.58,695,4.58,696,3.667,697,4.58,698,3.667,699,2.991]],["title/components/JanusVideoroomComponent.html",[109,0.327,230,0.761]],["body/components/JanusVideoroomComponent.html",[0,0.289,1,1.186,3,0.21,4,0.173,5,0.21,7,0.765,9,0.21,11,0.29,13,1.502,15,0.29,16,0.21,19,0.514,20,0.681,22,0.138,24,0.609,25,0.446,26,0.612,27,0.046,34,0.455,35,1.394,36,0.334,37,0.496,38,0.714,42,1.75,44,1.152,45,0.382,48,1.113,52,0.867,57,0.694,58,0.865,60,0.75,63,0.413,68,0.173,69,1.058,70,0.21,71,0.694,76,0.714,78,0.843,80,1.425,85,0.488,90,0.488,91,0.33,94,0.913,100,0.595,103,1.058,107,0.702,109,0.602,110,2.074,111,0.867,114,1.025,115,1.332,116,0.978,117,1.771,118,0.446,119,1.186,121,2.229,122,1.168,123,1.446,125,0.772,132,0.014,133,0.021,134,0.014,135,0.549,136,1.058,137,0.772,138,0.867,139,0.867,140,0.867,147,1.186,148,1.622,150,0.488,151,1.332,152,1.332,153,1.985,154,1.032,155,0.867,156,0.867,157,1.186,159,1.332,163,1.82,164,1.502,165,1.186,168,2.235,170,1.186,171,0.833,172,0.945,174,0.843,175,1.289,178,1.186,185,0.867,186,2.035,189,2.172,190,0.867,191,1.111,192,1.707,193,1.111,194,1.111,195,0.615,199,1.165,200,1.749,202,1.186,205,0.867,207,1.816,221,0.689,222,0.772,223,1.82,224,0.867,225,0.867,226,0.549,227,0.867,228,0.549,229,0.867,230,1.025,231,0.867,232,0.549,233,0.772,234,0.867,235,0.549,236,0.867,237,0.867,243,0.665,247,1.622,253,1.058,259,2.079,269,1.502,282,1.963,287,0.75,288,1.501,293,2.809,309,1.963,312,1.502,317,1.278,319,1.501,325,1.501,327,1.289,329,1.027,339,2.391,342,1.707,343,0.978,345,1.111,346,0.978,347,0.689,348,0.615,349,1.111,356,0.978,369,1.111,370,1.111,371,1.111,378,1.501,380,1.501,398,1.111,416,1.963,418,1.707,420,1.111,425,1.963,444,1.186,461,3.152,464,1.111,489,2.306,507,2.333,536,1.111,538,1.111,540,1.963,566,0.945,573,1.058,578,0.615,581,1.716,585,1.332,587,1.289,593,1.471,595,1.058,597,0.615,628,1.985,631,0.615,634,1.621,640,1.622,646,1.332,647,2.145,650,1.289,652,1.186,653,1.186,654,0.867,655,0.867,656,1.621,657,1.186,658,1.82,660,1.501,667,1.963,681,4.38,700,5.369,701,1.84,702,2.306,703,2.827,704,2.306,705,2.827,706,2.306,707,2.306,708,1.963,709,2.306,710,2.827,711,3.864,712,2.827,713,2.391,714,3.217,715,2.809,716,4.731,717,3.443,718,2.827,719,4.731,720,3.152,721,4.169,722,3.439,723,3.401,724,3.859,725,3.443,726,1.84,727,1.84,728,1.84,729,2.827,730,1.84,731,3.864,732,1.84,733,2.683,734,2.827,735,3.152,736,2.827,737,2.827,738,1.84,739,3.152,740,2.306,741,2.827,742,2.827,743,2.827,744,2.827,745,1.963,746,1.502,747,2.827,748,2.827,749,2.306,750,2.827,751,2.827,752,2.827,753,1.84,754,2.827,755,2.827,756,1.84,757,2.306,758,3.864,759,2.827,760,2.306,761,1.84,762,2.827,763,3.864,764,1.84,765,2.827,766,2.827,767,1.84,768,1.84,769,1.84,770,2.306,771,2.306,772,1.84,773,3.152,774,3.152,775,2.827,776,2.306,777,1.84,778,1.84,779,1.278,780,1.84,781,1.84,782,1.84,783,1.84,784,1.84,785,1.84,786,1.84,787,1.84,788,1.84,789,1.84,790,3.443,791,1.84,792,1.84,793,1.278,794,1.84,795,1.84,796,1.84,797,1.501,798,1.111,799,1.84,800,1.84,801,3.864,802,3.864,803,3.864,804,1.84,805,1.84,806,1.84,807,1.84,808,2.827,809,1.84,810,1.84,811,1.84,812,1.84,813,1.111,814,1.84,815,2.827,816,1.278,817,1.501,818,1.84,819,1.501,820,1.84,821,1.278,822,1.501,823,1.84,824,1.84,825,1.501,826,1.84,827,1.501,828,1.84,829,1.501,830,2.306,831,1.84,832,1.84,833,1.84,834,1.84,835,1.501,836,1.84,837,1.501,838,1.501,839,1.84,840,2.827,841,2.827,842,1.84,843,1.84,844,1.84,845,1.84,846,1.84,847,1.84,848,1.84,849,1.84,850,1.84,851,1.84,852,1.84,853,1.84,854,3.864,855,1.707,856,1.84,857,1.84,858,1.84,859,1.84,860,2.827,861,1.84,862,1.84,863,1.84,864,1.84,865,2.827,866,1.84,867,1.84,868,1.84,869,1.84,870,2.827,871,1.84,872,1.84,873,1.84,874,1.84,875,1.84,876,1.84,877,1.84,878,1.84,879,1.84,880,1.501,881,1.84,882,1.84,883,1.84,884,1.84]],["title/interfaces/PublishOwnFeedEvent.html",[0,0.215,69,1.073]],["body/interfaces/PublishOwnFeedEvent.html",[0,0.392,1,1.711,2,0.913,3,0.465,4,0.288,5,0.349,6,1.85,7,0.825,8,1.85,9,0.349,10,2.705,11,0.875,12,1.85,13,1.628,14,2.167,15,0.803,16,0.609,17,1.147,18,0.913,19,1.009,20,0.688,21,1.85,22,0.229,23,0.96,24,0.825,25,0.771,26,0.557,27,0.046,28,1.921,29,2.462,30,1.443,31,0.557,32,0.846,33,1.85,34,0.383,35,1.634,36,0.557,37,0.491,38,0.846,39,1.85,40,1.923,41,2.167,42,1.634,43,2.462,44,1.458,45,0.846,46,0.96,47,0.96,48,1.079,49,1.921,50,1.232,51,1.232,52,1.921,53,2.462,54,1.921,55,2.462,56,2.466,57,0.643,58,1.014,59,2.364,60,1.495,61,2.167,62,1.921,63,0.383,64,2.167,65,2.462,66,2.462,67,2.598,68,0.459,69,1.527,70,0.557,71,0.882,72,1.216,73,2.951,74,2.951,75,2.951,76,0.743,77,1.216,78,1.216,79,2.462,80,1.297,81,2.462,82,2.462,83,2.462,84,2.462,85,1.082,86,2.462,87,2.303,88,2.462,89,2.167,90,1.082,91,0.392,92,2.462,93,2.167,94,0.951,95,1.921,96,1.628,97,1.716,98,2.16,99,1.85,100,0.414,101,1.443,102,1.85,103,1.147,104,0.846,105,1.85,106,1.443,107,0.557,108,1.85,109,0.349,110,1.443,111,1.443,112,1.628,113,0.813,114,1.082,115,1.443,116,1.628,117,1.147,118,0.643,119,1.711,120,1.85,121,1.443,122,1.082,123,1.147,124,0.721,125,1.285,126,1.85,127,1.85,128,1.147,129,1.85,130,1.024,131,1.443,132,0.023,133,0.031,134,0.023]],["title/interfaces/Publisher.html",[0,0.215,100,0.387]],["body/interfaces/Publisher.html",[0,0.385,2,0.792,3,0.302,4,0.249,5,0.302,7,0.828,9,0.552,11,0.671,15,0.764,16,0.302,18,1.27,19,0.88,20,0.654,22,0.199,23,0.87,24,0.419,25,0.419,26,0.525,27,0.046,31,0.954,32,0.551,34,0.249,37,0.249,38,0.551,44,1.103,45,1.005,46,1.084,47,0.625,50,0.625,51,0.625,57,0.764,58,0.884,63,0.4,68,0.5,70,0.525,71,0.875,72,0.792,76,0.774,77,0.792,80,1.13,90,0.982,91,0.277,94,1.005,100,0.759,104,0.768,107,0.992,113,0.982,114,0.982,118,0.726,122,0.982,124,0.87,130,1.539,132,0.02,133,0.028,134,0.02,150,0.704,154,0.88,171,0.774,174,1.103,176,0.792,199,1.211,243,1.002,253,1.385,255,1.552,257,1.743,283,1.743,285,1.932,286,2.006,287,1.285,329,0.792,347,1.385,348,1.237,423,0.994,473,1.237,510,1.786,533,1.251,564,1.251,565,1.411,566,1.237,567,1.743,568,2.447,569,1.743,570,1.932,571,2.17,572,1.743,573,1.385,574,1.251,575,2.032,576,1.965,577,1.251,578,1.423,579,2.17,580,1.251,581,0.994,582,1.251,583,1.411,584,1.251,585,1.251,586,1.966,587,1.385,588,1.251,589,1.251,590,1.251,591,1.251,592,1.251,593,1.782,594,1.251,595,1.594,596,1.552,597,0.887,598,1.114,599,1.411,600,1.114,601,1.251,602,1.411,603,1.251,604,1.114,605,2.282,606,1.251,607,1.251,608,2.571,609,1.411,610,1.411,611,1.552,612,1.411,613,2.789,614,1.966,615,1.966,616,1.966,617,2.447,618,1.743,619,1.966,620,1.966,621,2.447,622,1.966,623,2.17,624,1.966,625,1.966,626,2.447,627,2.17,628,1.552,629,2.447,630,1.966,631,1.237,632,2.447,633,1.743,634,1.786,635,1.743,636,1.966,637,1.966,638,1.966,639,1.552,640,1.743,641,1.966,642,1.966,643,1.966,644,1.251,645,1.552,646,1.743,647,1.552,648,1.251,649,1.743,650,1.385,651,1.251,652,1.114,653,1.114,654,1.251,655,1.251,656,1.114,657,1.114,658,1.251,659,1.411]],["title/interfaces/RemoteFeed.html",[0,0.215,25,0.452]],["body/interfaces/RemoteFeed.html",[0,0.377,2,0.804,3,0.307,4,0.253,5,0.307,7,0.831,9,0.528,11,0.677,15,0.795,16,0.307,18,1.28,19,0.972,20,0.626,22,0.202,23,0.88,24,0.425,25,0.589,26,0.589,27,0.046,31,1.01,32,0.776,34,0.253,37,0.253,38,0.559,44,0.804,45,1.01,46,1.091,47,0.634,50,0.634,51,0.634,57,0.677,58,0.776,63,0.351,68,0.502,70,0.528,71,0.877,72,0.804,76,0.775,77,0.804,80,0.992,90,0.715,91,0.347,94,0.891,100,0.751,104,0.962,107,1.027,113,0.715,114,0.715,118,0.731,122,0.992,124,1.091,130,1.25,132,0.02,133,0.028,134,0.02,150,0.715,154,0.78,171,0.78,174,1.28,176,0.804,199,1.216,243,1.01,253,1.009,255,1.131,257,1.27,283,1.27,285,1.945,286,1.761,287,1.337,329,0.804,347,1.735,348,1.25,423,1.009,473,0.901,510,1.801,533,1.27,564,1.27,565,1.432,566,1.25,567,1.761,568,2.463,569,1.761,570,1.945,571,2.184,572,1.761,573,1.399,574,1.27,575,2.043,576,1.972,577,1.27,578,1.435,579,2.184,580,1.27,581,1.009,582,1.27,583,1.432,584,1.27,585,1.27,586,1.986,587,1.399,588,1.27,589,1.27,590,1.27,591,1.27,592,1.27,593,1.628,594,1.761,595,1.607,596,1.801,597,1.25,598,1.131,599,1.986,600,1.945,601,2.184,602,1.986,603,1.761,604,1.945,605,2.294,606,1.27,607,1.27,608,2.294,609,1.986,610,1.986,611,2.114,612,2.281,613,2.463,614,1.432,615,1.432,616,1.432,617,1.986,618,1.27,619,1.432,620,1.432,621,1.986,622,1.432,623,1.761,624,1.432,625,1.432,626,1.986,627,1.761,628,1.131,629,1.986,630,1.432,631,0.901,632,1.986,633,1.27,634,1.568,635,1.27,636,1.432,637,1.432,638,1.432,639,1.131,640,1.27,641,1.432,642,1.432,643,1.432,644,1.27,645,1.568,646,1.761,647,1.568,648,1.27,649,1.761,650,1.399,651,1.27,652,1.131,653,1.131,654,1.27,655,1.27,656,1.131,657,1.131,658,1.27,659,1.432]],["title/interfaces/RequestSubstreamEvent.html",[0,0.215,103,1.073]],["body/interfaces/RequestSubstreamEvent.html",[0,0.399,1,1.782,2,0.971,3,0.484,4,0.306,5,0.371,6,1.967,7,0.84,8,1.967,9,0.371,10,2.76,11,0.885,12,1.967,13,1.731,14,2.257,15,0.84,16,0.607,17,1.22,18,0.971,19,1.039,20,0.677,21,1.967,22,0.244,23,0.999,24,0.84,25,0.84,26,0.484,27,0.046,28,2.226,29,2.853,30,1.535,31,0.592,32,0.881,33,1.967,34,0.399,35,1.674,36,0.592,37,0.488,38,0.881,39,1.967,40,1.782,41,1.731,42,1.42,43,1.967,44,1.266,45,0.676,46,0.767,47,0.767,48,1.112,49,1.535,50,0.999,51,0.999,52,1.535,53,1.967,54,1.535,55,1.967,56,2.001,57,0.514,58,0.881,59,2.234,60,1.413,61,1.731,62,1.535,63,0.306,64,1.731,65,1.967,66,1.967,67,2.257,68,0.47,69,1.22,70,0.484,71,0.855,72,0.971,73,2.564,74,2.564,75,2.564,76,0.639,77,0.971,78,0.971,79,1.967,80,1.254,81,1.967,82,1.967,83,1.967,84,1.967,85,0.865,86,1.967,87,1.535,88,1.967,89,1.731,90,0.865,91,0.375,92,1.967,93,1.731,94,0.676,95,2.226,96,2.257,97,1.944,98,2.447,99,2.564,100,0.574,101,2.001,102,2.564,103,1.59,104,0.981,105,2.564,106,2.359,107,0.859,108,1.967,109,0.371,110,1.535,111,1.535,112,1.731,113,0.865,114,1.127,115,1.535,116,1.731,117,1.22,118,0.67,119,1.782,120,1.967,121,1.535,122,1.127,123,1.22,124,0.767,125,1.367,126,1.967,127,1.967,128,1.22,129,1.967,130,1.089,131,1.535,132,0.025,133,0.032,134,0.025]],["title/interfaces/RoomInfo.html",[0,0.215,24,0.452]],["body/interfaces/RoomInfo.html",[0,0.378,2,0.806,3,0.308,4,0.254,5,0.308,7,0.863,9,0.601,11,0.591,15,0.732,16,0.308,18,1.117,19,0.886,20,0.627,22,0.203,23,0.882,24,0.591,25,0.426,26,0.601,27,0.046,31,1.011,32,0.561,34,0.254,37,0.254,38,0.561,44,0.806,45,1.012,46,1.147,47,0.882,50,0.636,51,0.636,57,0.732,58,0.892,63,0.404,68,0.503,70,0.529,71,0.871,72,0.806,76,0.776,77,0.806,80,0.994,90,0.718,91,0.281,94,1.012,100,0.732,104,0.778,107,1.023,113,0.718,114,0.718,118,0.732,122,0.994,124,0.882,130,1.253,132,0.021,133,0.028,134,0.021,150,0.994,154,0.844,171,0.681,174,1.117,176,0.806,199,1.217,243,0.882,253,1.013,255,1.135,257,1.274,283,1.274,285,1.948,286,2.026,287,1.232,329,1.117,347,1.403,348,1.552,423,1.013,473,0.904,510,1.572,533,1.274,564,1.274,565,1.437,566,1.253,567,1.766,568,2.467,569,1.766,570,1.948,571,2.187,572,1.766,573,1.403,574,1.274,575,2.116,576,2.029,577,1.274,578,1.762,579,2.187,580,1.274,581,1.403,582,1.766,583,1.991,584,2.187,585,1.766,586,2.285,587,1.61,588,2.187,589,1.274,590,1.766,591,2.187,592,1.274,593,1.789,594,1.274,595,1.403,596,1.572,597,0.904,598,1.135,599,1.437,600,1.135,601,1.274,602,1.437,603,1.274,604,1.135,605,1.766,606,1.274,607,1.274,608,2.297,609,1.437,610,1.437,611,1.572,612,1.437,613,2.467,614,1.437,615,1.437,616,1.437,617,1.991,618,1.274,619,1.437,620,1.437,621,1.991,622,1.437,623,1.766,624,1.437,625,1.437,626,1.991,627,1.766,628,1.135,629,1.991,630,1.437,631,0.904,632,1.991,633,1.274,634,1.572,635,1.274,636,1.437,637,1.437,638,1.437,639,1.135,640,1.274,641,1.437,642,1.437,643,1.437,644,1.274,645,1.572,646,1.766,647,1.572,648,1.274,649,1.766,650,1.403,651,1.274,652,1.135,653,1.135,654,1.274,655,1.274,656,1.135,657,1.135,658,1.274,659,1.437]],["title/components/SelfVideoComponent.html",[109,0.327,232,0.855]],["body/components/SelfVideoComponent.html",[3,0.292,4,0.241,5,0.292,9,0.292,11,0.569,16,0.411,20,0.346,22,0.192,24,0.82,26,0.476,27,0.046,31,0.656,32,0.867,34,0.339,35,1.397,36,0.466,37,0.534,40,2.081,47,1.067,48,0.603,50,0.849,51,1.067,52,1.969,56,1.208,57,0.404,58,0.532,59,1.903,60,1.204,63,0.241,68,0.241,69,0.96,70,0.476,76,0.488,78,1.076,85,1.269,87,1.208,91,0.401,109,0.611,118,0.782,123,0.96,132,0.019,133,0.027,134,0.019,135,0.764,136,1.352,137,1.076,138,1.208,139,1.208,140,1.208,146,2.507,147,1.515,148,1.969,149,2.523,150,0.68,151,1.701,152,1.701,153,2.183,154,0.974,155,1.208,156,1.969,157,1.515,159,1.701,163,1.701,164,1.918,165,1.753,168,2.006,170,1.076,171,0.759,172,0.857,175,1.352,178,1.076,185,1.208,186,1.903,187,1.78,189,1.753,190,1.208,195,0.857,197,1.78,199,0.849,200,1.753,205,1.208,207,1.352,211,2.523,221,0.96,222,1.076,223,2.137,224,1.208,225,1.208,226,0.764,227,1.208,228,0.764,229,1.208,230,0.68,231,1.208,232,1.352,233,2.274,234,1.208,235,0.764,236,1.208,237,1.208,243,0.983,255,1.515,269,1.918,304,2.22,307,1.78,308,2.523,312,1.362,327,1.352,348,0.857,349,1.548,359,2.137,405,1.78,406,1.208,418,2.18,429,2.994,441,1.78,444,1.753,463,1.78,464,2.994,465,2.902,466,1.78,467,1.548,468,1.548,469,1.548,470,1.918,471,1.78,473,1.207,474,3.15,477,3.613,478,2.091,479,3.444,482,2.507,496,1.78,523,2.091,526,2.091,536,1.548,538,1.548,556,3.15,557,2.507,575,1.076,576,1.352,578,0.857,589,1.208,594,1.701,597,0.857,623,1.208,648,1.208,690,4.046,714,2.18,745,1.78,746,1.918,773,2.945,776,2.945,779,2.507,793,1.78,813,1.548,816,2.507,821,1.78,830,2.945,855,2.18,885,4.96,886,2.564,887,3.61,888,3.61,889,3.61,890,2.564,891,3.409,892,3.61,893,2.564,894,2.564,895,2.564,896,3.61,897,4.179,898,2.564,899,2.564,900,3.61,901,2.945,902,3.61,903,2.564,904,2.564,905,2.564,906,2.564,907,3.61,908,2.564,909,2.564,910,2.564,911,2.564,912,2.564,913,2.564,914,2.564,915,2.091,916,2.564,917,2.564,918,4.179,919,2.564,920,2.564,921,1.78,922,2.564,923,2.564,924,3.61,925,2.564,926,2.564,927,2.091,928,2.564,929,2.564,930,3.61,931,2.564,932,2.564,933,2.564,934,2.564,935,2.091,936,2.091,937,2.564,938,2.091,939,2.564,940,2.564,941,2.564,942,2.564,943,2.564,944,2.091,945,2.564,946,2.945,947,2.564,948,4.244,949,2.564,950,2.564,951,2.564,952,2.564,953,2.564,954,3.61,955,2.091,956,2.091,957,2.564,958,2.564,959,2.564,960,2.564,961,2.564,962,2.564,963,2.091,964,2.091,965,4.157,966,2.091,967,2.091,968,2.091,969,2.091,970,2.945,971,2.091,972,2.091,973,2.091,974,2.091,975,2.945,976,2.945,977,2.091,978,2.091,979,2.091,980,2.091,981,2.091,982,2.091,983,2.091,984,3.409,985,2.091,986,2.091,987,2.091,988,2.091,989,2.091,990,2.091,991,2.091,992,2.091,993,2.945,994,2.091,995,1.78,996,2.091,997,2.091,998,2.091]],["title/components/VideoBoxComponent.html",[109,0.327,235,0.855]],["body/components/VideoBoxComponent.html",[3,0.23,4,0.19,5,0.23,9,0.23,11,0.64,15,0.479,16,0.346,17,1.519,20,0.273,22,0.273,23,0.715,25,0.833,26,0.578,27,0.046,32,0.757,34,0.457,35,1.453,36,0.368,37,0.518,38,0.42,42,1.016,45,0.42,48,0.476,57,0.686,58,0.631,59,0.849,60,0.968,63,0.19,68,0.19,70,0.52,71,0.319,76,0.273,78,0.906,85,0.806,91,0.42,94,0.757,95,1.719,97,1.709,100,0.411,103,0.757,104,1.011,106,1.911,107,0.663,109,0.495,117,0.757,124,1.074,128,0.757,132,0.015,133,0.023,134,0.015,135,0.603,136,1.138,137,0.849,138,0.953,139,0.953,140,0.953,143,1.65,146,2.817,147,1.275,148,1.719,149,2.203,150,0.537,151,1.432,152,1.432,153,2.044,154,0.886,155,0.953,156,1.911,157,1.275,158,2.479,159,1.432,160,2.479,161,1.835,162,2.479,163,1.432,164,1.615,165,1.275,166,1.65,167,3.171,168,2.216,170,1.824,171,0.886,172,1.453,174,1.296,175,1.709,176,1.453,177,1.835,178,1.916,179,2.11,180,1.835,182,2.479,184,2.479,185,2.151,186,2.301,187,1.405,189,1.702,190,0.953,191,1.221,192,1.835,194,1.221,195,1.22,196,2.479,197,1.405,198,1.65,199,1.173,200,1.702,201,1.65,202,1.702,205,0.953,206,1.65,207,1.138,210,1.65,211,1.221,213,1.65,214,1.65,218,1.65,220,1.65,221,0.757,222,0.849,223,1.911,224,0.953,225,0.953,226,0.603,227,0.953,228,0.603,229,0.953,230,0.537,231,0.953,232,0.603,233,0.849,234,0.953,235,1.209,236,0.953,237,0.953,243,0.859,259,2.203,262,3.019,265,3.309,269,1.615,287,0.806,297,2.479,304,1.615,308,2.449,312,1.939,316,2.11,317,1.405,327,1.824,328,2.479,338,1.65,341,3.019,342,1.835,343,1.075,344,1.65,345,1.221,346,1.075,349,1.221,356,1.075,359,2.296,368,1.65,369,1.221,370,1.221,371,1.221,373,1.65,393,3.309,398,1.221,406,1.911,418,1.221,424,1.405,429,2.625,441,1.405,444,1.531,463,1.405,464,2.757,465,2.534,466,1.405,467,1.835,468,1.221,469,2.203,470,1.615,471,1.405,473,1.016,474,2.817,477,2.534,479,2.534,482,2.11,483,2.479,496,1.405,556,1.405,557,2.817,566,1.016,603,1.432,604,1.531,611,1.702,631,0.676,645,1.275,693,4.35,715,2.977,745,1.405,746,1.075,779,1.405,793,1.405,813,1.221,835,1.65,891,2.977,901,2.479,915,1.65,927,1.65,944,2.479,946,1.65,948,3.725,955,2.479,956,2.479,963,1.65,964,1.65,965,3.975,966,1.65,967,1.65,968,1.65,969,1.65,970,2.479,971,1.65,972,1.65,973,1.65,974,1.65,975,2.479,976,2.977,977,1.65,978,1.65,979,1.65,980,1.65,981,1.65,982,1.65,983,1.65,984,2.977,985,1.65,986,1.65,987,1.65,988,1.65,989,1.65,990,1.65,991,1.65,992,1.65,993,2.479,994,1.65,995,1.405,996,1.65,997,1.65,998,1.65,999,5.332,1000,2.479,1001,3.038,1002,3.038,1003,3.038,1004,3.038,1005,3.038,1006,2.479,1007,2.11,1008,2.023,1009,4.566,1010,3.038,1011,3.038,1012,4.348,1013,2.023,1014,2.023,1015,2.023,1016,2.023,1017,2.023,1018,4.056,1019,4.056,1020,3.309,1021,2.023,1022,3.038,1023,2.023,1024,3.038,1025,3.038,1026,2.023,1027,2.023,1028,2.977,1029,2.023,1030,3.038,1031,3.864,1032,3.038,1033,2.023,1034,2.023,1035,2.977,1036,3.038,1037,3.038,1038,2.023,1039,1.405,1040,1.65,1041,2.023,1042,2.023,1043,2.023,1044,2.023,1045,2.023,1046,2.023,1047,2.023,1048,3.038,1049,2.023,1050,2.023,1051,2.023,1052,3.038,1053,3.038,1054,2.023,1055,2.023,1056,2.023,1057,2.023,1058,3.649,1059,2.023,1060,2.023,1061,2.023,1062,2.023,1063,2.023,1064,1.65,1065,2.023,1066,2.023,1067,2.023,1068,2.023,1069,2.023,1070,3.038,1071,2.023,1072,1.405,1073,3.038,1074,2.023,1075,2.023,1076,2.023,1077,2.023,1078,2.023,1079,2.023,1080,1.65,1081,2.023,1082,2.023,1083,3.038,1084,2.023,1085,2.023,1086,2.023,1087,2.023,1088,2.023,1089,2.023,1090,3.038,1091,2.023,1092,2.023,1093,2.023,1094,2.023,1095,2.023,1096,2.023,1097,2.023,1098,3.038,1099,3.038,1100,2.023,1101,2.023,1102,2.023,1103,2.023,1104,2.023,1105,2.023,1106,1.405,1107,2.023]],["title/interfaces/VideoRoomComponent.html",[0,0.215,121,1.35]],["body/interfaces/VideoRoomComponent.html",[0,0.407,1,1.721,2,0.922,3,0.467,4,0.29,5,0.352,6,1.866,7,0.868,8,1.866,9,0.352,10,2.713,11,0.884,12,1.866,13,1.643,14,2.18,15,0.805,16,0.582,17,1.157,18,0.922,19,1.018,20,0.709,21,1.866,22,0.231,23,0.965,24,0.89,25,0.828,26,0.61,27,0.046,28,1.933,29,2.477,30,1.456,31,0.562,32,0.956,33,1.866,34,0.385,35,1.858,36,0.562,37,0.526,38,1.018,39,1.866,40,2.142,41,1.643,42,1.371,43,1.866,44,1.223,45,0.641,46,0.727,47,0.727,48,0.965,49,1.456,50,0.965,51,0.965,52,1.456,53,1.866,54,1.456,55,1.866,56,1.933,57,0.487,58,0.851,59,2.202,60,1.393,61,1.643,62,1.456,63,0.29,64,1.643,65,1.866,66,1.866,67,2.18,68,0.461,69,1.157,70,0.467,71,0.828,72,0.922,73,2.477,74,2.477,75,2.477,76,0.622,77,0.922,78,0.922,79,1.866,80,1.355,81,1.866,82,1.866,83,1.866,84,1.866,85,0.82,86,1.866,87,1.456,88,1.866,89,1.643,90,0.82,91,0.393,92,1.866,93,1.643,94,0.641,95,2.406,96,1.643,97,1.837,98,2.311,99,1.866,100,0.418,101,1.456,102,1.866,103,1.157,104,0.956,105,1.866,106,1.456,107,0.562,108,2.477,109,0.467,110,1.933,111,1.933,112,2.18,113,1.089,114,1.302,115,1.933,116,2.18,117,1.536,118,0.774,119,2.202,120,2.477,121,1.933,122,1.393,123,1.536,124,0.965,125,1.721,126,2.477,127,2.477,128,1.536,129,2.477,130,1.371,131,2.311,132,0.023,133,0.031,134,0.023,172,1.371]],["title/injectables/WebrtcService.html",[507,1.731,1108,1.99]],["body/injectables/WebrtcService.html",[3,0.175,4,0.144,5,0.175,7,0.741,9,0.279,11,0.242,15,0.483,16,0.506,17,0.574,19,0.888,20,0.414,22,0.115,24,0.483,25,0.551,26,0.279,27,0.046,28,1.648,31,0.279,34,0.402,36,0.279,37,0.383,40,0.643,42,0.513,45,0.318,46,0.577,48,0.577,49,1.155,50,1.106,51,1.129,54,0.723,56,1.921,57,0.242,58,0.996,59,1.028,60,1.082,61,0.815,63,0.441,67,0.815,68,0.23,70,0.586,71,0.643,76,0.733,85,1.335,87,1.801,91,0.381,94,0.923,96,0.815,97,1.602,100,0.207,101,0.723,104,0.509,106,1.155,107,0.808,113,0.812,114,0.65,115,1.155,118,0.483,128,1.146,131,0.723,132,0.012,133,0.019,134,0.019,144,1.251,145,1.251,154,0.695,161,1.48,165,1.467,167,1.065,168,1.795,170,1.028,171,0.556,172,0.819,175,0.574,176,1.043,178,0.643,180,0.926,185,2.094,186,2.397,193,0.926,195,0.819,199,0.361,200,2.05,202,0.643,207,2.132,208,2.972,233,1.028,243,0.361,247,1.155,262,1.065,277,2.428,281,1.251,287,0.65,290,2.498,304,1.303,307,1.065,316,1.065,327,1.602,339,3.183,341,1.065,343,0.815,346,0.815,356,0.815,358,2.498,359,2.094,360,3.326,406,0.723,412,1.065,413,1.251,415,1.065,420,0.926,423,0.574,426,1.251,429,1.849,433,2.853,444,2.014,470,0.815,473,0.513,480,1.251,493,1.702,503,2.498,507,2.111,510,0.643,536,1.849,538,2.462,540,1.065,546,2.498,547,1.251,549,1.251,551,1.251,570,0.643,576,0.918,581,0.918,582,0.723,587,1.905,593,1.363,595,0.574,597,0.819,598,1.604,600,1.028,631,1.023,639,0.643,645,0.643,650,0.918,657,0.643,702,1.251,713,2.126,714,1.48,720,2.498,722,2.428,723,2,733,1.065,746,1.303,774,1.251,797,1.251,798,0.926,813,0.926,816,2.126,817,2,821,1.065,825,3.119,829,2,838,1.251,855,3.105,921,1.702,935,1.251,936,2,938,1.251,1006,2,1007,1.065,1035,2,1039,1.065,1040,1.251,1064,1.251,1072,1.065,1080,1.251,1106,1.065,1108,2.126,1109,1.534,1110,1.534,1111,2.451,1112,3.062,1113,2.451,1114,2.451,1115,3.497,1116,3.823,1117,3.062,1118,3.497,1119,1.534,1120,1.534,1121,2.451,1122,1.534,1123,1.534,1124,1.534,1125,1.534,1126,1.534,1127,1.534,1128,2.853,1129,2.451,1130,1.534,1131,3.497,1132,3.119,1133,2.451,1134,2,1135,1.534,1136,2.451,1137,2.498,1138,1.534,1139,1.251,1140,1.534,1141,1.534,1142,3.062,1143,1.534,1144,1.251,1145,1.534,1146,1.534,1147,1.534,1148,1.534,1149,2.498,1150,1.534,1151,2.451,1152,1.534,1153,1.534,1154,1.534,1155,1.534,1156,2.451,1157,2,1158,1.534,1159,2.451,1160,1.534,1161,1.534,1162,1.534,1163,1.534,1164,1.534,1165,1.534,1166,3.062,1167,1.534,1168,1.534,1169,1.534,1170,1.534,1171,3.062,1172,1.534,1173,2.853,1174,1.534,1175,1.534,1176,4.7,1177,1.534,1178,1.534,1179,1.534,1180,1.534,1181,3.062,1182,2.451,1183,1.534,1184,1.534,1185,1.534,1186,1.534,1187,4.584,1188,1.534,1189,1.534,1190,1.534,1191,2,1192,1.534,1193,1.534,1194,5.03,1195,2.451,1196,3.062,1197,3.062,1198,2.451,1199,2.451,1200,1.534,1201,1.534,1202,2.451,1203,1.534,1204,1.534,1205,1.534,1206,2.451,1207,2.451,1208,3.062,1209,2.451,1210,1.534,1211,1.534,1212,1.534,1213,1.534,1214,2.451,1215,2.451,1216,1.534,1217,1.534,1218,2.451,1219,1.534,1220,2.451,1221,1.534,1222,2.451,1223,1.534,1224,3.823,1225,3.497,1226,1.534,1227,1.534,1228,4.801,1229,1.534,1230,1.534,1231,2.451,1232,2.451,1233,1.534,1234,1.534,1235,1.534,1236,2.451,1237,1.534,1238,1.534,1239,2.451,1240,2.451,1241,4.801,1242,1.534,1243,2.451,1244,1.534,1245,2.451,1246,2.451,1247,2.451,1248,1.534,1249,1.534,1250,2.451,1251,2.451,1252,1.534,1253,1.534,1254,2.451,1255,1.534,1256,1.534,1257,3.119,1258,1.534,1259,1.251,1260,1.534,1261,1.534,1262,1.534,1263,1.534,1264,2.451,1265,2,1266,2.451,1267,1.534,1268,1.534,1269,1.534,1270,1.534,1271,1.534,1272,2.451,1273,2.451,1274,2.451,1275,1.534,1276,1.534,1277,3.497,1278,2.451,1279,1.534,1280,1.534,1281,1.534,1282,1.534,1283,1.534,1284,1.534,1285,1.534,1286,2.451,1287,2.451,1288,2.451,1289,1.534,1290,1.534,1291,1.534,1292,1.534,1293,1.534,1294,1.534,1295,1.534,1296,1.534,1297,1.534,1298,1.534,1299,2.451,1300,1.251,1301,1.534,1302,1.534,1303,1.534,1304,1.534,1305,2.451,1306,1.534,1307,1.534,1308,2.451,1309,1.534,1310,2.451,1311,2.451,1312,2.451,1313,2,1314,2.451,1315,1.534,1316,1.534,1317,1.534,1318,1.534,1319,2.655,1320,1.534,1321,1.534,1322,1.534,1323,1.534,1324,1.534,1325,3.497,1326,3.497,1327,1.534,1328,1.251,1329,1.251,1330,1.534,1331,1.534,1332,1.534,1333,1.534,1334,1.534,1335,1.534,1336,2,1337,1.251,1338,1.534,1339,1.534,1340,1.534,1341,1.251,1342,1.251,1343,1.534,1344,1.534,1345,1.534,1346,1.534,1347,3.497,1348,1.534,1349,2.451,1350,2.451,1351,1.534,1352,1.251,1353,1.534,1354,1.534,1355,4.077,1356,2.451,1357,1.534,1358,1.534,1359,1.534,1360,1.534,1361,1.534,1362,1.534,1363,1.534,1364,1.534,1365,1.534,1366,1.534,1367,1.534,1368,1.534,1369,1.534,1370,1.534,1371,2.451,1372,1.534,1373,1.251,1374,1.534,1375,1.534,1376,1.534,1377,1.534,1378,3.823,1379,1.534,1380,2.451,1381,1.534,1382,1.534,1383,1.534,1384,1.534,1385,1.534,1386,2.451,1387,1.534,1388,1.534,1389,3.062,1390,1.251,1391,2.451,1392,1.534,1393,1.534,1394,1.534,1395,1.534,1396,1.534,1397,1.534,1398,1.534,1399,1.534,1400,1.251,1401,1.534,1402,1.534,1403,1.534,1404,1.251,1405,1.065,1406,1.534,1407,1.534,1408,1.534,1409,1.534,1410,1.534,1411,1.534,1412,2.451,1413,1.534,1414,1.534,1415,1.534,1416,1.534,1417,1.534,1418,1.251,1419,1.534,1420,1.534,1421,1.534,1422,1.534,1423,1.534,1424,1.534,1425,1.534,1426,1.534,1427,1.534,1428,1.534,1429,2.451,1430,1.534,1431,1.534,1432,1.534,1433,1.534,1434,1.534,1435,1.534,1436,1.534,1437,1.534,1438,1.534,1439,1.534,1440,1.534,1441,1.534,1442,1.534,1443,1.534,1444,1.534,1445,3.823,1446,2.451,1447,2.451,1448,1.534,1449,1.534,1450,1.534]],["title/dependencies.html",[664,1.83,1451,1.957]],["body/dependencies.html",[27,0.044,36,0.827,132,0.035,133,0.04,134,0.035,566,1.521,664,2.769,678,3.711,1452,4.549,1453,4.549,1454,3.711,1455,5.212,1456,3.711,1457,3.711,1458,4.549,1459,4.549]],["title/miscellaneous/enumerations.html",[1460,1.449,1461,2.81]],["body/miscellaneous/enumerations.html",[7,0.643,15,0.643,19,0.741,20,0.551,22,0.305,27,0.045,31,0.888,38,1.014,45,1.126,46,1.15,100,0.661,118,0.771,132,0.031,133,0.037,134,0.031,174,1.216,285,2.277,287,1.082,329,1.777,347,1.83,348,1.634,564,1.921,567,2.303,569,2.303,570,2.277,571,2.557,572,2.303,573,1.83,575,2.051,576,2.109,577,1.921,578,1.634,579,2.557,580,1.921,596,1.711,644,1.921,649,2.303,1460,2.462,1461,3.327,1462,5.427]],["title/index.html",[22,0.18,708,1.666,1463,2.4]],["body/index.html",[4,0.407,7,0.774,16,0.314,17,1.03,19,0.789,20,0.372,27,0.044,34,0.356,36,0.5,37,0.356,42,1.895,49,2.204,54,1.297,62,1.297,63,0.356,64,1.463,68,0.356,70,0.432,71,0.598,80,1.241,89,1.463,90,0.73,91,0.325,93,1.463,98,1.787,100,0.513,101,1.297,109,0.631,110,1.297,111,1.297,112,2.761,113,0.73,117,1.03,118,0.434,123,1.03,124,0.892,125,1.155,132,0.021,133,0.029,134,0.021,137,1.155,147,1.155,153,1.591,154,1.042,157,1.155,171,0.5,175,1.03,177,2.29,178,1.821,179,1.911,180,1.662,189,1.591,195,1.268,202,1.591,208,1.911,222,1.821,230,1.007,243,0.892,246,3.094,247,2.389,248,2.245,253,1.42,254,2.245,282,1.911,284,4.002,287,0.73,306,2.245,308,1.662,310,3.094,327,1.03,365,2.245,405,1.911,412,2.634,415,1.911,416,3.407,419,2.245,420,1.662,423,1.03,424,1.911,425,1.911,488,2.245,493,2.634,494,2.245,566,0.92,573,1.03,574,1.297,581,1.42,590,2.204,593,0.92,595,1.42,596,1.155,618,1.787,627,2.045,628,1.155,631,0.92,633,1.297,634,1.155,635,1.297,639,1.155,647,1.821,651,1.787,652,1.821,656,1.591,661,2.29,662,2.306,664,2.016,665,1.911,676,2.245,699,3.094,704,2.245,706,3.094,707,2.245,708,1.911,709,2.245,714,2.29,722,1.911,724,2.245,733,3.248,735,2.245,739,2.245,740,3.094,746,2.607,749,2.245,757,4.002,760,2.245,770,3.541,771,2.245,819,2.245,822,2.245,827,2.245,837,2.245,880,2.245,921,3.248,995,1.911,1000,3.094,1007,1.911,1020,2.245,1028,2.245,1031,2.245,1072,2.634,1106,1.911,1128,2.245,1132,2.245,1134,2.245,1137,4.002,1157,2.245,1173,3.541,1191,2.245,1257,2.245,1265,2.245,1313,2.245,1319,3.248,1328,2.245,1329,3.094,1336,2.245,1337,2.245,1341,2.245,1352,2.245,1390,2.245,1400,2.245,1404,3.541,1405,1.911,1418,3.094,1451,2.245,1454,2.245,1456,3.094,1457,3.094,1464,5.295,1465,4.678,1466,3.793,1467,4.678,1468,2.752,1469,2.752,1470,2.752,1471,2.752,1472,4.34,1473,2.752,1474,2.752,1475,2.752,1476,2.752,1477,2.752,1478,2.752,1479,2.752,1480,2.752,1481,2.752,1482,2.752,1483,2.752,1484,4.34,1485,2.752,1486,2.752,1487,2.752,1488,2.752,1489,2.752,1490,2.752,1491,3.793,1492,2.752,1493,2.752,1494,2.752,1495,3.793,1496,2.752,1497,3.793,1498,3.793,1499,2.752,1500,3.793,1501,2.752,1502,4.34,1503,4.34,1504,3.793,1505,2.752,1506,4.906,1507,2.752,1508,2.752,1509,3.793,1510,2.752,1511,2.752,1512,3.793,1513,2.752,1514,2.752,1515,2.752,1516,2.752,1517,2.752,1518,4.678,1519,4.34,1520,4.34,1521,2.752,1522,2.752,1523,2.752,1524,2.752,1525,2.752,1526,2.752,1527,2.752,1528,2.245,1529,2.752,1530,2.752,1531,2.752,1532,2.752,1533,3.793,1534,3.793,1535,2.752,1536,2.245,1537,2.752,1538,2.752,1539,3.793,1540,2.752,1541,2.752,1542,2.752,1543,2.752,1544,2.752,1545,2.752,1546,2.752,1547,3.793,1548,2.752,1549,2.752,1550,3.793,1551,2.752,1552,2.752,1553,2.752,1554,2.752,1555,2.752,1556,2.752,1557,2.752,1558,2.752,1559,2.752,1560,2.752,1561,2.752,1562,2.752,1563,2.752,1564,2.752,1565,2.752,1566,3.793,1567,2.752,1568,3.793,1569,2.752,1570,2.752,1571,2.752,1572,3.793,1573,3.793,1574,2.752,1575,4.678,1576,2.752,1577,2.752,1578,2.752,1579,2.752,1580,2.752,1581,2.752,1582,2.752,1583,2.752,1584,2.752,1585,2.752,1586,2.752,1587,2.752,1588,2.752,1589,2.752,1590,2.752,1591,3.793,1592,2.752,1593,2.752,1594,2.752,1595,2.752,1596,2.752,1597,2.752,1598,2.752,1599,2.752,1600,2.752,1601,3.793,1602,2.752,1603,2.752,1604,2.752,1605,2.752,1606,2.752,1607,2.752,1608,2.752,1609,2.752,1610,2.752,1611,2.752,1612,2.752,1613,2.752,1614,2.752,1615,4.34,1616,2.752,1617,2.245,1618,3.793,1619,2.752,1620,2.752]],["title/modules.html",[663,2.708]],["body/modules.html",[27,0.04,132,0.035,133,0.04,134,0.035,662,2.456,663,3.21,1149,3.771,1617,3.771,1621,4.623,1622,4.623]],["title/overview.html",[1623,3.182]],["body/overview.html",[2,1.239,27,0.045,132,0.032,133,0.038,134,0.032,135,1.705,136,1.556,221,1.556,226,1.705,228,1.705,230,1.517,232,1.705,235,1.705,406,2.329,661,2.985,662,3.167,664,2.208,665,2.885,666,3.39,667,2.885,668,3.39,669,3.39,670,3.39,671,3.39,672,4.032,673,3.39,674,3.39,1108,2.885,1139,3.39,1623,3.39,1624,4.155]],["title/miscellaneous/variables.html",[798,2.079,1460,1.449]],["body/miscellaneous/variables.html",[9,0.517,10,2.139,15,0.852,16,0.593,22,0.225,24,0.474,26,0.665,27,0.046,30,1.415,31,0.946,47,0.947,48,1.38,63,0.282,71,0.716,76,0.784,85,0.797,91,0.225,97,1.125,104,0.623,107,0.546,119,1.26,132,0.023,133,0.031,134,0.023,135,0.896,136,1.816,154,0.732,171,0.546,207,1.507,226,0.896,228,0.896,230,0.797,232,0.896,235,0.896,247,1.897,327,1.125,329,1.749,359,2.139,444,1.905,578,1.346,584,1.897,587,1.507,588,1.897,591,1.897,592,1.897,593,1.518,597,1.004,598,1.26,600,1.26,601,1.415,604,1.26,605,1.415,606,1.415,607,1.415,608,1.415,611,1.26,653,1.689,713,2.086,798,1.814,855,3.263,1039,2.796,1144,2.451,1259,3.284,1300,2.451,1319,2.086,1342,2.451,1373,2.451,1405,2.086,1460,1.814,1528,2.451,1536,2.451,1625,4.026,1626,5.769,1627,5.786,1628,4.026,1629,4.026,1630,4.54,1631,4.026,1632,3.004,1633,4.026,1634,4.026,1635,4.026,1636,4.026,1637,4.026,1638,4.026,1639,4.026,1640,4.026,1641,4.026,1642,4.026,1643,4.026,1644,3.004,1645,4.026,1646,4.026,1647,4.026,1648,4.026,1649,4.026,1650,4.026,1651,4.026,1652,4.026,1653,4.026,1654,4.026,1655,3.004,1656,3.004,1657,3.004,1658,4.026,1659,3.004,1660,4.026,1661,3.004,1662,3.004,1663,3.004,1664,3.004,1665,4.026,1666,4.026,1667,3.004,1668,3.004,1669,4.026,1670,3.004,1671,3.004,1672,3.004,1673,3.004,1674,3.004,1675,4.54,1676,3.004,1677,3.004,1678,4.026,1679,5.53,1680,5.404,1681,3.004,1682,3.004,1683,3.004]]],"invertedIndex":[["",{"_index":27,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":359,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["0.24px",{"_index":988,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["000",{"_index":1292,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["0px",{"_index":966,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["1",{"_index":406,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"overview.html":{}}}],["10.0.1",{"_index":1458,"title":{},"body":{"dependencies.html":{}}}],["10.1.1",{"_index":1455,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":464,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["1000",{"_index":1312,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["1080",{"_index":1162,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["10px",{"_index":1102,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["1234",{"_index":1583,"title":{},"body":{"index.html":{}}}],["127",{"_index":632,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["128000",{"_index":1417,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["13",{"_index":1170,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["14px",{"_index":1104,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["15",{"_index":1215,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["16px",{"_index":980,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["1920",{"_index":1161,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["1px",{"_index":948,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["2",{"_index":433,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["2.0.0",{"_index":1453,"title":{},"body":{"dependencies.html":{}}}],["2.29.1",{"_index":1459,"title":{},"body":{"dependencies.html":{}}}],["24px",{"_index":997,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["255",{"_index":993,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["256000",{"_index":1416,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["25px",{"_index":954,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["2px",{"_index":478,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{}}}],["3",{"_index":412,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["30",{"_index":561,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["3px",{"_index":958,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["3rdparty/janus.es",{"_index":1152,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["4",{"_index":413,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["5",{"_index":389,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["50",{"_index":460,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["5px",{"_index":557,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["6",{"_index":1139,"title":{},"body":{"injectables/WebrtcService.html":{},"overview.html":{}}}],["60",{"_index":563,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["600",{"_index":982,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["64",{"_index":1681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["64000",{"_index":1419,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["777",{"_index":998,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["85",{"_index":994,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["8ae010",{"_index":973,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["9",{"_index":1624,"title":{},"body":{"overview.html":{}}}],["9999",{"_index":878,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["_attachmediastream",{"_index":1062,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["_attachvideoroomhelper(subscriber",{"_index":1216,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["_createvideoelement(canvasid",{"_index":1346,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["_get_random_string",{"_index":1213,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["_mutevideo(videoelement",{"_index":1318,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["_publishownfeed(audiodeviceid",{"_index":913,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["_setmuted(muted",{"_index":844,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["_sizecanvaselement(videowidth",{"_index":1324,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["_videoelementsafarihacks(videoelement",{"_index":1335,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["a5adb7",{"_index":475,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["absolute",{"_index":482,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["abstracted",{"_index":250,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["accept",{"_index":1619,"title":{},"body":{"index.html":{}}}],["access",{"_index":1082,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["accessors",{"_index":164,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["actual_component",{"_index":237,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["actually",{"_index":1084,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["adapter",{"_index":1573,"title":{},"body":{"index.html":{}}}],["add",{"_index":1329,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["adding",{"_index":405,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"index.html":{}}}],["addition",{"_index":1000,"title":{},"body":{"components/VideoBoxComponent.html":{},"index.html":{}}}],["additional",{"_index":1600,"title":{},"body":{"index.html":{}}}],["adjust",{"_index":925,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["adopt",{"_index":1505,"title":{},"body":{"index.html":{}}}],["advantage",{"_index":1483,"title":{},"body":{"index.html":{}}}],["affect",{"_index":258,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["afterviewinit",{"_index":149,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["afterviewinitran",{"_index":906,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["ahead",{"_index":626,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["align",{"_index":471,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["alldevices",{"_index":539,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["alldevices.filter((device",{"_index":545,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["allow",{"_index":1080,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["allows",{"_index":1133,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["already",{"_index":813,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["alternatively",{"_index":55,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["always",{"_index":1341,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["and/or",{"_index":1522,"title":{},"body":{"index.html":{}}}],["android",{"_index":180,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["angular",{"_index":416,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["angular/common",{"_index":678,"title":{},"body":{"modules/JanusModule.html":{},"dependencies.html":{}}}],["angular/core",{"_index":36,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"dependencies.html":{},"index.html":{}}}],["angular/forms",{"_index":519,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{}}}],["angularincluding",{"_index":1577,"title":{},"body":{"index.html":{}}}],["another",{"_index":129,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["answerremotefeedjsep(jsep",{"_index":1269,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["anyone",{"_index":1538,"title":{},"body":{"index.html":{}}}],["anything",{"_index":760,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["anytime",{"_index":1024,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["api",{"_index":1586,"title":{},"body":{"index.html":{}}}],["app",{"_index":1467,"title":{},"body":{"index.html":{}}}],["app.component.scss",{"_index":1581,"title":{},"body":{"index.html":{}}}],["appcomponent",{"_index":1582,"title":{},"body":{"index.html":{}}}],["application",{"_index":1506,"title":{},"body":{"index.html":{}}}],["appropriate",{"_index":1542,"title":{},"body":{"index.html":{}}}],["arg1",{"_index":1238,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["arg2",{"_index":1236,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["around",{"_index":1132,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["array",{"_index":1669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["aspect",{"_index":1533,"title":{},"body":{"index.html":{}}}],["aspectratio",{"_index":431,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["assign",{"_index":766,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["assigned",{"_index":583,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["assuming",{"_index":305,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["async",{"_index":536,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{}}}],["attach",{"_index":597,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["attach_failed",{"_index":572,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["attach_success",{"_index":1625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["attached",{"_index":285,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["attaching",{"_index":571,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["attachmediastream(elemid",{"_index":1420,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["attachremotefeed",{"_index":131,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["attachremotefeedevent",{"_index":1,"title":{"interfaces/AttachRemoteFeedEvent.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["attachremotestream",{"_index":280,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["attachvideoroom(url",{"_index":1256,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["attempts",{"_index":184,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["attribute",{"_index":1365,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["audio",{"_index":63,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["audio/video",{"_index":645,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["audio_codec",{"_index":606,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["audio_level_average",{"_index":629,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["audioboxcomponent",{"_index":135,"title":{"components/AudioBoxComponent.html":{}},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["audiocontext",{"_index":1301,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["audiodevice",{"_index":522,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["audiodeviceid",{"_index":50,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["audiodevices",{"_index":1165,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["audiodevices.length",{"_index":1169,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["audioid",{"_index":203,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["audioinput",{"_index":547,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"injectables/WebrtcService.html":{}}}],["audiooutput",{"_index":551,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"injectables/WebrtcService.html":{}}}],["audiorecv",{"_index":1409,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["audiosend",{"_index":1273,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["audiotrack",{"_index":1371,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["authentication",{"_index":1569,"title":{},"body":{"index.html":{}}}],["auto",{"_index":1106,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["automatically",{"_index":282,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["autoplay",{"_index":1083,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["available",{"_index":124,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["availableaudiodevices",{"_index":499,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["availablespeakerdevices",{"_index":500,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["availablevideodevices",{"_index":501,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["average",{"_index":624,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["await",{"_index":540,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["away",{"_index":251,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["back",{"_index":586,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["backend",{"_index":633,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["background",{"_index":473,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["bars",{"_index":1330,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["based",{"_index":1543,"title":{},"body":{"index.html":{}}}],["before",{"_index":816,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{}}}],["begin",{"_index":296,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["being",{"_index":602,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["believe",{"_index":1491,"title":{},"body":{"index.html":{}}}],["belongs",{"_index":33,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["below",{"_index":710,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["better",{"_index":425,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["between",{"_index":937,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["bisect",{"_index":438,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["bit",{"_index":422,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["bitrate",{"_index":1005,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["black",{"_index":480,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["block",{"_index":946,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["blocker",{"_index":991,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["body",{"_index":1277,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["body.appendchild(videoelement",{"_index":1339,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["boolean",{"_index":94,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["bootstrap",{"_index":666,"title":{},"body":{"modules/JanusModule.html":{},"overview.html":{}}}],["border",{"_index":477,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["both",{"_index":888,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["box",{"_index":156,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["box'},{'name",{"_index":225,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["box.component",{"_index":686,"title":{},"body":{"modules/JanusModule.html":{}}}],["box.component.html",{"_index":160,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["box.component.scss",{"_index":158,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["box.component.scss,../../styles/video",{"_index":1008,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts",{"_index":143,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["box.component.ts:133",{"_index":1029,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:166",{"_index":1023,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:197",{"_index":1033,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:20",{"_index":181,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["box.component.ts:206",{"_index":1027,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:211",{"_index":1026,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:26",{"_index":173,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["box.component.ts:29",{"_index":188,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["box.component.ts:41",{"_index":169,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["box.component.ts:45",{"_index":1016,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:48",{"_index":1015,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:54",{"_index":1014,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:57",{"_index":1038,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:64",{"_index":1017,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:68",{"_index":1021,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:71",{"_index":183,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["box.component.ts:80",{"_index":1034,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:89",{"_index":1013,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box/audio",{"_index":142,"title":{},"body":{"components/AudioBoxComponent.html":{},"modules/JanusModule.html":{}}}],["box/video",{"_index":693,"title":{},"body":{"modules/JanusModule.html":{},"components/VideoBoxComponent.html":{}}}],["break",{"_index":461,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{}}}],["broadcast",{"_index":759,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["browse",{"_index":1622,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1149,"title":{},"body":{"injectables/WebrtcService.html":{},"modules.html":{}}}],["browsers",{"_index":1364,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["bug",{"_index":1352,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["build",{"_index":1473,"title":{},"body":{"index.html":{}}}],["builder",{"_index":505,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["building",{"_index":1474,"title":{},"body":{"index.html":{}}}],["burden",{"_index":1557,"title":{},"body":{"index.html":{}}}],["button",{"_index":1028,"title":{},"body":{"components/VideoBoxComponent.html":{},"index.html":{}}}],["buttons",{"_index":1609,"title":{},"body":{"index.html":{}}}],["bytes",{"_index":1668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["calculatedwidth",{"_index":430,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["calculation",{"_index":402,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["call",{"_index":924,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["callback",{"_index":316,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["called",{"_index":17,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["calling",{"_index":290,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["camera",{"_index":77,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{}}}],["camera/microphone",{"_index":1541,"title":{},"body":{"index.html":{}}}],["canvas",{"_index":59,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["canvascontext",{"_index":1309,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.canvas.height",{"_index":1288,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.canvas.width",{"_index":1286,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.drawimage",{"_index":1296,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.drawimage(videoelement",{"_index":1284,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.fillrect(0",{"_index":1293,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.fillstyle",{"_index":1291,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.restore",{"_index":1297,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.save",{"_index":1294,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.translate(centerx",{"_index":1295,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvaselement",{"_index":1349,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvaselement.capturestream",{"_index":1356,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvaselement.getcontext('2d",{"_index":1310,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvaselement.height",{"_index":1370,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvaselement.width",{"_index":1369,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvasheight",{"_index":1326,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvasid",{"_index":87,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["canvasstream",{"_index":1355,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvasstream.addtrack(videostream.getaudiotracks()[0",{"_index":1374,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvaswidth",{"_index":1325,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["capture",{"_index":52,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["captured",{"_index":887,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["capturestream",{"_index":1353,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["case",{"_index":114,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["cases",{"_index":81,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["catch((error",{"_index":1397,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["ccc",{"_index":951,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["center",{"_index":470,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["centerx",{"_index":1285,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["centery",{"_index":1287,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["change",{"_index":178,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["changed",{"_index":1545,"title":{},"body":{"index.html":{}}}],["changedetection",{"_index":151,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["changedetectionstrategy",{"_index":190,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["changedetectionstrategy.onpush",{"_index":152,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["changedetector",{"_index":273,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{}}}],["changedetectorref",{"_index":271,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{}}}],["changes",{"_index":312,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["changes.remotefeed.currentvalue.slowlink",{"_index":1056,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["changes.remotefeed.previousvalue",{"_index":1054,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["changes.remotefeed.previousvalue.slowlink",{"_index":1055,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["changes[key].firstchange",{"_index":842,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["changing",{"_index":494,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"index.html":{}}}],["checking",{"_index":1030,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["chrome",{"_index":179,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{},"index.html":{}}}],["class",{"_index":195,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["clean",{"_index":1201,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["cleanup",{"_index":1658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cleanuplocalstream",{"_index":1210,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["clear",{"_index":1123,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["clearmediastream",{"_index":1114,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["clearmediastream(stream",{"_index":1120,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["click",{"_index":1079,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["client",{"_index":1504,"title":{},"body":{"index.html":{}}}],["clients",{"_index":1472,"title":{},"body":{"index.html":{}}}],["cluster_janusmodule",{"_index":669,"title":{},"body":{"modules/JanusModule.html":{},"overview.html":{}}}],["cluster_janusmodule_declarations",{"_index":671,"title":{},"body":{"modules/JanusModule.html":{},"overview.html":{}}}],["cluster_janusmodule_exports",{"_index":670,"title":{},"body":{"modules/JanusModule.html":{},"overview.html":{}}}],["code",{"_index":590,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["collected",{"_index":127,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["color",{"_index":474,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["combinelatest",{"_index":783,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["comes",{"_index":589,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{}}}],["common",{"_index":829,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["commonmodule",{"_index":677,"title":{},"body":{"modules/JanusModule.html":{}}}],["comms",{"_index":850,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["competitive",{"_index":1482,"title":{},"body":{"index.html":{}}}],["complete",{"_index":938,"title":{},"body":{"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{}}}],["component",{"_index":109,"title":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["component_template",{"_index":224,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["components",{"_index":136,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["components/audio",{"_index":685,"title":{},"body":{"modules/JanusModule.html":{}}}],["components/default",{"_index":687,"title":{},"body":{"modules/JanusModule.html":{}}}],["components/self",{"_index":689,"title":{},"body":{"modules/JanusModule.html":{}}}],["components/video",{"_index":692,"title":{},"body":{"modules/JanusModule.html":{}}}],["compute",{"_index":394,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["computes",{"_index":302,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["computespeakermodedimensions(aspectratio",{"_index":428,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["computevideowidth",{"_index":264,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["computevideowidth(numremotevideos",{"_index":300,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["condition",{"_index":935,"title":{},"body":{"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{}}}],["conditions",{"_index":822,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["configuration",{"_index":634,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["configure",{"_index":1412,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["configured",{"_index":1469,"title":{},"body":{"index.html":{}}}],["connect",{"_index":880,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["connection",{"_index":13,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["connections",{"_index":1521,"title":{},"body":{"index.html":{}}}],["consent",{"_index":1656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consent_dialog",{"_index":1629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consentdialog(on",{"_index":1226,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["consider",{"_index":823,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["console.log('error",{"_index":1281,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["console.log('ice",{"_index":1237,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["console.log('is",{"_index":452,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["console.log('searching",{"_index":462,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["console.log('switching",{"_index":1095,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["console.log('warning",{"_index":1183,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["console.log('would",{"_index":1435,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["const",{"_index":207,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["constraints",{"_index":1160,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["constructor",{"_index":165,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["constructor(changedetector",{"_index":270,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{}}}],["constructor(janusservice",{"_index":166,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["constructor(janusstore",{"_index":726,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["container",{"_index":793,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["containers/device",{"_index":683,"title":{},"body":{"modules/JanusModule.html":{}}}],["containers/janus",{"_index":680,"title":{},"body":{"modules/JanusModule.html":{}}}],["content",{"_index":469,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["core",{"_index":1514,"title":{},"body":{"index.html":{}}}],["coupled",{"_index":1593,"title":{},"body":{"index.html":{}}}],["create",{"_index":1257,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["create/edit/delete",{"_index":1563,"title":{},"body":{"index.html":{}}}],["created",{"_index":1126,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["createoffer",{"_index":1407,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["createstreamandoffer",{"_index":1388,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["creating",{"_index":911,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["credential",{"_index":659,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["crop",{"_index":1333,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["cross",{"_index":1673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":287,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["currentdevices",{"_index":904,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["currently",{"_index":510,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{}}}],["currentremotefeeds",{"_index":322,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["currentremotefeeds.filter((x",{"_index":382,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["currentsubstream",{"_index":604,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"miscellaneous/variables.html":{}}}],["cursor",{"_index":955,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["custom",{"_index":111,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["customer",{"_index":108,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["customize",{"_index":1603,"title":{},"body":{"index.html":{}}}],["data",{"_index":10,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"miscellaneous/variables.html":{}}}],["debounce",{"_index":344,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["debug",{"_index":1189,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["declarations",{"_index":665,"title":{},"body":{"modules/JanusModule.html":{},"index.html":{},"overview.html":{}}}],["default",{"_index":48,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["defaultvideoroomcomponent",{"_index":226,"title":{"components/DefaultVideoRoomComponent.html":{}},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":168,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["demo",{"_index":1580,"title":{},"body":{"index.html":{}}}],["demos",{"_index":1499,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":664,"title":{"dependencies.html":{}},"body":{"modules/JanusModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["depending",{"_index":283,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["deploy",{"_index":749,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["deploying",{"_index":712,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["deployment",{"_index":1571,"title":{},"body":{"index.html":{}}}],["description",{"_index":9,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["desired",{"_index":277,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"injectables/WebrtcService.html":{}}}],["destroy",{"_index":356,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["destroyed",{"_index":1261,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["detached",{"_index":1630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["details",{"_index":652,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["detection",{"_index":417,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["determines",{"_index":1136,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["determining",{"_index":1037,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["developer",{"_index":1512,"title":{},"body":{"index.html":{}}}],["developers",{"_index":1495,"title":{},"body":{"index.html":{}}}],["development",{"_index":1618,"title":{},"body":{"index.html":{}}}],["device",{"_index":70,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["device.kind",{"_index":546,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"injectables/WebrtcService.html":{}}}],["device.label",{"_index":552,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["deviceid",{"_index":936,"title":{},"body":{"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{}}}],["devices",{"_index":37,"title":{"interfaces/Devices.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["devices(devices",{"_index":197,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["devices.filter((device",{"_index":1166,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["devices.speakerdeviceid",{"_index":218,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["deviceselectorcomponent",{"_index":228,"title":{"components/DeviceSelectorComponent.html":{}},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["devicesform",{"_index":502,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["devicesinitialized",{"_index":905,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["deviceupdate",{"_index":504,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["dialog",{"_index":1657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["different",{"_index":98,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["directive",{"_index":222,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"index.html":{}}}],["directives",{"_index":236,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["directly",{"_index":741,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["directs",{"_index":88,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["display",{"_index":243,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["displayname",{"_index":605,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["displays",{"_index":244,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["div",{"_index":476,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["div.display",{"_index":1100,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["div.filter",{"_index":952,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["div.form",{"_index":554,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["div.interior",{"_index":971,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["div.loading",{"_index":990,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["div.maximize",{"_index":1105,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["div.overlay",{"_index":974,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["div.self",{"_index":972,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["div.speaker",{"_index":481,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["div.video",{"_index":463,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["docs",{"_index":656,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["document.createelement('video",{"_index":1348,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["document.getelementbyid([canvasid",{"_index":84,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["document.getelementbyid(canvasid",{"_index":1350,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["document.getelementbyid(elemid",{"_index":1421,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["document.getelementsbytagname('body')[0",{"_index":1338,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["documentation",{"_index":1498,"title":{},"body":{"index.html":{}}}],["documented",{"_index":1585,"title":{},"body":{"index.html":{}}}],["doesn't",{"_index":115,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["doing",{"_index":1400,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["dom",{"_index":139,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["don't",{"_index":631,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["donations",{"_index":1615,"title":{},"body":{"index.html":{}}}],["done",{"_index":281,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["dragon",{"_index":920,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["draw(canvascontext",{"_index":1283,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["drawing",{"_index":67,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["drawloopactive",{"_index":1179,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["dropping",{"_index":1674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dynamic",{"_index":1147,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["dynamically",{"_index":177,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/VideoBoxComponent.html":{},"index.html":{}}}],["e.g",{"_index":1145,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["each",{"_index":18,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{}}}],["easily",{"_index":703,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["easy",{"_index":1466,"title":{},"body":{"index.html":{}}}],["edit",{"_index":1479,"title":{},"body":{"index.html":{}}}],["element",{"_index":60,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["elementref",{"_index":192,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["elements",{"_index":246,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"index.html":{}}}],["embed",{"_index":704,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["emit",{"_index":256,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["emitremotefeeds(remotefeeds",{"_index":846,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["emits",{"_index":773,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{}}}],["emitted",{"_index":41,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["emitting",{"_index":279,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["enabled",{"_index":1470,"title":{},"body":{"index.html":{}}}],["encountered",{"_index":775,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["engineering",{"_index":1488,"title":{},"body":{"index.html":{}}}],["enlarged",{"_index":1526,"title":{},"body":{"index.html":{}}}],["ensures",{"_index":812,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["entire",{"_index":837,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["enum",{"_index":568,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["enumerations",{"_index":1461,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":576,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{}}}],["error('roominfo.state",{"_index":910,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["error(error",{"_index":1224,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["errorcode",{"_index":591,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["errors",{"_index":774,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["estate",{"_index":1529,"title":{},"body":{"index.html":{}}}],["etc",{"_index":1390,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["even",{"_index":82,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["event",{"_index":11,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["eventemitter",{"_index":35,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["events",{"_index":255,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{}}}],["example",{"_index":117,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["exhaustive",{"_index":1561,"title":{},"body":{"index.html":{}}}],["exist",{"_index":79,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["existing",{"_index":276,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["exists",{"_index":594,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{}}}],["expect",{"_index":1251,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["export",{"_index":68,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["exports",{"_index":668,"title":{},"body":{"modules/JanusModule.html":{},"overview.html":{}}}],["factory.each(i",{"_index":1679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["factory.sync.makefactory",{"_index":1678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fail",{"_index":86,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["fallback",{"_index":1524,"title":{},"body":{"index.html":{}}}],["false",{"_index":444,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["family",{"_index":978,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["fatal",{"_index":776,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{}}}],["features",{"_index":1465,"title":{},"body":{"index.html":{}}}],["feed",{"_index":19,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["feed.id",{"_index":1429,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["feed.state",{"_index":378,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{}}}],["feed.video_codec",{"_index":1428,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["feedid",{"_index":1438,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["feeds",{"_index":125,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["feel",{"_index":1612,"title":{},"body":{"index.html":{}}}],["ffffff",{"_index":989,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["field",{"_index":1493,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["fill",{"_index":967,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["find",{"_index":1405,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["findidealwidth",{"_index":435,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["fire",{"_index":1304,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["firefox",{"_index":1351,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["first",{"_index":779,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["fit",{"_index":441,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["fixing",{"_index":1597,"title":{},"body":{"index.html":{}}}],["flex",{"_index":467,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["following",{"_index":1519,"title":{},"body":{"index.html":{}}}],["font",{"_index":965,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["form",{"_index":487,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["format",{"_index":743,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["formbuilder",{"_index":506,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["found",{"_index":1594,"title":{},"body":{"index.html":{}}}],["framerate",{"_index":1299,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["fromevent",{"_index":338,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["fromevent(window",{"_index":367,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["frommodels",{"_index":1153,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.attach_success",{"_index":1223,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.consent_dialog",{"_index":1227,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.media_state",{"_index":1230,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.on_cleanup",{"_index":1255,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.on_local_stream",{"_index":1248,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.on_message",{"_index":1242,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.on_remote_cleanup",{"_index":1443,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.on_remote_feed_message",{"_index":1432,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.on_remote_remote_stream",{"_index":1442,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.on_remote_stream",{"_index":1253,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.remote_feed_slow_link",{"_index":1437,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.remote_feed_webrtc_state",{"_index":1434,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.webrtc_state",{"_index":1234,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["full",{"_index":65,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["fully",{"_index":1515,"title":{},"body":{"index.html":{}}}],["function",{"_index":1313,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["functional",{"_index":1516,"title":{},"body":{"index.html":{}}}],["functionality",{"_index":1607,"title":{},"body":{"index.html":{}}}],["functions",{"_index":1112,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["fund",{"_index":1620,"title":{},"body":{"index.html":{}}}],["future",{"_index":1404,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["fuzzy",{"_index":1403,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["gateway",{"_index":1518,"title":{},"body":{"index.html":{}}}],["getcontext",{"_index":1354,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["getdefaultdevices",{"_index":1115,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["getdevices",{"_index":537,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["getpublishing",{"_index":335,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["getting",{"_index":1463,"title":{"index.html":{}},"body":{}}],["getusermedia",{"_index":1116,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["getusermedia(audiodeviceid",{"_index":1129,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["give",{"_index":1605,"title":{},"body":{"index.html":{}}}],["given",{"_index":1064,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["gives",{"_index":1481,"title":{},"body":{"index.html":{}}}],["goal",{"_index":1328,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["good",{"_index":637,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["granted",{"_index":814,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["great",{"_index":1500,"title":{},"body":{"index.html":{}}}],["grid",{"_index":328,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["grow",{"_index":559,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["hack",{"_index":1306,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["handle",{"_index":825,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["handle.createanswer",{"_index":1271,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["handle.send({message",{"_index":1279,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["handled",{"_index":1535,"title":{},"body":{"index.html":{}}}],["handleremotejsep(jsep",{"_index":1267,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["handles",{"_index":1175,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["happen",{"_index":1252,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["happy",{"_index":1616,"title":{},"body":{"index.html":{}}}],["haven't",{"_index":927,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["height",{"_index":429,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["help",{"_index":1494,"title":{},"body":{"index.html":{}}}],["helper",{"_index":1035,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["helps",{"_index":1478,"title":{},"body":{"index.html":{}}}],["here",{"_index":746,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["high",{"_index":702,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["higher",{"_index":252,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["higher/lower",{"_index":1004,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["highly",{"_index":747,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["html",{"_index":78,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["http",{"_index":1520,"title":{},"body":{"index.html":{}}}],["http(s",{"_index":734,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["https://developer.mozilla.org/en",{"_index":654,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["https://janus.conf.meetecho.com/docs/videoroom.html|janus",{"_index":788,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["https://janus.conf.meetecho.com/janus",{"_index":736,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["httpurl",{"_index":719,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["i'm",{"_index":1399,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["i.fas",{"_index":1103,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["i.tostring",{"_index":1680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ice",{"_index":1546,"title":{},"body":{"index.html":{}}}],["iceserver",{"_index":650,"title":{"interfaces/IceServer.html":{}},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{}}}],["iceservers",{"_index":720,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["icestate(arg1",{"_index":1235,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["id",{"_index":71,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["ideal",{"_index":303,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["ids",{"_index":1128,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["iff",{"_index":286,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["ignore",{"_index":640,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["ignored",{"_index":120,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["img",{"_index":953,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["img.active",{"_index":947,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["img:hover",{"_index":950,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["implement",{"_index":112,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["implementation",{"_index":242,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["implemented",{"_index":618,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["implementing",{"_index":729,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["implements",{"_index":147,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"index.html":{}}}],["import",{"_index":34,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["important",{"_index":963,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["imports",{"_index":699,"title":{},"body":{"modules/JanusModule.html":{},"index.html":{}}}],["improvement",{"_index":1492,"title":{},"body":{"index.html":{}}}],["include",{"_index":1568,"title":{},"body":{"index.html":{}}}],["included",{"_index":1134,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["includes",{"_index":1471,"title":{},"body":{"index.html":{}}}],["incorporates",{"_index":1475,"title":{},"body":{"index.html":{}}}],["index",{"_index":22,"title":{"index.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["information",{"_index":613,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["init",{"_index":1184,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["init(iceservers",{"_index":1180,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["initial",{"_index":401,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["initialize",{"_index":797,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["initialized",{"_index":570,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{}}}],["initializing",{"_index":569,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["initialstate",{"_index":1631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectable",{"_index":1108,"title":{"injectables/WebrtcService.html":{}},"body":{"injectables/WebrtcService.html":{},"overview.html":{}}}],["injectables",{"_index":1109,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["input",{"_index":189,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"index.html":{}}}],["input/output",{"_index":731,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["inputs",{"_index":163,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["inputs/outputs",{"_index":1584,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1572,"title":{},"body":{"index.html":{}}}],["installed",{"_index":1574,"title":{},"body":{"index.html":{}}}],["instance",{"_index":208,"title":{},"body":{"components/AudioBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["instance._attachvideoroomhelper(subscriber",{"_index":1260,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance._createvideoelement(canvasid",{"_index":1395,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance._get_random_string",{"_index":1246,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.answerremotefeedjsep(jsep",{"_index":1433,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.createstreamandoffer",{"_index":1406,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.draw(canvascontext",{"_index":1315,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.drawloopactive",{"_index":1308,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.handle",{"_index":1221,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.handle.send({message",{"_index":1413,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.handleremotejsep(jsep",{"_index":1244,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.janus",{"_index":1258,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.janus.attach",{"_index":1424,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.localstream",{"_index":1394,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.opaqueid",{"_index":1425,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.publishwebrtcstate",{"_index":1233,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.remotehandles[feed.id",{"_index":1426,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.remotehandles[feed.id].send({message",{"_index":1431,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.remotehandles[feed.id].videocodec",{"_index":1427,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.streams[streamid",{"_index":1247,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.videoelement",{"_index":1396,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.webrtcservice.getusermedia(audiodeviceid",{"_index":1392,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instead",{"_index":92,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["integer",{"_index":105,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["interaction",{"_index":1567,"title":{},"body":{"index.html":{}}}],["interesting",{"_index":1476,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{},"overview.html":{}}}],["intermittent",{"_index":1398,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["internal",{"_index":199,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["internally",{"_index":1613,"title":{},"body":{"index.html":{}}}],["interval",{"_index":341,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["interval(100).pipe",{"_index":1385,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["interval(1000).pipe",{"_index":1060,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["interval(500",{"_index":397,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["intimate",{"_index":1513,"title":{},"body":{"index.html":{}}}],["ios",{"_index":1551,"title":{},"body":{"index.html":{}}}],["iphone",{"_index":1138,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["ismuted",{"_index":721,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["ismuted(muted",{"_index":789,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["isn't",{"_index":630,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["issupporteddevice",{"_index":1117,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["isvalidwidth",{"_index":442,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["isvalidwidth(ptr",{"_index":459,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["it's",{"_index":595,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["item",{"_index":1373,"title":{},"body":{"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["item.tostring(36",{"_index":1676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["items",{"_index":995,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"index.html":{}}}],["iterations",{"_index":455,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["itself",{"_index":1610,"title":{},"body":{"index.html":{}}}],["janus",{"_index":154,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["janus.attachmediastream(element",{"_index":1422,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["janus.attachmediastream(videoelement",{"_index":1360,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["janus.init",{"_index":1188,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["janus.iswebrtcsupported",{"_index":1192,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["janus.models",{"_index":39,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["janus.plugin.videoroom",{"_index":1218,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["januserror",{"_index":725,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["januserrors",{"_index":787,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["januserrors[roominfo.errorcode].message",{"_index":864,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["janusmodule",{"_index":662,"title":{"modules/JanusModule.html":{}},"body":{"modules/JanusModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["janusrole",{"_index":38,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"miscellaneous/enumerations.html":{}}}],["janusrole.publisher",{"_index":755,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["janusserverurl",{"_index":795,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["janusservice",{"_index":167,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["janusservice.attachmediastream",{"_index":291,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["janusstore",{"_index":716,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["janusvideoroomcomponent",{"_index":230,"title":{"components/JanusVideoroomComponent.html":{}},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["join",{"_index":1265,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["joined",{"_index":575,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"miscellaneous/enumerations.html":{}}}],["joining",{"_index":573,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["jsep",{"_index":1241,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["jsepbody",{"_index":1280,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["justify",{"_index":468,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["keep",{"_index":1001,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["keeping",{"_index":1327,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["key",{"_index":841,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["kick",{"_index":1076,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["know",{"_index":623,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{}}}],["knowing",{"_index":638,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["knowledge",{"_index":1510,"title":{},"body":{"index.html":{}}}],["label",{"_index":560,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["landscape",{"_index":1334,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["largest",{"_index":440,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["last",{"_index":643,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["leave",{"_index":1196,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["led",{"_index":1490,"title":{},"body":{"index.html":{}}}],["left",{"_index":976,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["legend",{"_index":221,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"overview.html":{}}}],["less",{"_index":1497,"title":{},"body":{"index.html":{}}}],["letter",{"_index":986,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["level",{"_index":253,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["li",{"_index":945,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["library",{"_index":1464,"title":{},"body":{"index.html":{}}}],["line",{"_index":985,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["link",{"_index":653,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["list",{"_index":123,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["listdevices",{"_index":1118,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["listener",{"_index":649,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["lives",{"_index":1591,"title":{},"body":{"index.html":{}}}],["load",{"_index":799,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["loaded",{"_index":928,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["loading",{"_index":1099,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["local",{"_index":47,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"miscellaneous/variables.html":{}}}],["localdevices",{"_index":201,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["locally",{"_index":126,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["localstream",{"_index":1177,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["localstreamid",{"_index":592,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["look",{"_index":1611,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1300,"title":{},"body":{"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["lot",{"_index":819,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["love",{"_index":824,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["low",{"_index":1418,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["machine",{"_index":567,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["macos",{"_index":1550,"title":{},"body":{"index.html":{}}}],["majority",{"_index":1487,"title":{},"body":{"index.html":{}}}],["make",{"_index":1191,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["makes",{"_index":635,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["making",{"_index":1598,"title":{},"body":{"index.html":{}}}],["manually",{"_index":83,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["many",{"_index":706,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["margin",{"_index":944,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["match",{"_index":763,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["matches",{"_index":73,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["matching",{"_index":133,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["materialized",{"_index":289,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["math.ceil(numvideos",{"_index":449,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["math.ceil(testwidth",{"_index":451,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["math.floor((maxfits",{"_index":457,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["math.floor(viewportwidth",{"_index":447,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["math.min(numvideos",{"_index":446,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["math.random().tostring(36).substring(2",{"_index":1214,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["maxfits",{"_index":454,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["maximize",{"_index":1012,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["maximum",{"_index":1527,"title":{},"body":{"index.html":{}}}],["mdn",{"_index":660,"title":{},"body":{"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{}}}],["meaningful",{"_index":619,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["media",{"_index":713,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["media_state",{"_index":1633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mediastate(medium",{"_index":1229,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["mediastream",{"_index":1121,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["medium",{"_index":1231,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["message",{"_index":587,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":150,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["methods",{"_index":161,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["microphone",{"_index":72,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{}}}],["minimal",{"_index":709,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["minor",{"_index":919,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["minover",{"_index":458,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["miscellaneous",{"_index":1460,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mismatch",{"_index":1489,"title":{},"body":{"index.html":{}}}],["mode",{"_index":262,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["models",{"_index":349,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["models/janus",{"_index":1154,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["models/janus.models",{"_index":193,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["models/video",{"_index":784,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["module",{"_index":661,"title":{"modules/JanusModule.html":{}},"body":{"modules/JanusModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":663,"title":{"modules.html":{}},"body":{"modules/JanusModule.html":{},"modules.html":{}}}],["moment",{"_index":566,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"dependencies.html":{},"index.html":{}}}],["moment.moment",{"_index":612,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["momentinstalling",{"_index":1576,"title":{},"body":{"index.html":{}}}],["monitor",{"_index":1052,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["monitoring",{"_index":1036,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["monitorvideoquality",{"_index":1010,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["monitorvideoquality(slowlink",{"_index":1022,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["more",{"_index":651,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["mostly",{"_index":249,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["msg",{"_index":1243,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["multicast",{"_index":102,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["multiple",{"_index":1532,"title":{},"body":{"index.html":{}}}],["mute",{"_index":1319,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["mute(event",{"_index":1320,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["muted",{"_index":593,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["muting",{"_index":1556,"title":{},"body":{"index.html":{}}}],["name",{"_index":171,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["names",{"_index":1537,"title":{},"body":{"index.html":{}}}],["navigator.mediadevices.enumeratedevices",{"_index":1142,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["navigator.mediadevices.getusermedia(constraints",{"_index":1163,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["navigator.mediadevics.enumeratedevices",{"_index":75,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["necessary",{"_index":1072,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["need",{"_index":113,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["needs",{"_index":1075,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["negotiate",{"_index":12,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["network",{"_index":1544,"title":{},"body":{"index.html":{}}}],["networks",{"_index":1599,"title":{},"body":{"index.html":{}}}],["never",{"_index":1436,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["new",{"_index":327,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newdevices",{"_index":918,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["newdevices.audiodeviceid",{"_index":932,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["newdevices.videodeviceid",{"_index":930,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["newsubstream",{"_index":1090,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["ngafterviewinit",{"_index":211,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["ngmodule",{"_index":676,"title":{},"body":{"modules/JanusModule.html":{},"index.html":{}}}],["ngonchanges(changes",{"_index":835,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["ngondestroy",{"_index":369,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["ngoninit",{"_index":205,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["ngrx/component",{"_index":1456,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["noise",{"_index":625,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["non",{"_index":1560,"title":{},"body":{"index.html":{}}}],["none",{"_index":1190,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["normal",{"_index":984,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["note",{"_index":614,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["notes",{"_index":642,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["nothing",{"_index":745,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["null",{"_index":855,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":107,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["numcolumns",{"_index":445,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["numeric",{"_index":765,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["numremotevideos",{"_index":313,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["numrows",{"_index":448,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["numvideos",{"_index":407,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["numvideotracks",{"_index":600,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["nvid",{"_index":155,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["object",{"_index":32,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["object.keys(remotefeeds).map(id",{"_index":857,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["objects",{"_index":332,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["observable",{"_index":339,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["of(true",{"_index":1186,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["older",{"_index":1140,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["on_cleanup",{"_index":1634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_data",{"_index":1635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_data_open",{"_index":1636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_local_stream",{"_index":1637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_message",{"_index":1638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_remote_cleanup",{"_index":1639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_remote_feed_message",{"_index":1640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_remote_local_stream",{"_index":1641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_remote_remote_stream",{"_index":1642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_remote_stream",{"_index":1643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onattachremotefeed(event",{"_index":883,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["once",{"_index":574,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["onchanges",{"_index":715,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["oncleanup",{"_index":1254,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["ondestroy",{"_index":259,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["ondevicechange",{"_index":162,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["ondevicechange(devices",{"_index":182,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["ondeviceschange",{"_index":926,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["ondeviceschange(previousdevices",{"_index":917,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["one",{"_index":735,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["oninit",{"_index":148,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["onlocalstream(stream",{"_index":1245,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["onmaximize",{"_index":265,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["onmaximize(remotefeed",{"_index":314,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["onmessage(msg",{"_index":1240,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["onplay",{"_index":1069,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["onpublishownfeed",{"_index":266,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["onpublishownfeed(event",{"_index":319,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{}}}],["onremotefeedschange",{"_index":267,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["onremotefeedschange(previousremotefeeds",{"_index":321,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["onremotestream(stream",{"_index":1250,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["onrequestsubstream",{"_index":268,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["onrequestsubstream(event",{"_index":325,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{}}}],["opaqueid",{"_index":1171,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["open",{"_index":1659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["opensans",{"_index":979,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["operations",{"_index":1564,"title":{},"body":{"index.html":{}}}],["option",{"_index":491,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["optional",{"_index":172,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["options",{"_index":489,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{}}}],["optionsopen",{"_index":1042,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["order",{"_index":257,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["orientation",{"_index":1531,"title":{},"body":{"index.html":{}}}],["oscillator",{"_index":1302,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["otherroomid",{"_index":588,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["otherwise",{"_index":818,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["out",{"_index":674,"title":{},"body":{"modules/JanusModule.html":{},"overview.html":{}}}],["output",{"_index":175,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["outputs",{"_index":269,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["outside",{"_index":415,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["overlays",{"_index":1604,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1623,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":996,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["package",{"_index":1451,"title":{"dependencies.html":{}},"body":{"index.html":{}}}],["padding",{"_index":556,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["page",{"_index":1588,"title":{},"body":{"index.html":{}}}],["pain",{"_index":1672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["param",{"_index":1159,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["parameters",{"_index":170,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["part",{"_index":1477,"title":{},"body":{"index.html":{}}}],["parts",{"_index":1555,"title":{},"body":{"index.html":{}}}],["passed",{"_index":585,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["payload",{"_index":1228,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["peer",{"_index":1454,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["performance",{"_index":1003,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["periodic",{"_index":1071,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["permissions",{"_index":815,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["phones",{"_index":1146,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["pick",{"_index":419,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"index.html":{}}}],["picking",{"_index":490,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["pin",{"_index":722,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["pin_required",{"_index":754,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["pins",{"_index":1525,"title":{},"body":{"index.html":{}}}],["pipe",{"_index":396,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["platform",{"_index":1144,"title":{},"body":{"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["platforms",{"_index":1547,"title":{},"body":{"index.html":{}}}],["play",{"_index":145,"title":{},"body":{"components/AudioBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["playing",{"_index":144,"title":{},"body":{"components/AudioBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["plugin",{"_index":1173,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["pluginhandle",{"_index":1222,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["plus",{"_index":1025,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["pointer",{"_index":956,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["portrait",{"_index":1332,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["position",{"_index":465,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["possible",{"_index":596,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["practical",{"_index":617,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["prefer",{"_index":1523,"title":{},"body":{"index.html":{}}}],["prevents",{"_index":960,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["previousdevices",{"_index":929,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["previousdevices.audiodeviceid",{"_index":933,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["previousdevices.videodeviceid",{"_index":931,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["previously",{"_index":1125,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["previousremotefeeds",{"_index":324,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["private",{"_index":200,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["private_id",{"_index":582,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{}}}],["privateid",{"_index":584,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["privateremotefeeds",{"_index":357,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["probably",{"_index":828,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["product",{"_index":284,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"index.html":{}}}],["promise",{"_index":538,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{}}}],["properly",{"_index":1468,"title":{},"body":{"index.html":{}}}],["properties",{"_index":23,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["provided",{"_index":110,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["providedin",{"_index":1156,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["providers",{"_index":667,"title":{},"body":{"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"overview.html":{}}}],["ptr",{"_index":456,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["ptype",{"_index":1266,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["public",{"_index":202,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["publish",{"_index":118,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["published",{"_index":61,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["publisher",{"_index":100,"title":{"interfaces/Publisher.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["publisher's",{"_index":130,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{}}}],["publishers",{"_index":647,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["publishing",{"_index":46,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{}}}],["publishownfeed",{"_index":40,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["publishownfeedevent",{"_index":69,"title":{"interfaces/PublishOwnFeedEvent.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["publishrequested",{"_index":580,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["publishstate",{"_index":578,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["publishstate.error",{"_index":863,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["publishstate.publishing",{"_index":861,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["publishstate.publishrequested",{"_index":941,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["publishstate.start",{"_index":1666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["publishwebrtcstate",{"_index":1178,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["purposes",{"_index":1044,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["put",{"_index":1558,"title":{},"body":{"index.html":{}}}],["quality",{"_index":1031,"title":{},"body":{"components/VideoBoxComponent.html":{},"index.html":{}}}],["querying",{"_index":1113,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["querylist",{"_index":337,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["race",{"_index":821,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{}}}],["radius",{"_index":957,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["raise",{"_index":896,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["randomstring",{"_index":1039,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["randomstring(16",{"_index":1172,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["ratios",{"_index":1534,"title":{},"body":{"index.html":{}}}],["reactiveformsmodule",{"_index":679,"title":{},"body":{"modules/JanusModule.html":{}}}],["read",{"_index":1539,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":796,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["ready",{"_index":579,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["readyremotefeeds",{"_index":263,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["real",{"_index":1528,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["receive",{"_index":14,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["received",{"_index":603,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{}}}],["recent",{"_index":610,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["recommended",{"_index":748,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["recvonly",{"_index":1275,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["refer",{"_index":711,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["reference",{"_index":241,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["refresh",{"_index":836,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["register",{"_index":1264,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["register(name",{"_index":1263,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["registered",{"_index":939,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["relative",{"_index":466,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["release",{"_index":1614,"title":{},"body":{"index.html":{}}}],["reliability",{"_index":751,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["remote",{"_index":15,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["remote_feed_slow_link",{"_index":1645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remote_feed_webrtc_state",{"_index":1646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remotefeed",{"_index":25,"title":{"interfaces/RemoteFeed.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["remotefeed.displayname",{"_index":1098,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["remotefeed.id",{"_index":385,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["remotefeedfactory",{"_index":1647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remotefeeds",{"_index":119,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"miscellaneous/variables.html":{}}}],["remotefeeds(remotefeeds",{"_index":351,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["remotefeeds.filter((feed",{"_index":847,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["remotefeeds[id",{"_index":858,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["remotefeedsarray",{"_index":856,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["remotefeedstate",{"_index":347,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["remotefeedstate.initialized",{"_index":30,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"miscellaneous/variables.html":{}}}],["remotefeedstate.ready",{"_index":288,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{}}}],["remotehandles",{"_index":1174,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["rendering",{"_index":146,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["renders",{"_index":889,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["repo",{"_index":1590,"title":{},"body":{"index.html":{}}}],["republish",{"_index":1383,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["request",{"_index":97,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["request_substream",{"_index":1649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestanimationframe",{"_index":1303,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["requestanimationframe(step",{"_index":1317,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["requested",{"_index":174,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"miscellaneous/enumerations.html":{}}}],["requestedsubstream",{"_index":601,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["requesting",{"_index":29,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["requestsubstream",{"_index":95,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["requestsubstream(feed",{"_index":1449,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["requestsubstreamevent",{"_index":103,"title":{"interfaces/RequestSubstreamEvent.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["require",{"_index":116,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["required",{"_index":762,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["requires",{"_index":1337,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["requiring",{"_index":1511,"title":{},"body":{"index.html":{}}}],["reset",{"_index":673,"title":{},"body":{"modules/JanusModule.html":{},"overview.html":{}}}],["resetkeys",{"_index":840,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["resize",{"_index":365,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"index.html":{}}}],["resized",{"_index":311,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["resizeobservable",{"_index":355,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["resizing",{"_index":961,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["resources",{"_index":1124,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["response",{"_index":1282,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["responsibility",{"_index":66,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["result",{"_index":132,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":134,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["ret",{"_index":1675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["retry",{"_index":1401,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["retrycount",{"_index":1389,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["return",{"_index":85,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":74,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["returns",{"_index":185,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["rgba(0,0,0,.5",{"_index":970,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["rgba(0,0,0,0",{"_index":959,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["rgba(255",{"_index":992,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["rgba(53,53,53,.7",{"_index":977,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["right",{"_index":1107,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["role",{"_index":122,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{}}}],["roles",{"_index":644,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["room",{"_index":7,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["room'},{'name",{"_index":227,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["room.component",{"_index":688,"title":{},"body":{"modules/JanusModule.html":{}}}],["room.component.html",{"_index":261,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.scss",{"_index":260,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts",{"_index":240,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:111",{"_index":330,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:114",{"_index":272,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:134",{"_index":336,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:139",{"_index":315,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:149",{"_index":326,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:154",{"_index":320,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:159",{"_index":323,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:216",{"_index":301,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:47",{"_index":294,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:50",{"_index":292,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:53",{"_index":274,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:63",{"_index":275,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:64",{"_index":334,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:70",{"_index":331,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:74",{"_index":299,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:78",{"_index":298,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:82",{"_index":295,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.id",{"_index":1278,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["room.privateid",{"_index":1430,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["room/default",{"_index":239,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"modules/JanusModule.html":{}}}],["room/user",{"_index":800,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["roomid",{"_index":581,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["roominfo",{"_index":24,"title":{"interfaces/RoomInfo.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["roominfo.errorcode",{"_index":866,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["roominfo.muted",{"_index":859,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["roominfo.publishstate",{"_index":860,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["roominfo.state",{"_index":868,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["roominfofactory",{"_index":1651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roominfostate",{"_index":348,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"miscellaneous/enumerations.html":{}}}],["roominfostate.attach_failed",{"_index":876,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["roominfostate.attached",{"_index":871,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["roominfostate.initialized",{"_index":869,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["roominfostate.joined",{"_index":897,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["roominfostate.start",{"_index":1665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rooms",{"_index":1565,"title":{},"body":{"index.html":{}}}],["root",{"_index":1157,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["rough",{"_index":1606,"title":{},"body":{"index.html":{}}}],["row",{"_index":555,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["rtcpeerconnection",{"_index":742,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["run",{"_index":1051,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["rxjs",{"_index":343,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["rxjs/operators",{"_index":346,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["safari",{"_index":1336,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["same",{"_index":307,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{}}}],["sample",{"_index":1503,"title":{},"body":{"index.html":{}}}],["save",{"_index":1439,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["scalex",{"_index":969,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["scratch",{"_index":839,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["screen",{"_index":310,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"index.html":{}}}],["search",{"_index":439,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["second",{"_index":1078,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["see",{"_index":641,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["see/hear",{"_index":646,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["select",{"_index":562,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selected",{"_index":511,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector",{"_index":153,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"index.html":{}}}],["selector'},{'name",{"_index":229,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["selector.component",{"_index":684,"title":{},"body":{"modules/JanusModule.html":{}}}],["selector.component.html",{"_index":498,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.scss",{"_index":497,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts",{"_index":486,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts:36",{"_index":509,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts:42",{"_index":512,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts:44",{"_index":516,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts:45",{"_index":513,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts:46",{"_index":515,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts:47",{"_index":514,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts:48",{"_index":517,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts:49",{"_index":508,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector/device",{"_index":485,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{}}}],["self",{"_index":233,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["selfvideobottom",{"_index":364,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["selfvideocomponent",{"_index":232,"title":{"components/SelfVideoComponent.html":{}},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["selfvideoheight",{"_index":386,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["selfvideoright",{"_index":363,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["selfvideowidth",{"_index":390,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["send",{"_index":1540,"title":{},"body":{"index.html":{}}}],["separate",{"_index":914,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["server",{"_index":714,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["server(s",{"_index":750,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["server.models",{"_index":1155,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["server.models.ts",{"_index":1627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["servers",{"_index":740,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["service",{"_index":89,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["services/janus.service",{"_index":194,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["session",{"_index":838,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["set",{"_index":57,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["setdevices(devices",{"_index":187,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["setismuted(muted",{"_index":778,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["setmute(mute",{"_index":1448,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["setremotefeeds(remotefeeds",{"_index":333,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["setspeaker(devices",{"_index":214,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["settimeout",{"_index":877,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["settimeout(step",{"_index":1316,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["setting",{"_index":817,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["setup",{"_index":90,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["setupjanusroom",{"_index":849,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["setupsubscriptions",{"_index":393,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["shared",{"_index":1040,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["sharereplay",{"_index":781,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["sharereplay(1",{"_index":807,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["show",{"_index":488,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"index.html":{}}}],["showdefaultroom",{"_index":794,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["shown",{"_index":492,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["sides",{"_index":1331,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["signalling",{"_index":248,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"index.html":{}}}],["simple",{"_index":1387,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["simulcast",{"_index":1007,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["simulcastmaxbitrates",{"_index":1415,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["site",{"_index":1587,"title":{},"body":{"index.html":{}}}],["situation",{"_index":826,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["size",{"_index":308,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"index.html":{}}}],["skipvideocapture",{"_index":56,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["slow",{"_index":1660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["slow_link",{"_index":1652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["slowlink",{"_index":611,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"miscellaneous/variables.html":{}}}],["slowlink(msg",{"_index":1239,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["small",{"_index":254,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"index.html":{}}}],["smells",{"_index":421,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["smoothly",{"_index":1536,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["solid",{"_index":479,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["solution",{"_index":426,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["someone",{"_index":1602,"title":{},"body":{"index.html":{}}}],["sometimes",{"_index":1074,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["sound",{"_index":1065,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["spacing",{"_index":987,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["span.flex",{"_index":558,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["span.separator",{"_index":1101,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["speaker",{"_index":176,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["speaker/grid",{"_index":1019,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["speakerdevice",{"_index":527,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["speakerdeviceid",{"_index":533,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["speakerdevices",{"_index":1168,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["speakerheight",{"_index":362,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["speakers",{"_index":553,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["speakerwidth",{"_index":361,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["specifications",{"_index":565,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["specified",{"_index":628,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["specify",{"_index":49,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["specifying",{"_index":1517,"title":{},"body":{"index.html":{}}}],["spend",{"_index":1496,"title":{},"body":{"index.html":{}}}],["spent",{"_index":1485,"title":{},"body":{"index.html":{}}}],["spirit",{"_index":1552,"title":{},"body":{"index.html":{}}}],["src/.../index.ts",{"_index":1628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../janus",{"_index":1626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../janus.actions.ts",{"_index":1650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../janus.factories.ts",{"_index":1648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../janus.models.ts",{"_index":1462,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../janus.reducers.ts",{"_index":1632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../random.ts",{"_index":1644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/components/audio",{"_index":141,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["src/lib/components/default",{"_index":238,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["src/lib/components/index.ts",{"_index":1661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/components/self",{"_index":885,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["src/lib/components/video",{"_index":999,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["src/lib/containers/device",{"_index":484,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["src/lib/containers/index.ts",{"_index":1662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/containers/janus",{"_index":700,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["src/lib/factories/janus.factories.ts",{"_index":1677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/janus.module.ts",{"_index":675,"title":{},"body":{"modules/JanusModule.html":{}}}],["src/lib/models/janus",{"_index":1655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/models/janus.models.ts",{"_index":564,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["src/lib/models/video",{"_index":6,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["src/lib/services/janus.service.ts",{"_index":1110,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["src/lib/services/janus.service.ts:20",{"_index":1119,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["src/lib/services/janus.service.ts:31",{"_index":1130,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["src/lib/services/janus.service.ts:42",{"_index":1141,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["src/lib/services/janus.service.ts:49",{"_index":1127,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["src/lib/services/janus.service.ts:66",{"_index":1143,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["src/lib/services/janus.service.ts:76",{"_index":1135,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["src/lib/services/janus.service.ts:83",{"_index":1122,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["src/lib/shared/random.ts",{"_index":1667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/store/actions/janus.actions.ts",{"_index":1682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/store/reducers/janus.reducers.ts",{"_index":1663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["start",{"_index":45,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{}}}],["start/stop",{"_index":636,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["startdrawingloop(canvaselement",{"_index":1298,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["started",{"_index":708,"title":{"index.html":{}},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["startwith",{"_index":780,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["state",{"_index":31,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["status",{"_index":577,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["step",{"_index":1314,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["stepmilliseconds",{"_index":1311,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["still",{"_index":648,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{}}}],["storage",{"_index":1570,"title":{},"body":{"index.html":{}}}],["store",{"_index":1457,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["store/janus.store",{"_index":786,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["stream",{"_index":16,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["stream.getvideotracks",{"_index":1440,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["stream.getvideotracks().length",{"_index":1441,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["stream_id",{"_index":1249,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["streamed",{"_index":278,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["streamid",{"_index":598,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["streaming",{"_index":297,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["streams",{"_index":1006,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["stretch",{"_index":983,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["string",{"_index":76,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["stun",{"_index":744,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["stun/turn",{"_index":739,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["stun:stun2.l.google.com:19302",{"_index":737,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["style",{"_index":496,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["styles",{"_index":138,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["styles.scss",{"_index":891,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["styles/video",{"_index":901,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["styleurls",{"_index":157,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"index.html":{}}}],["subclassed",{"_index":495,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["subject",{"_index":342,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["subscribe",{"_index":128,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["subscribe((event",{"_index":399,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["subscribe(({roominfo",{"_index":853,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["subscriber",{"_index":1187,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["subscriber.complete",{"_index":1195,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["subscriber.error('webrtc",{"_index":1193,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["subscriber.error(error",{"_index":1225,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["subscriber.next",{"_index":1194,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["subscriber.next(true",{"_index":1414,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["subscribers",{"_index":758,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["subscription",{"_index":340,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["substream",{"_index":104,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["substreamid",{"_index":106,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["substreams",{"_index":99,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["success",{"_index":1259,"title":{},"body":{"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["success(jsep",{"_index":1411,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["success(jsepbody",{"_index":1276,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["success(pluginhandle",{"_index":1220,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["support",{"_index":1617,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supported",{"_index":1137,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["supports",{"_index":493,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["supportsspeakerselection",{"_index":503,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"injectables/WebrtcService.html":{}}}],["sure",{"_index":423,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["svg",{"_index":1621,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":317,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["switches",{"_index":1307,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["switching",{"_index":1018,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["switchmap",{"_index":782,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["switchsubstream",{"_index":1011,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["switchsubstream(substreamid",{"_index":1032,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["system",{"_index":44,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{}}}],["tabs",{"_index":1305,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["take",{"_index":64,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["takes",{"_index":1077,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["takeuntil",{"_index":345,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["takeuntil(this.destroy",{"_index":398,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["takewhile",{"_index":1151,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["talking",{"_index":621,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["talking/not",{"_index":620,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["tap",{"_index":1150,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["task",{"_index":1053,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["tell",{"_index":43,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["template",{"_index":137,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"index.html":{}}}],["templateurl",{"_index":159,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["tested",{"_index":1548,"title":{},"body":{"index.html":{}}}],["testheight",{"_index":450,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["testing",{"_index":915,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["testwidth",{"_index":443,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["that's",{"_index":827,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["themselves",{"_index":1508,"title":{},"body":{"index.html":{}}}],["then((videostream",{"_index":1393,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["there's",{"_index":424,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{},"index.html":{}}}],["therefore",{"_index":923,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["thing",{"_index":1553,"title":{},"body":{"index.html":{}}}],["this._attachmediastream",{"_index":1049,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this._mutevideo(videoelement",{"_index":1366,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this._publishownfeed(audiodeviceid",{"_index":912,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["this._publishownfeed(newdevices.audiodeviceid",{"_index":942,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["this._setmuted(muted",{"_index":791,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this._setmuted(this.muted",{"_index":862,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this._sizecanvaselement(videosettings.width",{"_index":1367,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this._videoelementsafarihacks(videoelement",{"_index":1359,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.afterviewinitran",{"_index":907,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["this.attachremotefeed.emit",{"_index":379,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.audio",{"_index":215,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["this.audio.nativeelement",{"_index":216,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["this.audio.nativeelement.setsinkid",{"_index":217,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["this.audio.nativeelement.setsinkid(devices.speakerdeviceid",{"_index":219,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["this.audioid",{"_index":209,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["this.availableaudiodevices",{"_index":544,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.availablespeakerdevices",{"_index":550,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.availablevideodevices",{"_index":548,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.builder.group",{"_index":521,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.changedetector.detectchanges",{"_index":427,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{}}}],["this.cleanuplocalstream",{"_index":1199,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.computespeakermodedimensions",{"_index":414,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.computevideowidth(0",{"_index":403,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.computevideowidth(currentremotefeeds.length",{"_index":377,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.computevideowidth(this.remotefeeds.length",{"_index":400,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.createoffer(subscriber",{"_index":1391,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.createstreamandoffer(subscriber",{"_index":1386,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.currentdevices",{"_index":902,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["this.destroy$.complete",{"_index":371,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["this.destroy$.next",{"_index":370,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["this.devices",{"_index":830,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{}}}],["this.devices.audiodeviceid",{"_index":523,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{}}}],["this.devices.speakerdeviceid",{"_index":528,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.devices.videodeviceid",{"_index":526,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{}}}],["this.devicesform",{"_index":520,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.devicesform.get('audiodevice').value",{"_index":531,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.devicesform.get('speakerdevice').value",{"_index":534,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.devicesform.get('videodevice').value",{"_index":532,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.devicesform.valuechanges.pipe",{"_index":530,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.deviceupdate.emit(devices",{"_index":535,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.drawloopactive",{"_index":1209,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.emitremotefeeds(remotefeedsarray",{"_index":867,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.findidealwidth",{"_index":409,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.getdevices",{"_index":529,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.handle",{"_index":1197,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.handle.createoffer",{"_index":1408,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.handle.handleremotejsep({jsep",{"_index":1268,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.handle.isaudiomuted",{"_index":1445,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.handle.muteaudio",{"_index":1447,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.handle.send",{"_index":1379,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.handle.send({message",{"_index":1198,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.handle.unmuteaudio",{"_index":1446,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.httpurl",{"_index":803,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.iceservers",{"_index":1181,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.initialized",{"_index":1182,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.janus",{"_index":1202,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.janus.attach",{"_index":1217,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.janus.destroy({unload",{"_index":1200,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.januserror.emit({code",{"_index":865,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusserverurl",{"_index":801,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusservice.attachmediastream(this.audioid",{"_index":212,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["this.janusservice.attachmediastream(this.videoid",{"_index":1063,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.janusstore",{"_index":811,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.attachremotefeed",{"_index":884,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.attachvideoroom(this.janusserverurl",{"_index":870,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.initialize(this.iceservers",{"_index":851,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.publishownfeed(event",{"_index":881,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.register",{"_index":872,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.remotefeeds$.pipe(sharereplay(1",{"_index":805,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.requestsubstream(event",{"_index":882,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.reset(this.iceservers",{"_index":843,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.roominfo$.pipe",{"_index":806,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.setmute(muted",{"_index":845,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.state$.pipe",{"_index":852,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.listdevices",{"_index":1164,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.localdevices",{"_index":196,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["this.localstream",{"_index":1207,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.maximize.emit(this.remotefeed",{"_index":1097,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.mode",{"_index":373,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["this.monitorvideoquality(false",{"_index":1061,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.monitorvideoquality(slowlink",{"_index":1057,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.muted",{"_index":790,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.ondevicechange(devices",{"_index":198,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["this.ondeviceschange(this.currentdevices",{"_index":903,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["this.onremotefeedschange(this.privateremotefeeds",{"_index":352,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.opaqueid",{"_index":1219,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.pin",{"_index":854,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.privateremotefeeds",{"_index":350,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.publishers.emit(publishers",{"_index":848,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.publishing",{"_index":408,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.publishownfeed.emit",{"_index":916,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["this.publishownfeed.emit(event",{"_index":376,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.publishwebrtcstate",{"_index":1208,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.readyremotefeeds",{"_index":381,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.remotefeed",{"_index":1073,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.remotefeed.currentsubstream",{"_index":1086,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.remotefeed.id",{"_index":210,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["this.remotefeed.numvideotracks",{"_index":1087,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.remotefeed.requestedsubstream",{"_index":1094,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.remotefeed.streamid",{"_index":213,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["this.remotefeeds",{"_index":804,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.remotehandles",{"_index":1205,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.remotehandles[feed.id",{"_index":1270,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.remotehandles[feed.id].send({message",{"_index":1450,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.requestsubstream.emit(event",{"_index":375,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.requestsubstream.emit({feed",{"_index":1096,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.resizeobservable",{"_index":366,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.role",{"_index":372,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.roomid",{"_index":875,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.roominfo",{"_index":380,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{}}}],["this.roominfo.publishstate",{"_index":940,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["this.roominfo.state",{"_index":908,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["this.selfvideobottom",{"_index":432,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.selfvideoright",{"_index":434,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.server",{"_index":1204,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.setspeaker(devices",{"_index":220,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["this.setspeaker(this.devices",{"_index":1050,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.setupjanusroom",{"_index":834,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.setupsubscriptions",{"_index":368,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["this.speaker",{"_index":374,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.speakerheight",{"_index":388,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.speakerwidth",{"_index":392,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.startdrawingloop(canvaselement",{"_index":1375,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.streams",{"_index":1203,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.streams[streamid",{"_index":1423,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.supportsspeakerselection",{"_index":542,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.switchsubstream(currentsubstream",{"_index":1089,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.switchsubstream(newsubstream",{"_index":1093,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.unpublishownfeed",{"_index":1384,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.userid",{"_index":874,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.username",{"_index":873,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.video",{"_index":1058,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.video.nativeelement",{"_index":1066,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.video.nativeelement.pause",{"_index":1059,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.video.nativeelement.play",{"_index":1085,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.video.nativeelement.setsinkid",{"_index":1067,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.video.nativeelement.setsinkid(devices.speakerdeviceid",{"_index":1068,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.videoavailable",{"_index":1070,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.videoelement",{"_index":1206,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.videoelement.remove",{"_index":1211,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.videoheight",{"_index":387,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.videoid",{"_index":1048,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.videoqualityhelper",{"_index":1046,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.videoqualityhelper.ping(currentsubstream",{"_index":1091,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.videoqualityhelper.streamend(currentsubstream",{"_index":1092,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.videoqualityhelper.streamerror(currentsubstream",{"_index":1088,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.videowidth",{"_index":391,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.viewport",{"_index":404,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.viewport.nativeelement.offsetheight",{"_index":411,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.viewport.nativeelement.offsetwidth",{"_index":410,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.webrtc.clearmediastream(stream",{"_index":833,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.webrtc.getdefaultdevices",{"_index":831,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.webrtc.getusermedia",{"_index":832,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.webrtc.listdevices",{"_index":541,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.webrtc.supportsspeakerselection",{"_index":543,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.webrtcservice.clearmediastream(this.localstream",{"_index":1212,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.wsurl",{"_index":802,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["those",{"_index":54,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["through",{"_index":707,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["throw",{"_index":909,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["tightly",{"_index":1592,"title":{},"body":{"index.html":{}}}],["time",{"_index":627,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["times",{"_index":1608,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":609,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["tiny",{"_index":934,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["tireless",{"_index":1596,"title":{},"body":{"index.html":{}}}],["to/from",{"_index":318,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["toggle",{"_index":1683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["toggle_mute_success",{"_index":1653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["togglemute",{"_index":1444,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["top",{"_index":975,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["touchpoints",{"_index":1601,"title":{},"body":{"index.html":{}}}],["track",{"_index":1002,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["trackbyfeedid(index",{"_index":384,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["tracks",{"_index":599,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["transform",{"_index":968,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["transmit",{"_index":93,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["tree",{"_index":140,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["trickle",{"_index":1272,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["true",{"_index":58,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["ts",{"_index":808,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["tslib",{"_index":1452,"title":{},"body":{"dependencies.html":{}}}],["twice",{"_index":1185,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["type",{"_index":26,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["ui",{"_index":1566,"title":{},"body":{"index.html":{}}}],["uint8array(bytes",{"_index":1670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ul.filter",{"_index":943,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["unable",{"_index":879,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["understand",{"_index":1509,"title":{},"body":{"index.html":{}}}],["understanding",{"_index":1501,"title":{},"body":{"index.html":{}}}],["unique",{"_index":206,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["unless",{"_index":922,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["unpublish",{"_index":1378,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["unpublishing",{"_index":1382,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["unpublishownfeed",{"_index":1377,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["until",{"_index":1381,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["up",{"_index":420,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["upon",{"_index":1530,"title":{},"body":{"index.html":{}}}],["url",{"_index":733,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["urls",{"_index":657,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{}}}],["us/docs/web/api/rtciceserver|mdn",{"_index":655,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["use",{"_index":80,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["used",{"_index":96,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["user",{"_index":20,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["user's",{"_index":293,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{}}}],["userid",{"_index":723,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["username",{"_index":658,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["users",{"_index":757,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["using",{"_index":101,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["ux",{"_index":1559,"title":{},"body":{"index.html":{}}}],["valid",{"_index":453,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["validators",{"_index":518,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["validators.required",{"_index":524,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["value",{"_index":329,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":223,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["variables",{"_index":798,"title":{"miscellaneous/variables.html":{}},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":1111,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["vast",{"_index":1486,"title":{},"body":{"index.html":{}}}],["very",{"_index":616,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["video",{"_index":91,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["video'},{'name",{"_index":234,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["video,canvas",{"_index":964,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["video.component",{"_index":691,"title":{},"body":{"modules/JanusModule.html":{}}}],["video.component.html",{"_index":892,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video.component.scss",{"_index":900,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video.component.scss,../../styles/video",{"_index":890,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video.component.ts",{"_index":886,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video.component.ts:37",{"_index":895,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video.component.ts:41",{"_index":894,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video.component.ts:42",{"_index":899,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video.component.ts:49",{"_index":898,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video.component.ts:53",{"_index":893,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video/audio",{"_index":53,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["video/mic",{"_index":1081,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["video/self",{"_index":690,"title":{},"body":{"modules/JanusModule.html":{},"components/SelfVideoComponent.html":{}}}],["video_codec",{"_index":607,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["videoavailable",{"_index":1043,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["videoboxcomponent",{"_index":235,"title":{"components/VideoBoxComponent.html":{}},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["videodevice",{"_index":525,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["videodeviceid",{"_index":51,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["videodevices",{"_index":1167,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement",{"_index":1176,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.addeventlistener('canplay",{"_index":1344,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.addeventlistener('playing",{"_index":1323,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.autoplay",{"_index":1361,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.muted",{"_index":1321,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.play",{"_index":1345,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.removeeventlistener('playing",{"_index":1322,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.setattribute('id",{"_index":1363,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.setattribute('playsinline",{"_index":1362,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.setattribute('style",{"_index":1340,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.videoheight",{"_index":1290,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.videowidth",{"_index":1289,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoheight",{"_index":360,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["videoid",{"_index":1041,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["videoinput",{"_index":549,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"injectables/WebrtcService.html":{}}}],["videoqualityhelper",{"_index":1009,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["videoqualityhelper(3",{"_index":1047,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["videorecv",{"_index":1410,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoroom",{"_index":42,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["videoroom'},{'name",{"_index":231,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["videoroom.component",{"_index":682,"title":{},"body":{"modules/JanusModule.html":{}}}],["videoroom.component.html",{"_index":718,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.scss",{"_index":717,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts",{"_index":701,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:100",{"_index":756,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:107",{"_index":764,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:113",{"_index":730,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:122",{"_index":738,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:128",{"_index":728,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:134",{"_index":752,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:148",{"_index":768,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:154",{"_index":772,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:160",{"_index":777,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:176",{"_index":727,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:63",{"_index":761,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:71",{"_index":769,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:79",{"_index":732,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:85",{"_index":753,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:91",{"_index":767,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom/janus",{"_index":681,"title":{},"body":{"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{}}}],["videoroomcomponent",{"_index":121,"title":{"interfaces/VideoRoomComponent.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["videorooms",{"_index":1480,"title":{},"body":{"index.html":{}}}],["videoroomstate",{"_index":1664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["videoroomwrappercomponent",{"_index":694,"title":{},"body":{"modules/JanusModule.html":{}}}],["videoroomwrapperdirective",{"_index":697,"title":{},"body":{"modules/JanusModule.html":{}}}],["videos",{"_index":306,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"index.html":{}}}],["videosend",{"_index":1274,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videosettings",{"_index":1357,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videosettings.framerate",{"_index":1376,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videosettings.height",{"_index":1368,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videostream",{"_index":1347,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videostream.getaudiotracks().find((item",{"_index":1372,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videostream.getvideotracks()[0].getsettings",{"_index":1358,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videowidth",{"_index":358,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["view",{"_index":1020,"title":{},"body":{"components/VideoBoxComponent.html":{},"index.html":{}}}],["viewchild",{"_index":191,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["viewchild('audioelement",{"_index":204,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["viewchild('container",{"_index":792,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["viewchild('videoelement",{"_index":1045,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["viewchild('viewport",{"_index":353,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["viewport",{"_index":354,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["viewportheight",{"_index":437,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["viewportwidth",{"_index":436,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["visible",{"_index":962,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["visual",{"_index":245,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["void",{"_index":186,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["volume",{"_index":608,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["volume/mute",{"_index":615,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["wait",{"_index":1380,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["want",{"_index":639,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["warm",{"_index":1402,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["way",{"_index":1342,"title":{},"body":{"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["we're",{"_index":28,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["webapp",{"_index":705,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["webapps",{"_index":1562,"title":{},"body":{"index.html":{}}}],["webrtc",{"_index":247,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["webrtc_state",{"_index":1654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webrtcservice",{"_index":507,"title":{"injectables/WebrtcService.html":{}},"body":{"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["webrtcstate(on",{"_index":1232,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["website",{"_index":1595,"title":{},"body":{"index.html":{}}}],["websocket",{"_index":770,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["weight",{"_index":981,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["weird",{"_index":820,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["well",{"_index":1554,"title":{},"body":{"index.html":{}}}],["whenever",{"_index":309,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{}}}],["white",{"_index":949,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["width",{"_index":304,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["window",{"_index":395,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["window.crypto.getrandomvalues(array",{"_index":1671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["window.cypress",{"_index":809,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["window.janusstore",{"_index":810,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["window.location.reload",{"_index":1262,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["windows",{"_index":1549,"title":{},"body":{"index.html":{}}}],["wish",{"_index":1578,"title":{},"body":{"index.html":{}}}],["wishes",{"_index":21,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["within",{"_index":1148,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["without",{"_index":62,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["won't",{"_index":418,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["work",{"_index":921,"title":{},"body":{"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["working",{"_index":1484,"title":{},"body":{"index.html":{}}}],["works",{"_index":1502,"title":{},"body":{"index.html":{}}}],["wrap",{"_index":472,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["wrapper",{"_index":1131,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["wrapper.component",{"_index":696,"title":{},"body":{"modules/JanusModule.html":{}}}],["wrapper.directive",{"_index":698,"title":{},"body":{"modules/JanusModule.html":{}}}],["wrapper.models",{"_index":785,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["wrapper.models.ts",{"_index":8,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["wrapper/video",{"_index":695,"title":{},"body":{"modules/JanusModule.html":{}}}],["wrappers",{"_index":1158,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["write",{"_index":1507,"title":{},"body":{"index.html":{}}}],["written",{"_index":1589,"title":{},"body":{"index.html":{}}}],["wss://janus.conf.meetecho.com/ws",{"_index":771,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["wsurl",{"_index":724,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["x.state",{"_index":383,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["yarn",{"_index":1575,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1343,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["you'll",{"_index":622,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["yourappmodule",{"_index":1579,"title":{},"body":{"index.html":{}}}],["z",{"_index":483,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["zoom",{"_index":672,"title":{},"body":{"modules/JanusModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AttachRemoteFeedEvent.html":{"url":"interfaces/AttachRemoteFeedEvent.html","title":"interface - AttachRemoteFeedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AttachRemoteFeedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/video-room-wrapper.models.ts\n        \n\n            \n                Description\n            \n            \n                Data for the attachRemoteFeedEvent. The event will negotiate a connection to\nreceive the remote stream. This must be called on each remote feed the user wishes\nto receive.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        feed\n                                \n                                \n                                        roomInfo\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        feed\n                                    \n                                \n                                \n                                    \n                                        feed:         RemoteFeed\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RemoteFeed\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Remote feed that we're requesting. The stream must be in the RemoteFeedState.initialized state. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roomInfo\n                                    \n                                \n                                \n                                    \n                                        roomInfo:         RoomInfo\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RoomInfo\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Room info object for the room the remote feed belongs to. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { EventEmitter, } from '@angular/core';\n\nimport {\n  Devices,\n  JanusRole,\n  RemoteFeed,\n  RoomInfo,\n} from './janus.models';\n\n\n/**\n * Data for the publishOwnFeed event emitted by a videoroom. This event will\n * tell the system to start publishing the local feed of the user. By default,\n * you can specify an audioDeviceId and videoDeviceId and the system will capture\n * video/audio from those devices. Alternatively, if skipVideoCapture is set to\n * true, the stream from the canvas element will be published without audio. The\n * videoroom will take full responsibility for drawing to the canvas element\n */\nexport interface PublishOwnFeedEvent {\n\n  /** Device ID for the microphone. ID matches what is returned by `navigator.mediaDevics.enumerateDevices` */\n  audioDeviceId: string;\n\n  /** Device ID for the camera. ID matches what is returned by `navigator.mediaDevics.enumerateDevices` */\n  videoDeviceId: string;\n\n  /** HTML ID of the canvas element. Must exist in all use cases, even not drawing on\n   * the canvas manually. If document.getElementById([canvasId]) does not return a canvas\n   * element, this will fail\n   */\n  canvasId: string;\n\n  /** If true, directs the service to not setup a video element. It will instead transmit\n   * a video stream from the canvas element\n   */\n  skipVideoCapture: boolean;\n}\n\n\n/** Data for the requestSubstream event. The event is used to request different\n * substreams when the publisher is using multicast, which is the default.\n */\nexport interface RequestSubstreamEvent {\n  /** Remote feed that we're requesting a different substream for. */\n  feed: RemoteFeed;\n\n  /** The integer id of the stream to request. */\n  substreamId: number;\n}\n\n/** Data for the attachRemoteFeedEvent. The event will negotiate a connection to\n * receive the remote stream. This must be called on each remote feed the user wishes\n * to receive.\n */\nexport interface AttachRemoteFeedEvent {\n  /** Remote feed that we're requesting. The stream must be in the `RemoteFeedState.initialized` state. */\n  feed: RemoteFeed;\n\n  /** Room info object for the room the remote feed belongs to. */\n  roomInfo: RoomInfo;\n}\n\n/**\n * Interface for customer video room component\n *\n * Any provided custom video room must implement this interface. You need not use all of the\n * data if your use case doesn't require it. For example, a room might be publish only, in which\n * case the remoteFeeds can be ignored\n */\nexport interface VideoRoomComponent {\n\n  /** roomInfo object */\n  roomInfo: RoomInfo;\n\n  /** Role of the user */\n  role: JanusRole;\n\n  /** Which devices to user */\n  devices?: Devices;\n\n  /** List of available feeds */\n  remoteFeeds: RemoteFeed[];\n\n  /** Event to request a different substream */\n  requestSubstream: EventEmitter;\n\n  /** Event to publish a locally collected feed */\n  publishOwnFeed: EventEmitter;\n\n  /** Event to subscribe to another publisher's feed */\n  attachRemoteFeed: EventEmitter;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AudioBoxComponent.html":{"url":"components/AudioBoxComponent.html","title":"component - AudioBoxComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AudioBoxComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/components/audio-box/audio-box.component.ts\n\n\n    \n        Description\n    \n    \n        Component for playing audio from a stream.\nThis will play the audio from a remoteFeed without rendering the video at all.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                janus-nvid-audio-box\n            \n\n            \n                styleUrls\n                ./audio-box.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./audio-box.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onDeviceChange\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                devices\n                            \n                            \n                                remoteFeed\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    devices\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(janusService: JanusService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/components/audio-box/audio-box.component.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        janusService\n                                                  \n                                                        \n                                                                    JanusService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n                \n                    \n                        Type :         Devices\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/audio-box/audio-box.component.ts:26\n                            \n                        \n                \n                    \n                        Requested output device (speaker). If available, this will dynamically change the\nspeaker device. This is not available in chrome on android\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        remoteFeed\n                    \n                \n                \n                    \n                        Type :         RemoteFeed\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/audio-box/audio-box.component.ts:20\n                            \n                        \n                \n                    \n                        RemoteFeed object \n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onDeviceChange\n                        \n                        \n                    \n                \n            \n            \n                \nonDeviceChange(devices: Devices)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/audio-box/audio-box.component.ts:71\n                \n            \n\n\n            \n                \n                    Attempts to change speaker if requested \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    devices\n                                    \n                                                Devices\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n\n\n                \n                    \n                        setdevices(devices)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/components/audio-box/audio-box.component.ts:29\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            devices\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { AfterViewInit, Component, Input, OnInit, ChangeDetectionStrategy, ViewChild, ElementRef } from '@angular/core';\n\nimport { RemoteFeed, Devices } from '../../models/janus.models';\nimport { JanusService } from '../../services/janus.service';\n\n/**\n * Component for playing audio from a stream.\n *\n * This will play the audio from a remoteFeed without rendering the video at all.\n */\n@Component({\n  selector: 'janus-nvid-audio-box',\n  templateUrl: './audio-box.component.html',\n  styleUrls: ['./audio-box.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AudioBoxComponent implements OnInit, AfterViewInit {\n\n  /** `RemoteFeed` object */\n  @Input() remoteFeed: RemoteFeed;\n\n  /** Requested output device (speaker). If available, this will dynamically change the\n   * speaker device. This is not available in chrome on android\n   */\n  @Input()\n  get devices(): Devices {\n    return this.localDevices;\n  }\n  set devices(devices: Devices) {\n    this.onDeviceChange(devices);\n    this.localDevices = devices;\n  }\n\n  /** @internal */\n  private localDevices: Devices;\n\n  /** @internal */\n  public audioId: string;\n\n  /** @internal */\n  @ViewChild('audioElement') audio: ElementRef;\n\n  constructor(\n    private janusService: JanusService,\n  ) { }\n\n  ngOnInit(): void {\n    // Set my unique id for the audio\n    const instance = this;\n    this.audioId = 'audio-' + this.remoteFeed.id;\n  }\n\n  ngAfterViewInit(): void {\n    this.janusService.attachMediaStream(this.audioId, this.remoteFeed.streamId);\n  }\n\n  /** @internal */\n  setSpeaker(devices: Devices): void {\n    if (\n      this.audio\n      && this.audio.nativeElement\n      && this.audio.nativeElement.setSinkId\n      && devices\n      && devices.speakerDeviceId\n    ) {\n      this.audio.nativeElement.setSinkId(devices.speakerDeviceId);\n    }\n  }\n\n  /** Attempts to change speaker if requested */\n  onDeviceChange(devices: Devices): void {\n    this.setSpeaker(devices);\n  }\n}\n\n    \n\n    \n        \n\n    \n\n    \n                \n                    ./audio-box.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AudioBoxComponent', 'selector': 'janus-nvid-audio-box'},{'name': 'DefaultVideoRoomComponent', 'selector': 'janus-default-video-room'},{'name': 'DeviceSelectorComponent', 'selector': 'janus-device-selector'},{'name': 'JanusVideoroomComponent', 'selector': 'janus-videoroom'},{'name': 'SelfVideoComponent', 'selector': 'janus-self-video'},{'name': 'VideoBoxComponent', 'selector': 'janus-video-box'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AudioBoxComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DefaultVideoRoomComponent.html":{"url":"components/DefaultVideoRoomComponent.html","title":"component - DefaultVideoRoomComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DefaultVideoRoomComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/components/default-video-room/default-video-room.component.ts\n\n\n    \n        Description\n    \n    \n        Reference implementation of a video room display component.\nThis component displays the visual elements of a videoroom. The webRTC signalling is\nmostly abstracted away in higher level components. There are a small number of events\nthis component can emit in order to affect the webRTC signalling.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                janus-default-video-room\n            \n\n            \n                styleUrls\n                ./default-video-room.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./default-video-room.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                mode\n                            \n                            \n                                readyRemoteFeeds\n                            \n                            \n                                    Public\n                                speaker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                computeVideoWidth\n                            \n                            \n                                onMaximize\n                            \n                            \n                                onPublishOwnFeed\n                            \n                            \n                                onRemoteFeedsChange\n                            \n                            \n                                onRequestSubstream\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                devices\n                            \n                            \n                                remoteFeeds\n                            \n                            \n                                role\n                            \n                            \n                                roomInfo\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                attachRemoteFeed\n                            \n                            \n                                publishOwnFeed\n                            \n                            \n                                requestSubstream\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    remoteFeeds\n                                \n                                \n                                    publishing\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(changeDetector: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/lib/components/default-video-room/default-video-room.component.ts:114\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n                \n                    \n                        Type :         Devices\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:53\n                            \n                        \n                \n                    \n                        Requested devices \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        remoteFeeds\n                    \n                \n                \n                    \n                        Type :         RemoteFeed[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:63\n                            \n                        \n                \n                    \n                        Existing RemoteFeeds. This component must request any desired RemoteFeed be streamed by\nemitting a attachRemoteStream event. This is not done automatically because it might not be\ndesired to receive all remote feeds, depending on the product. A RemoteFeed can be attached\nto iff its current state is RemoteFeedState.initialized. A RemoteFeed that is in the\nRemoteFeedState.ready state can be streamed materialized by calling\nJanusService.attachMediaStream.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        role\n                    \n                \n                \n                    \n                        Type :         JanusRole\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:50\n                            \n                        \n                \n                    \n                        User's role in this videoroom \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        roomInfo\n                    \n                \n                \n                    \n                        Type :         RoomInfo\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:47\n                            \n                        \n                \n                    \n                        RoomInfo object \n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        attachRemoteFeed\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:82\n                            \n                        \n                \n                    \n                        Event to begin streaming a remote feed \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        publishOwnFeed\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:78\n                            \n                        \n                \n                    \n                        Event to publish a local stream \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        requestSubstream\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:74\n                            \n                        \n                \n                    \n                        Event to request a different substream \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            computeVideoWidth\n                        \n                        \n                    \n                \n            \n            \n                \ncomputeVideoWidth(numRemoteVideos)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:216\n                \n            \n\n\n            \n                \n                    Computes the ideal width of each video assuming all videos are the same size.\nCalled whenever the screen is resized or remoteFeeds changes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    numRemoteVideos\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onMaximize\n                        \n                        \n                    \n                \n            \n            \n                \nonMaximize(remoteFeed: RemoteFeed)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:139\n                \n            \n\n\n            \n                \n                    Event callback to switch to/from speaker mode \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    remoteFeed\n                                    \n                                                RemoteFeed\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onPublishOwnFeed\n                        \n                        \n                    \n                \n            \n            \n                \nonPublishOwnFeed(event: PublishOwnFeedEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:154\n                \n            \n\n\n            \n                \n                    Event callback to publish a local stream \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                PublishOwnFeedEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onRemoteFeedsChange\n                        \n                        \n                    \n                \n            \n            \n                \nonRemoteFeedsChange(previousRemoteFeeds: RemoteFeed[], currentRemoteFeeds: RemoteFeed[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:159\n                \n            \n\n\n            \n                \n                    Called on all changes of remoteFeeds \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    previousRemoteFeeds\n                                    \n                                                RemoteFeed[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentRemoteFeeds\n                                    \n                                                RemoteFeed[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onRequestSubstream\n                        \n                        \n                    \n                \n            \n            \n                \nonRequestSubstream(event: RequestSubstreamEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:149\n                \n            \n\n\n            \n                \n                    Event callback to request a new substream \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                RequestSubstreamEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            mode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     \"grid\" | \"speaker\"\n\n                        \n                    \n                    \n                        \n                            Default value : 'grid'\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:111\n                            \n                        \n\n                \n                    \n                        Current mode of the video room \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            readyRemoteFeeds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         RemoteFeed[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:70\n                            \n                        \n\n                \n                    \n                        List of RemoteFeeds objects that are in the RemoteFeedState.ready state. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            speaker\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         RemoteFeed\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:114\n                            \n                        \n\n                \n                    \n                        Current speaker in the event we're in speaker mode \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        remoteFeeds\n                    \n                \n\n\n                \n                    \n                        setremoteFeeds(remoteFeeds: [])\n                    \n                \n                            \n                                \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:64\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            remoteFeeds\n                                                    \n                                                            \n                                                                        []\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        publishing\n                    \n                \n\n                \n                    \n                        getpublishing()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:134\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n} from '@angular/core';\n\nimport { fromEvent, Observable, Subscription, interval, Subject } from 'rxjs';\nimport { debounce, takeUntil } from 'rxjs/operators';\n\nimport {\n  AttachRemoteFeedEvent,\n  Devices,\n  JanusRole,\n  PublishOwnFeedEvent,\n  RemoteFeed,\n  RemoteFeedState,\n  RequestSubstreamEvent,\n  RoomInfo,\n  RoomInfoState,\n} from '../../models';\n\n/**\n * Reference implementation of a video room display component.\n *\n * This component displays the visual elements of a videoroom. The webRTC signalling is\n * mostly abstracted away in higher level components. There are a small number of events\n * this component can emit in order to affect the webRTC signalling.\n */\n@Component({\n  selector: 'janus-default-video-room',\n  templateUrl: './default-video-room.component.html',\n  styleUrls: ['./default-video-room.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DefaultVideoRoomComponent implements OnInit, OnDestroy, AfterViewInit {\n\n  /** `RoomInfo` object */\n  @Input() roomInfo: RoomInfo;\n\n  /** User's role in this videoroom */\n  @Input() role: JanusRole;\n\n  /** Requested devices */\n  @Input() devices?: Devices;\n\n  /** Existing `RemoteFeeds`. This component must request any desired `RemoteFeed` be streamed by\n   * emitting a attachRemoteStream event. This is not done automatically because it might not be\n   * desired to receive all remote feeds, depending on the product. A `RemoteFeed` can be attached\n   * to iff its current state is `RemoteFeedState.initialized`. A `RemoteFeed` that is in the\n   * `RemoteFeedState.ready` state can be streamed materialized by calling\n   * `JanusService.attachMediaStream`.\n   */\n  @Input()\n  get remoteFeeds(): RemoteFeed[] { return this.privateRemoteFeeds; }\n  set remoteFeeds(remoteFeeds: RemoteFeed[]) {\n    this.onRemoteFeedsChange(this.privateRemoteFeeds, remoteFeeds);\n    this.privateRemoteFeeds = remoteFeeds;\n  }\n\n  /** List of `RemoteFeeds` objects that are in the `RemoteFeedState.ready` state. */\n  readyRemoteFeeds: RemoteFeed[] = [];\n\n  /** Event to request a different substream */\n  @Output()\n  requestSubstream = new EventEmitter();\n\n  /** Event to publish a local stream */\n  @Output()\n  publishOwnFeed = new EventEmitter();\n\n  /** Event to begin streaming a remote feed */\n  @Output()\n  attachRemoteFeed = new EventEmitter();\n\n  /** @internal */\n  @ViewChild('viewport') viewport: ElementRef;\n\n  /** @internal */\n  private resizeObservable$: Observable;\n\n  /** @internal */\n  private destroy$ = new Subject();\n\n  /** @internal */\n  private privateRemoteFeeds: RemoteFeed[] = [];\n\n  /** @internal */\n  public videoWidth = 0;\n  /** @internal */\n  public videoHeight = 0;\n  /** @internal */\n  public speakerWidth = 0;\n  /** @internal */\n  public speakerHeight = 0;\n\n  /** @internal */\n  public selfVideoRight = 0;\n  /** @internal */\n  public selfVideoBottom = 0;\n\n  /** Current mode of the video room */\n  public mode: 'grid' | 'speaker' = 'grid';\n\n  /** Current speaker in the event we're in speaker mode */\n  public speaker: RemoteFeed;\n\n  constructor(\n    private changeDetector: ChangeDetectorRef,\n  ) { }\n\n  ngOnInit(): void {\n    // subscribe to resize events\n    this.resizeObservable$ = fromEvent(window, 'resize');\n  }\n\n  ngAfterViewInit(): void {\n    this.setupSubscriptions();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  get publishing(): boolean {\n    return this.role === 'publisher';\n  }\n\n  /** Event callback to switch to/from speaker mode */\n  onMaximize(remoteFeed: RemoteFeed): void {\n    if (this.mode === 'grid') {\n      this.speaker = remoteFeed;\n      this.mode = 'speaker';\n    } else {\n      this.mode = 'grid';\n    }\n  }\n\n  /** Event callback to request a new substream */\n  onRequestSubstream(event: RequestSubstreamEvent): void {\n    this.requestSubstream.emit(event);\n  }\n\n  /** Event callback to publish a local stream */\n  onPublishOwnFeed(event: PublishOwnFeedEvent): void {\n    this.publishOwnFeed.emit(event);\n  }\n\n  /** Called on all changes of `remoteFeeds` */\n  onRemoteFeedsChange(previousRemoteFeeds: RemoteFeed[], currentRemoteFeeds: RemoteFeed[]): void {\n\n    this.computeVideoWidth(currentRemoteFeeds.length);\n    for (const feed of currentRemoteFeeds) {\n      if (feed.state === RemoteFeedState.initialized) {\n        this.attachRemoteFeed.emit({\n          roomInfo: this.roomInfo,\n          feed,\n        });\n      }\n    }\n\n    this.readyRemoteFeeds = currentRemoteFeeds.filter((x) => x.state === RemoteFeedState.ready);\n  }\n\n  /** @internal */\n  trackByFeedId(index: number, remoteFeed: RemoteFeed): string {\n    return remoteFeed.id;\n  }\n\n  /** @internal */\n  get selfVideoHeight(): number {\n    if (this.mode === 'grid') {\n      return this.videoHeight;\n    } else {\n      return this.speakerHeight / 5;\n    }\n  }\n\n  /** @internal */\n  get selfVideoWidth(): number {\n    if (this.mode === 'grid') {\n      return this.videoWidth;\n    } else {\n      return this.speakerWidth / 5;\n    }\n  }\n\n  /** @internal */\n  setupSubscriptions(): void {\n    // Compute video width whenever the window is resized\n    this.resizeObservable$\n      .pipe(\n        debounce(() => interval(500)),\n        takeUntil(this.destroy$),\n      )\n      .subscribe((event) => {\n        this.computeVideoWidth(this.remoteFeeds.length);\n      });\n\n    // Do an initial calculation\n    this.computeVideoWidth(0);\n  }\n\n  /** Computes the ideal width of each video assuming all videos are the same size.\n   * Called whenever the screen is resized or `remoteFeeds` changes\n   */\n  computeVideoWidth(numRemoteVideos): void {\n    if (!this.viewport) {\n      return;\n    }\n    // Adding 1 for our local video\n    let numVideos = numRemoteVideos;\n    if (this.publishing) {\n      numVideos += 1;\n    }\n\n    this.videoWidth = this.findIdealWidth(\n      this.viewport.nativeElement.offsetWidth,\n      this.viewport.nativeElement.offsetHeight,\n      numVideos);\n\n    this.videoHeight = this.videoWidth * 3 / 4;\n\n    this.computeSpeakerModeDimensions();\n\n    // The window resize event is outside of angular, so change detection won't\n    // automatically pick this up. Smells a bit, but not sure there's a better\n    // solution\n    this.changeDetector.detectChanges();\n  }\n\n  /** @internal */\n  computeSpeakerModeDimensions(aspectRatio: number = 4 / 3): void {\n    const width = this.viewport.nativeElement.offsetWidth;\n    const height = this.viewport.nativeElement.offsetHeight;\n\n    const calculatedWidth = height * aspectRatio;\n\n    if (calculatedWidth > width) {\n      this.speakerWidth = width;\n    } else {\n      this.speakerWidth = calculatedWidth;\n    }\n    this.speakerHeight = this.speakerWidth * 3 / 4;\n\n    this.selfVideoBottom = (height - (this.speakerWidth / aspectRatio)) / 2;\n    this.selfVideoRight = (width - this.speakerWidth) / 2;\n  }\n\n  /** @internal */\n  findIdealWidth(\n    viewportWidth: number,\n    viewportHeight: number,\n    numVideos: number,\n    aspectRatio: number = 4 / 3\n  ): number {\n    // Do a bisect search for the largest width that will fit in our viewport\n\n    const isValidWidth = ((testWidth: number) => {\n      if (testWidth > viewportWidth) {\n        return false;\n      }\n      const numColumns = Math.min(numVideos, Math.floor(viewportWidth / testWidth));\n      const numRows = Math.ceil(numVideos / numColumns);\n      const testHeight = Math.ceil(testWidth / aspectRatio);\n\n      // console.log('is valid: ', testWidth, testHeight, numColumns, numRows, (testHeight * numRows)  maxFits + 1) {\n      iterations += 1;\n      const ptr = Math.floor((maxFits + minOver) / 2);\n      if (isValidWidth(ptr)) {\n        maxFits = ptr;\n      } else {\n        minOver = ptr;\n      }\n\n      if (iterations > 50) {\n        break;\n      }\n    }\n\n    // console.log('searching', viewportWidth, viewportHeight, numVideos, maxFits);\n    return maxFits;\n  }\n}\n\n    \n\n    \n        \n\n  \n    \n  \n\n  \n    \n      \n    \n  \n\n  \n    \n      \n    \n\n    \n      \n\n      \n\n    \n  \n\n\n    \n\n    \n                \n                    ./default-video-room.component.scss\n                \n                div.video-room-viewport {\n    width: 100%;\n    height: 100%;\n\n    position: relative;\n\n    display: flex;\n    justify-content: center;\n    align-content: center;\n    flex-wrap: wrap;\n\n    /* background-color: #a5adb7; */\n\n    div {\n        /* border: 2px solid black; */ \n    }\n}\n\ndiv.speaker {\n    position: absolute;\n    z-index: 1;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                '\n    var COMPONENTS = [{'name': 'AudioBoxComponent', 'selector': 'janus-nvid-audio-box'},{'name': 'DefaultVideoRoomComponent', 'selector': 'janus-default-video-room'},{'name': 'DeviceSelectorComponent', 'selector': 'janus-device-selector'},{'name': 'JanusVideoroomComponent', 'selector': 'janus-videoroom'},{'name': 'SelfVideoComponent', 'selector': 'janus-self-video'},{'name': 'VideoBoxComponent', 'selector': 'janus-video-box'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DefaultVideoRoomComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DeviceSelectorComponent.html":{"url":"components/DeviceSelectorComponent.html","title":"component - DeviceSelectorComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DeviceSelectorComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/containers/device-selector/device-selector.component.ts\n\n\n    \n        Description\n    \n    \n        Device selector form. Implements a form that will show the user options for picking their camera,\nmicrophone, and speaker device. The speaker option is only shown if the device supports dynamically\nchanging the speaker. This class can be subclassed if style changes are desired.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n    \n        Example\n    \n    \n                \n                    \n\n                \n    \n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                janus-device-selector\n            \n\n            \n                styleUrls\n                ./device-selector.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./device-selector.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                availableAudioDevices\n                            \n                            \n                                    Public\n                                availableSpeakerDevices\n                            \n                            \n                                    Public\n                                availableVideoDevices\n                            \n                            \n                                    Public\n                                devicesForm\n                            \n                            \n                                    Public\n                                supportsSpeakerSelection\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                devices\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                deviceUpdate\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(changeDetector: ChangeDetectorRef, builder: FormBuilder, webrtc: WebrtcService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/containers/device-selector/device-selector.component.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        builder\n                                                  \n                                                        \n                                                                        FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        webrtc\n                                                  \n                                                        \n                                                                        WebrtcService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n                \n                    \n                        Type :         Devices\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/device-selector/device-selector.component.ts:36\n                            \n                        \n                \n                    \n                        Currently selected devices\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        deviceUpdate\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/device-selector/device-selector.component.ts:42\n                            \n                        \n                \n                    \n                        Event emitted whenever the user changes the devices in the form\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            availableAudioDevices\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/device-selector/device-selector.component.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            availableSpeakerDevices\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/device-selector/device-selector.component.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            availableVideoDevices\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/device-selector/device-selector.component.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            devicesForm\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/device-selector/device-selector.component.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            supportsSpeakerSelection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/containers/device-selector/device-selector.component.ts:48\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { ChangeDetectorRef, Component, EventEmitter, OnDestroy, OnInit, Output, ChangeDetectionStrategy, Input } from '@angular/core';\n\nimport { FormBuilder, Validators } from '@angular/forms';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { WebrtcService } from '../../services/janus.service';\nimport { Devices } from '../../models/janus.models';\n\n\n/**\n * Device selector form. Implements a form that will show the user options for picking their camera,\n * microphone, and speaker device. The speaker option is only shown if the device supports dynamically\n * changing the speaker. This class can be subclassed if style changes are desired.\n * @example\n * \n * \n */\n@Component({\n  selector: 'janus-device-selector',\n  templateUrl: './device-selector.component.html',\n  styleUrls: [\n    './device-selector.component.scss',\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DeviceSelectorComponent implements OnInit, OnDestroy {\n\n  /**\n   * Currently selected devices\n   */\n  @Input()\n  devices: Devices;\n\n  /**\n   * Event emitted whenever the user changes the devices in the form\n   */\n  @Output()\n  deviceUpdate = new EventEmitter();\n\n  public devicesForm;\n  public availableAudioDevices;\n  public availableVideoDevices;\n  public availableSpeakerDevices;\n  public supportsSpeakerSelection = false;\n  private destroy$ = new Subject();\n\n\n  constructor(\n    private changeDetector: ChangeDetectorRef,\n    private builder: FormBuilder,\n    private webrtc: WebrtcService,\n  ) { }\n\n  ngOnInit(): void {\n\n    this.devicesForm = this.builder.group({\n      audioDevice: [this.devices.audioDeviceId, [Validators.required]],\n      videoDevice: [this.devices.videoDeviceId, [Validators.required]],\n      speakerDevice: [this.devices.speakerDeviceId, [Validators.required]],\n    });\n    this.getDevices();\n\n    this.devicesForm.valueChanges.pipe(\n      takeUntil(this.destroy$)\n    ).subscribe(() => {\n      const devices = {\n        audioDeviceId: this.devicesForm.get('audioDevice').value,\n        videoDeviceId: this.devicesForm.get('videoDevice').value,\n        speakerDeviceId: this.devicesForm.get('speakerDevice').value,\n      };\n      this.deviceUpdate.emit(devices);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  /** @internal */\n  async getDevices(): Promise {\n    const allDevices = await this.webrtc.listDevices();\n    this.supportsSpeakerSelection = this.webrtc.supportsSpeakerSelection();\n    this.availableAudioDevices = allDevices.filter((device) => device.kind === 'audioinput');\n    this.availableVideoDevices = allDevices.filter((device) => device.kind === 'videoinput');\n    this.availableSpeakerDevices = allDevices.filter((device) => device.kind === 'audiooutput');\n    this.changeDetector.detectChanges();\n  }\n}\n\n    \n\n    \n        \n    \n      Microphone\n      \n      \n        {{ device.label }}\n      \n    \n\n    \n      Camera\n      \n      \n        {{ device.label }}\n      \n    \n\n    \n      Speakers\n      \n      \n        {{ device.label }}\n      \n    \n\n\n    \n\n    \n                \n                    ./device-selector.component.scss\n                \n                div.form-row {\n    display: flex;\n    justify-content: center;\n    padding: 5px 0;\n\n    span.flex {\n        flex-grow: 1;\n    }\n\n    label {\n        width: 30%;\n    }\n\n    select {\n        width: 60%;\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '          Microphone                    {{ device.label }}                    Camera                    {{ device.label }}                    Speakers                    {{ device.label }}          '\n    var COMPONENTS = [{'name': 'AudioBoxComponent', 'selector': 'janus-nvid-audio-box'},{'name': 'DefaultVideoRoomComponent', 'selector': 'janus-default-video-room'},{'name': 'DeviceSelectorComponent', 'selector': 'janus-device-selector'},{'name': 'JanusVideoroomComponent', 'selector': 'janus-videoroom'},{'name': 'SelfVideoComponent', 'selector': 'janus-self-video'},{'name': 'VideoBoxComponent', 'selector': 'janus-video-box'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DeviceSelectorComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Devices.html":{"url":"interfaces/Devices.html","title":"interface - Devices","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Devices\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/janus.models.ts\n        \n\n            \n                Description\n            \n            \n                Device specifications\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        audioDeviceId\n                                \n                                \n                                        speakerDeviceId\n                                \n                                \n                                        videoDeviceId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audioDeviceId\n                                    \n                                \n                                \n                                    \n                                        audioDeviceId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Microphone Device ID \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        speakerDeviceId\n                                    \n                                \n                                \n                                    \n                                        speakerDeviceId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Speaker Device ID \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        videoDeviceId\n                                    \n                                \n                                \n                                    \n                                        videoDeviceId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Camera Device ID \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as moment from 'moment';\n\n/**\n * Device specifications\n */\nexport interface Devices {\n  /** Microphone Device ID */\n  audioDeviceId: string;\n\n  /** Camera Device ID */\n  videoDeviceId: string;\n\n  /** Speaker Device ID */\n  speakerDeviceId: string;\n}\n\n/**\n * Room state machine\n */\nexport enum RoomInfoState {\n  start = 'start',\n  initializing = 'initializing',\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  attach_failed = 'attach_failed',\n  joining = 'joining',\n\n  /** Once joined, you can start publishing */\n  joined = 'joined',\n  error = 'error',\n}\n\n/**\n * Current publish status\n */\nexport enum PublishState {\n  start = 'start',\n  ready = 'ready',\n  publishRequested = 'publish requested',\n  publishing = 'publishing',\n  error = 'error',\n}\n\n/**\n * Metadata for a room\n */\nexport interface RoomInfo {\n\n  /** State of the room */\n  state: RoomInfoState;\n\n  /** roomId */\n  id: string;\n\n  /** Description of the room */\n  description: string;\n\n  /** private_id assigned by janus */\n  privateId: number;\n\n  /** Value passed back in \"joined\" message */\n  otherRoomId: number;  // This comes back in the \"joined\" message. Not sure what to use it for\n\n  /** Set to error code if there was an error in the room */\n  errorCode: number;\n\n  /** Local publishing state */\n  publishState: PublishState;\n\n  /** @internal Internal stream id */\n  localStreamId: string;\n\n  /** True iff the audio is muted */\n  muted: boolean;\n}\n\n/**\n * Remote feed state machine\n */\nexport enum RemoteFeedState {\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  ready = 'ready',\n  error = 'error',\n}\n\n/**\n * Current state of a remote feed\n * There exists a remote feed object for each available publisher in the video\n * room. It's possible to attach to these\n */\nexport interface RemoteFeed {\n  /** Current state of the feed */\n  state: RemoteFeedState;\n\n  /** Id of the publisher */\n  id: string;\n\n  /** @internal */\n  streamId: string;\n\n  /** number of video tracks available */\n  numVideoTracks: number;\n\n  /** Substream requested */\n  requestedSubstream: number;\n\n  /** Substream currently being received */\n  currentSubstream: number;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /** @internal */\n  audio_codec: string;\n\n  /** @internal */\n  video_codec: string;\n\n  /** @internal */\n  volume: number;\n\n  /** @internal */\n  muted: boolean;\n\n  /** timestamp of most recent slowLink event on this feed */\n  slowLink: moment.Moment;\n}\n\n/**\n * Information for a publisher. Note that the volume/mute information is not\n * very practical in how it's implemented in janus currently. In order to get\n * meaningful information about talking/not talking, you'll need to know the\n * average background noise level of each publisher ahead of time. This is\n * specified at `audio_level_average` in the room. This isn't practical if you\n * don't know the publisher's system setup ahead of time. We set the\n * `audio_level_average` to 127 in the backend configuration. That makes the\n * start/stop talking events good for knowing if the remote user has muted.\n * You might want to ignore this information depending on your use case.\n */\nexport interface Publisher {\n\n  /** Janus ID of the publisher */\n  id: string;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /**\n   * Current volume of the publisher's audio. See notes in the interface description.\n   */\n  volume: number;\n\n  /** Set to true iff the last volume event had the volume at 127 */\n  muted: boolean;\n}\n\n/**\n * Possible roles for a user.\n */\nexport enum JanusRole {\n  /** A user in this role will publish their audio/video and see/hear all other publishers */\n  publisher = 'publisher',\n\n  /** A user in this role will *not* publish their audio/video. They will still see/hear all other publishers */\n  listener = 'listener',\n}\n\n/**\n * IceServer configuration. More details are in the {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer|MDN Docs}\n */\nexport interface IceServer {\n  urls: string;\n  username?: string;\n  credential?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IceServer.html":{"url":"interfaces/IceServer.html","title":"interface - IceServer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IceServer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/janus.models.ts\n        \n\n            \n                Description\n            \n            \n                IceServer configuration. More details are in the MDN Docs\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        credential\n                                \n                                \n                                        urls\n                                \n                                \n                                            Optional\n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        credential\n                                    \n                                \n                                \n                                    \n                                        credential:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        urls\n                                    \n                                \n                                \n                                    \n                                        urls:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as moment from 'moment';\n\n/**\n * Device specifications\n */\nexport interface Devices {\n  /** Microphone Device ID */\n  audioDeviceId: string;\n\n  /** Camera Device ID */\n  videoDeviceId: string;\n\n  /** Speaker Device ID */\n  speakerDeviceId: string;\n}\n\n/**\n * Room state machine\n */\nexport enum RoomInfoState {\n  start = 'start',\n  initializing = 'initializing',\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  attach_failed = 'attach_failed',\n  joining = 'joining',\n\n  /** Once joined, you can start publishing */\n  joined = 'joined',\n  error = 'error',\n}\n\n/**\n * Current publish status\n */\nexport enum PublishState {\n  start = 'start',\n  ready = 'ready',\n  publishRequested = 'publish requested',\n  publishing = 'publishing',\n  error = 'error',\n}\n\n/**\n * Metadata for a room\n */\nexport interface RoomInfo {\n\n  /** State of the room */\n  state: RoomInfoState;\n\n  /** roomId */\n  id: string;\n\n  /** Description of the room */\n  description: string;\n\n  /** private_id assigned by janus */\n  privateId: number;\n\n  /** Value passed back in \"joined\" message */\n  otherRoomId: number;  // This comes back in the \"joined\" message. Not sure what to use it for\n\n  /** Set to error code if there was an error in the room */\n  errorCode: number;\n\n  /** Local publishing state */\n  publishState: PublishState;\n\n  /** @internal Internal stream id */\n  localStreamId: string;\n\n  /** True iff the audio is muted */\n  muted: boolean;\n}\n\n/**\n * Remote feed state machine\n */\nexport enum RemoteFeedState {\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  ready = 'ready',\n  error = 'error',\n}\n\n/**\n * Current state of a remote feed\n * There exists a remote feed object for each available publisher in the video\n * room. It's possible to attach to these\n */\nexport interface RemoteFeed {\n  /** Current state of the feed */\n  state: RemoteFeedState;\n\n  /** Id of the publisher */\n  id: string;\n\n  /** @internal */\n  streamId: string;\n\n  /** number of video tracks available */\n  numVideoTracks: number;\n\n  /** Substream requested */\n  requestedSubstream: number;\n\n  /** Substream currently being received */\n  currentSubstream: number;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /** @internal */\n  audio_codec: string;\n\n  /** @internal */\n  video_codec: string;\n\n  /** @internal */\n  volume: number;\n\n  /** @internal */\n  muted: boolean;\n\n  /** timestamp of most recent slowLink event on this feed */\n  slowLink: moment.Moment;\n}\n\n/**\n * Information for a publisher. Note that the volume/mute information is not\n * very practical in how it's implemented in janus currently. In order to get\n * meaningful information about talking/not talking, you'll need to know the\n * average background noise level of each publisher ahead of time. This is\n * specified at `audio_level_average` in the room. This isn't practical if you\n * don't know the publisher's system setup ahead of time. We set the\n * `audio_level_average` to 127 in the backend configuration. That makes the\n * start/stop talking events good for knowing if the remote user has muted.\n * You might want to ignore this information depending on your use case.\n */\nexport interface Publisher {\n\n  /** Janus ID of the publisher */\n  id: string;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /**\n   * Current volume of the publisher's audio. See notes in the interface description.\n   */\n  volume: number;\n\n  /** Set to true iff the last volume event had the volume at 127 */\n  muted: boolean;\n}\n\n/**\n * Possible roles for a user.\n */\nexport enum JanusRole {\n  /** A user in this role will publish their audio/video and see/hear all other publishers */\n  publisher = 'publisher',\n\n  /** A user in this role will *not* publish their audio/video. They will still see/hear all other publishers */\n  listener = 'listener',\n}\n\n/**\n * IceServer configuration. More details are in the {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer|MDN Docs}\n */\nexport interface IceServer {\n  urls: string;\n  username?: string;\n  credential?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/JanusModule.html":{"url":"modules/JanusModule.html","title":"module - JanusModule","body":"\n                   \n\n\n\n\n    Modules\n    JanusModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_JanusModule\n\n\n\ncluster_JanusModule_exports\n\n\n\ncluster_JanusModule_declarations\n\n\n\n\nAudioBoxComponent\n\nAudioBoxComponent\n\n\n\nJanusModule\n\nJanusModule\n\nJanusModule -->\n\nAudioBoxComponent->JanusModule\n\n\n\n\n\nDefaultVideoRoomComponent\n\nDefaultVideoRoomComponent\n\nJanusModule -->\n\nDefaultVideoRoomComponent->JanusModule\n\n\n\n\n\nDeviceSelectorComponent\n\nDeviceSelectorComponent\n\nJanusModule -->\n\nDeviceSelectorComponent->JanusModule\n\n\n\n\n\nJanusVideoroomComponent\n\nJanusVideoroomComponent\n\nJanusModule -->\n\nJanusVideoroomComponent->JanusModule\n\n\n\n\n\nSelfVideoComponent\n\nSelfVideoComponent\n\nJanusModule -->\n\nSelfVideoComponent->JanusModule\n\n\n\n\n\nVideoBoxComponent\n\nVideoBoxComponent\n\nJanusModule -->\n\nVideoBoxComponent->JanusModule\n\n\n\n\n\nAudioBoxComponent \n\nAudioBoxComponent \n\nAudioBoxComponent  -->\n\nJanusModule->AudioBoxComponent \n\n\n\n\n\nDefaultVideoRoomComponent \n\nDefaultVideoRoomComponent \n\nDefaultVideoRoomComponent  -->\n\nJanusModule->DefaultVideoRoomComponent \n\n\n\n\n\nDeviceSelectorComponent \n\nDeviceSelectorComponent \n\nDeviceSelectorComponent  -->\n\nJanusModule->DeviceSelectorComponent \n\n\n\n\n\nJanusVideoroomComponent \n\nJanusVideoroomComponent \n\nJanusVideoroomComponent  -->\n\nJanusModule->JanusVideoroomComponent \n\n\n\n\n\nSelfVideoComponent \n\nSelfVideoComponent \n\nSelfVideoComponent  -->\n\nJanusModule->SelfVideoComponent \n\n\n\n\n\nVideoBoxComponent \n\nVideoBoxComponent \n\nVideoBoxComponent  -->\n\nJanusModule->VideoBoxComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/janus.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AudioBoxComponent\n                        \n                        \n                            DefaultVideoRoomComponent\n                        \n                        \n                            DeviceSelectorComponent\n                        \n                        \n                            JanusVideoroomComponent\n                        \n                        \n                            SelfVideoComponent\n                        \n                        \n                            VideoBoxComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AudioBoxComponent\n                        \n                        \n                            DefaultVideoRoomComponent\n                        \n                        \n                            DeviceSelectorComponent\n                        \n                        \n                            JanusVideoroomComponent\n                        \n                        \n                            SelfVideoComponent\n                        \n                        \n                            VideoBoxComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\nimport { JanusVideoroomComponent } from './containers/janus-videoroom/janus-videoroom.component';\nimport { DeviceSelectorComponent } from './containers/device-selector/device-selector.component';\nimport { AudioBoxComponent } from './components/audio-box/audio-box.component';\nimport { DefaultVideoRoomComponent } from './components/default-video-room/default-video-room.component';\nimport { SelfVideoComponent } from './components/self-video/self-video.component';\nimport { VideoBoxComponent } from './components/video-box/video-box.component';\nimport { VideoRoomWrapperComponent } from './components/video-room-wrapper/video-room-wrapper.component';\nimport { VideoRoomWrapperDirective } from './components/video-room-wrapper/video-room-wrapper.directive';\n\n\n@NgModule({\n  declarations: [\n    JanusVideoroomComponent,\n    DeviceSelectorComponent,\n    AudioBoxComponent,\n    DefaultVideoRoomComponent,\n    SelfVideoComponent,\n    VideoBoxComponent,\n    VideoRoomWrapperComponent,\n    VideoRoomWrapperDirective,\n  ],\n  imports: [\n    ReactiveFormsModule,\n    CommonModule,\n  ],\n  exports: [\n    JanusVideoroomComponent,\n    DeviceSelectorComponent,\n    SelfVideoComponent,\n    VideoBoxComponent,\n    AudioBoxComponent,\n    DefaultVideoRoomComponent,\n  ]\n})\nexport class JanusModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/JanusVideoroomComponent.html":{"url":"components/JanusVideoroomComponent.html","title":"component - JanusVideoroomComponent","body":"\n                   \n\n\n\n\n\n  Components\n  JanusVideoroomComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/containers/janus-videoroom/janus-videoroom.component.ts\n\n\n    \n        Description\n    \n    \n        Janus videoroom component. This is a high level component to easily embed a janus videoroom in any angular webapp.\nThere are many options that can be set through Inputs. However, you can get started with the minimal example below.\nRefer to the Janus Videoroom Docs for deploying your own\nJanus media server.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n                    OnChanges\n    \n\n    \n        Example\n    \n    \n                \n                    \n\n                \n    \n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n            \n                providers\n                \n                            JanusStore\n                \n            \n\n\n            \n                selector\n                janus-videoroom\n            \n\n            \n                styleUrls\n                ./janus-videoroom.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./janus-videoroom.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                component\n                            \n                            \n                                devices\n                            \n                            \n                                httpUrl\n                            \n                            \n                                iceServers\n                            \n                            \n                                isMuted\n                            \n                            \n                                pin\n                            \n                            \n                                role\n                            \n                            \n                                roomId\n                            \n                            \n                                userId\n                            \n                            \n                                userName\n                            \n                            \n                                videoRoomComponent\n                            \n                            \n                                wsUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                janusError\n                            \n                            \n                                publishers\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isMuted\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(janusStore: JanusStore, webrtc: WebrtcService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:176\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        janusStore\n                                                  \n                                                        \n                                                                    JanusStore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        webrtc\n                                                  \n                                                        \n                                                                        WebrtcService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        component\n                    \n                \n                \n                    \n                        Type :         VideoRoomComponent\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:128\n                            \n                        \n                \n                    \n                        Component to use for implementing the video room\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n                \n                    \n                        Type :         Devices\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:113\n                            \n                        \n                \n                    \n                        Input/output devices to use. If not provided, will use the default system devices\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        httpUrl\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:79\n                            \n                        \n                \n                    \n                        URL for the http(s) interface of the Janus server. At least one of wsUrl or httpUrl must be specified.\nExample: https://janus.conf.meetecho.com/janus\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        iceServers\n                    \n                \n                \n                    \n                        Type :         IceServer[]\n\n                    \n                \n                \n                    \n                        Default value : [{urls: 'stun:stun2.l.google.com:19302'}]\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:122\n                            \n                        \n                \n                    \n                        STUN/TURN servers to use for the connection. These are passed directly to RTCPeerConnection\nRefer to the MDN Docs for details on the format.\nThe component will use a public STUN server if nothing is specified here. However, it's highly recommended that the user\ndeploy and use their own STUN/TURN server(s) for better reliability.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isMuted\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:134\n                            \n                        \n                \n                    \n                        When set to true, the user's audio is muted.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        pin\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:85\n                            \n                        \n                \n                    \n                        PIN for joining room. Must be specified if pin_required is true for the requested roomId.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        role\n                    \n                \n                \n                    \n                        Type :         JanusRole\n\n                    \n                \n                \n                    \n                        Default value : JanusRole.publisher\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:100\n                            \n                        \n                \n                    \n                        Role for the user in the videoroom.\nUsers can either be publishers or subscribers. Publishers will publish their video and audio to the room.\nSubscribers will see/hear all publishers, but won't broadcast anything.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        roomId\n                    \n                \n                \n                    \n                        Type :     string | number\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:63\n                            \n                        \n                \n                    \n                        Required Janus room id. Can be either a string or a number. This must match server configuration.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        userId\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:107\n                            \n                        \n                \n                    \n                        Numeric or string Id of publisher. Type must match server configuration. If not provided,\njanus server will automatically assign an ID to the user.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        userName\n                    \n                \n                \n                    \n                        Default value : 'janus user'\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:91\n                            \n                        \n                \n                    \n                        Display name for the user in the videoroom\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        videoRoomComponent\n                    \n                \n                \n                    \n                        Type :         VideoRoomComponent\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:148\n                            \n                        \n                \n                    \n                        Input/output devices to use. If not provided, will use the default system devices\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        wsUrl\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:71\n                            \n                        \n                \n                    \n                        URL for the websocket interface of the Janus server. At least one of wsUrl or httpUrl must be specified.\nExample: wss://janus.conf.meetecho.com/ws\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        janusError\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:154\n                            \n                        \n                \n                    \n                        Emits errors encountered. These errors are fatal.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        publishers\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:160\n                            \n                        \n                \n                    \n                        Emits list of current publishers whenever there is a change to the publisher list\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isMuted\n                    \n                \n\n\n                \n                    \n                        setisMuted(muted: boolean)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:134\n                                \n                            \n                    \n                        \n                                When set to true, the user's audio is muted.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            muted\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import * as moment from 'moment';\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core';\n\nimport { first, startWith, shareReplay, takeUntil, switchMap } from 'rxjs/operators';\nimport { Observable, Subject, combineLatest } from 'rxjs';\n\nimport {\n  Devices,\n  JanusRole,\n  PublishState,\n  Publisher,\n  RemoteFeed,\n  RemoteFeedState,\n  RoomInfo,\n  RoomInfoState,\n  IceServer,\n} from '../../models/janus.models';\n\nimport { VideoRoomComponent } from '../../models/video-room-wrapper.models';\n\nimport { JanusStore } from '../../store/janus.store';\nimport { JanusErrors, PublishOwnFeedEvent, RequestSubstreamEvent, AttachRemoteFeedEvent } from '../../models';\nimport { WebrtcService } from '../../services/janus.service';\n\n/**\n * Janus videoroom component. This is a high level component to easily embed a janus videoroom in any angular webapp.\n * There are many options that can be set through Inputs. However, you can get started with the minimal example below.\n * Refer to the {@link https://janus.conf.meetecho.com/docs/videoroom.html|Janus Videoroom Docs} for deploying your own\n * Janus media server.\n * @example\n * \n * \n *\n */\n@Component({\n  selector: 'janus-videoroom',\n  templateUrl: './janus-videoroom.component.html',\n  styleUrls: ['./janus-videoroom.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [JanusStore],\n})\nexport class JanusVideoroomComponent implements OnInit, OnDestroy, OnChanges {\n\n  /**\n   * *Required* Janus room id. Can be either a string or a number. This must match server configuration.\n   */\n  @Input()\n  roomId: string | number;\n\n  /**\n   * URL for the websocket interface of the Janus server. At least one of wsUrl or httpUrl must be specified.\n   *\n   * Example: `wss://janus.conf.meetecho.com/ws`\n   */\n  @Input()\n  wsUrl: string;\n\n  /**\n   * URL for the http(s) interface of the Janus server. At least one of wsUrl or httpUrl must be specified.\n   *\n   * Example: `https://janus.conf.meetecho.com/janus`\n   */\n  @Input()\n  httpUrl: string;\n\n  /**\n   * PIN for joining room. Must be specified if `pin_required` is true for the requested roomId.\n   */\n  @Input()\n  pin?: string;\n\n  /**\n   * Display name for the user in the videoroom\n   */\n  @Input()\n  userName = 'janus user';\n\n  /**\n   * Role for the user in the videoroom.\n   *\n   * Users can either be publishers or subscribers. Publishers will publish their video and audio to the room.\n   * Subscribers will see/hear all publishers, but won't broadcast anything.\n   */\n  @Input()\n  role: JanusRole = JanusRole.publisher;\n\n  /**\n   * Numeric or string Id of publisher. Type must match server configuration. If not provided,\n   * janus server will automatically assign an ID to the user.\n   */\n  @Input()\n  userId?: string;\n\n  /**\n   * Input/output devices to use. If not provided, will use the default system devices\n   */\n  @Input()\n  devices?: Devices;\n\n  /**\n   * STUN/TURN servers to use for the connection. These are passed directly to `RTCPeerConnection`\n   * Refer to the {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer|MDN Docs} for details on the format.\n   * The component will use a public STUN server if nothing is specified here. However, it's highly recommended that the user\n   * deploy and use their own STUN/TURN server(s) for better reliability.\n   */\n  @Input()\n  iceServers: IceServer[] = [{urls: 'stun:stun2.l.google.com:19302'}];\n\n  /**\n   * Component to use for implementing the video room\n   */\n  @Input()\n  component: VideoRoomComponent;\n\n  /**\n   * When set to true, the user's audio is muted.\n   */\n  @Input()\n  set isMuted(muted: boolean) {\n    this.muted = muted;\n    this._setMuted(muted);\n  }\n\n  /**\n   * @ignore\n   */\n  get isMuted(): boolean { return this.muted; }\n\n  /**\n   * Input/output devices to use. If not provided, will use the default system devices\n   */\n  @Input()\n  videoRoomComponent?: VideoRoomComponent;\n\n  /**\n   * Emits errors encountered. These errors are fatal.\n   */\n  @Output()\n  janusError = new EventEmitter();\n\n  /**\n   * Emits list of current publishers whenever there is a change to the publisher list\n   */\n  @Output()\n  publishers = new EventEmitter();\n\n  /** @internal */\n  roomInfo$: Observable;\n  /** @internal */\n  remoteFeeds$: Observable;\n\n  /** @internal */\n  @ViewChild('container')\n  container: ElementRef;\n\n  /** @internal */\n  showDefaultRoom = false;\n\n  private muted = false;\n  private destroy$ = new Subject();\n  private janusServerUrl: string;\n\n  constructor(\n    private readonly janusStore: JanusStore,\n    private webrtc: WebrtcService,\n  ) { }\n\n  async ngOnInit(): Promise {\n    // Initialize variables and load the room/user\n\n    this.janusServerUrl = this.wsUrl ? this.wsUrl : this.httpUrl;\n\n    this.remoteFeeds$ = this.janusStore.remoteFeeds$.pipe(shareReplay(1));\n\n    this.roomInfo$ = this.janusStore.roomInfo$.pipe(\n      shareReplay(1)\n    );\n\n    // @ts-ignore\n    if (window.Cypress) {\n      // @ts-ignore\n      window.janusStore = this.janusStore;\n    }\n\n    // This ensures that the user has already granted all permissions before we\n    // start setting up the videoroom. Otherwise there are a lot of weird race\n    // conditions to consider. I don't love this because it doesn't handle the\n    // situation where a custom videoroom doesn't require permissions for any\n    // capture devices. However, that's probably not a common use case.\n    if (!this.devices) {\n      this.devices = await this.webrtc.getDefaultDevices();\n    }\n    const stream = await this.webrtc.getUserMedia('', '');\n    this.webrtc.clearMediaStream(stream);\n    this.setupJanusRoom();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  ngOnChanges(changes): void {\n    // For some changes, we refresh the entire session from scratch\n\n    const resetKeys = [\n      'roomId',\n      'wsUrl',\n      'httpUrl',\n      'iceServers',\n      'pin',\n      'role',\n      'userName',\n      'userId',\n      'component',\n    ];\n\n    for (const key of resetKeys) {\n      if (\n        key in changes\n        && !changes[key].firstChange\n      ) {\n        this.janusServerUrl = this.wsUrl ? this.wsUrl : this.httpUrl;\n        this.janusStore.reset(this.iceServers);\n        break;\n      }\n    }\n  }\n\n  /** @internal */\n  _setMuted(muted: boolean): void {\n    this.janusStore.setMute(muted);\n  }\n\n  /** @internal */\n  emitRemoteFeeds(remoteFeeds: RemoteFeed[]): void {\n    const publishers: Publisher[] = remoteFeeds.filter((feed) => feed.state === RemoteFeedState.ready);\n    this.publishers.emit(publishers);\n  }\n\n  /** @internal */\n  setupJanusRoom(): void {\n    // Setup comms with janus server\n\n    this.janusStore.initialize(this.iceServers);\n\n    this.janusStore.state$.pipe(\n      takeUntil(this.destroy$),\n    ).subscribe(({roomInfo, remoteFeeds}) => {\n\n      const pin = this.pin ? this.pin : null;\n      const remoteFeedsArray = Object.keys(remoteFeeds).map(id => remoteFeeds[id]);\n      if (roomInfo.muted !== this.muted && roomInfo.publishState === PublishState.publishing) {\n        this._setMuted(this.muted);\n      }\n      if (roomInfo.publishState === PublishState.error) {\n        const message = JanusErrors[roomInfo.errorCode].message;\n        this.janusError.emit({code: roomInfo.errorCode, message});\n      }\n\n      this.emitRemoteFeeds(remoteFeedsArray);\n\n      switch (roomInfo.state) {\n        case RoomInfoState.initialized: {\n          this.janusStore.attachVideoRoom(this.janusServerUrl);\n          break;\n        }\n        case RoomInfoState.attached: {\n          this.janusStore.register({\n            name: this.userName,\n            userId: this.userId,\n            roomId: this.roomId,\n            pin,\n          });\n          break;\n        }\n        case RoomInfoState.attach_failed: {\n          if (this.janusServerUrl !== this.httpUrl) {\n            this.janusServerUrl = this.httpUrl;\n            setTimeout(() => {\n              this.janusStore.attachVideoRoom(this.janusServerUrl);\n            }, 100);\n          } else {\n            this.janusError.emit({code: 9999, message: 'Unable to connect to media server'});\n          }\n          break;\n        }\n      }\n    });\n  }\n\n  /** @internal */\n  onPublishOwnFeed(event: PublishOwnFeedEvent): void {\n    this.janusStore.publishOwnFeed(event);\n  }\n\n  /** @internal */\n  onRequestSubstream(event: RequestSubstreamEvent): void {\n    this.janusStore.requestSubstream(event);\n  }\n\n  /** @internal */\n  onAttachRemoteFeed(event: AttachRemoteFeedEvent): void {\n    // Attach remote feeds\n\n    const pin = this.pin ? this.pin : null;\n    const { feed, roomInfo } = event;\n    this.janusStore.attachRemoteFeed({\n      feed,\n      roomInfo,\n      pin,\n    });\n  }\n}\n\n    \n\n    \n        \n\n    \n\n    \n                \n                    ./janus-videoroom.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AudioBoxComponent', 'selector': 'janus-nvid-audio-box'},{'name': 'DefaultVideoRoomComponent', 'selector': 'janus-default-video-room'},{'name': 'DeviceSelectorComponent', 'selector': 'janus-device-selector'},{'name': 'JanusVideoroomComponent', 'selector': 'janus-videoroom'},{'name': 'SelfVideoComponent', 'selector': 'janus-self-video'},{'name': 'VideoBoxComponent', 'selector': 'janus-video-box'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'JanusVideoroomComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PublishOwnFeedEvent.html":{"url":"interfaces/PublishOwnFeedEvent.html","title":"interface - PublishOwnFeedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PublishOwnFeedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/video-room-wrapper.models.ts\n        \n\n            \n                Description\n            \n            \n                Data for the publishOwnFeed event emitted by a videoroom. This event will\ntell the system to start publishing the local feed of the user. By default,\nyou can specify an audioDeviceId and videoDeviceId and the system will capture\nvideo/audio from those devices. Alternatively, if skipVideoCapture is set to\ntrue, the stream from the canvas element will be published without audio. The\nvideoroom will take full responsibility for drawing to the canvas element\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        audioDeviceId\n                                \n                                \n                                        canvasId\n                                \n                                \n                                        skipVideoCapture\n                                \n                                \n                                        videoDeviceId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audioDeviceId\n                                    \n                                \n                                \n                                    \n                                        audioDeviceId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Device ID for the microphone. ID matches what is returned by navigator.mediaDevics.enumerateDevices \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        canvasId\n                                    \n                                \n                                \n                                    \n                                        canvasId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    HTML ID of the canvas element. Must exist in all use cases, even not drawing on\nthe canvas manually. If document.getElementById([canvasId]) does not return a canvas\nelement, this will fail\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        skipVideoCapture\n                                    \n                                \n                                \n                                    \n                                        skipVideoCapture:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    If true, directs the service to not setup a video element. It will instead transmit\na video stream from the canvas element\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        videoDeviceId\n                                    \n                                \n                                \n                                    \n                                        videoDeviceId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Device ID for the camera. ID matches what is returned by navigator.mediaDevics.enumerateDevices \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { EventEmitter, } from '@angular/core';\n\nimport {\n  Devices,\n  JanusRole,\n  RemoteFeed,\n  RoomInfo,\n} from './janus.models';\n\n\n/**\n * Data for the publishOwnFeed event emitted by a videoroom. This event will\n * tell the system to start publishing the local feed of the user. By default,\n * you can specify an audioDeviceId and videoDeviceId and the system will capture\n * video/audio from those devices. Alternatively, if skipVideoCapture is set to\n * true, the stream from the canvas element will be published without audio. The\n * videoroom will take full responsibility for drawing to the canvas element\n */\nexport interface PublishOwnFeedEvent {\n\n  /** Device ID for the microphone. ID matches what is returned by `navigator.mediaDevics.enumerateDevices` */\n  audioDeviceId: string;\n\n  /** Device ID for the camera. ID matches what is returned by `navigator.mediaDevics.enumerateDevices` */\n  videoDeviceId: string;\n\n  /** HTML ID of the canvas element. Must exist in all use cases, even not drawing on\n   * the canvas manually. If document.getElementById([canvasId]) does not return a canvas\n   * element, this will fail\n   */\n  canvasId: string;\n\n  /** If true, directs the service to not setup a video element. It will instead transmit\n   * a video stream from the canvas element\n   */\n  skipVideoCapture: boolean;\n}\n\n\n/** Data for the requestSubstream event. The event is used to request different\n * substreams when the publisher is using multicast, which is the default.\n */\nexport interface RequestSubstreamEvent {\n  /** Remote feed that we're requesting a different substream for. */\n  feed: RemoteFeed;\n\n  /** The integer id of the stream to request. */\n  substreamId: number;\n}\n\n/** Data for the attachRemoteFeedEvent. The event will negotiate a connection to\n * receive the remote stream. This must be called on each remote feed the user wishes\n * to receive.\n */\nexport interface AttachRemoteFeedEvent {\n  /** Remote feed that we're requesting. The stream must be in the `RemoteFeedState.initialized` state. */\n  feed: RemoteFeed;\n\n  /** Room info object for the room the remote feed belongs to. */\n  roomInfo: RoomInfo;\n}\n\n/**\n * Interface for customer video room component\n *\n * Any provided custom video room must implement this interface. You need not use all of the\n * data if your use case doesn't require it. For example, a room might be publish only, in which\n * case the remoteFeeds can be ignored\n */\nexport interface VideoRoomComponent {\n\n  /** roomInfo object */\n  roomInfo: RoomInfo;\n\n  /** Role of the user */\n  role: JanusRole;\n\n  /** Which devices to user */\n  devices?: Devices;\n\n  /** List of available feeds */\n  remoteFeeds: RemoteFeed[];\n\n  /** Event to request a different substream */\n  requestSubstream: EventEmitter;\n\n  /** Event to publish a locally collected feed */\n  publishOwnFeed: EventEmitter;\n\n  /** Event to subscribe to another publisher's feed */\n  attachRemoteFeed: EventEmitter;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Publisher.html":{"url":"interfaces/Publisher.html","title":"interface - Publisher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Publisher\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/janus.models.ts\n        \n\n            \n                Description\n            \n            \n                Information for a publisher. Note that the volume/mute information is not\nvery practical in how it's implemented in janus currently. In order to get\nmeaningful information about talking/not talking, you'll need to know the\naverage background noise level of each publisher ahead of time. This is\nspecified at audio_level_average in the room. This isn't practical if you\ndon't know the publisher's system setup ahead of time. We set the\naudio_level_average to 127 in the backend configuration. That makes the\nstart/stop talking events good for knowing if the remote user has muted.\nYou might want to ignore this information depending on your use case.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        displayName\n                                \n                                \n                                        id\n                                \n                                \n                                        muted\n                                \n                                \n                                        volume\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Display name of the publisher \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Janus ID of the publisher \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        muted\n                                    \n                                \n                                \n                                    \n                                        muted:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Set to true iff the last volume event had the volume at 127 \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        volume\n                                    \n                                \n                                \n                                    \n                                        volume:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current volume of the publisher's audio. See notes in the interface description.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as moment from 'moment';\n\n/**\n * Device specifications\n */\nexport interface Devices {\n  /** Microphone Device ID */\n  audioDeviceId: string;\n\n  /** Camera Device ID */\n  videoDeviceId: string;\n\n  /** Speaker Device ID */\n  speakerDeviceId: string;\n}\n\n/**\n * Room state machine\n */\nexport enum RoomInfoState {\n  start = 'start',\n  initializing = 'initializing',\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  attach_failed = 'attach_failed',\n  joining = 'joining',\n\n  /** Once joined, you can start publishing */\n  joined = 'joined',\n  error = 'error',\n}\n\n/**\n * Current publish status\n */\nexport enum PublishState {\n  start = 'start',\n  ready = 'ready',\n  publishRequested = 'publish requested',\n  publishing = 'publishing',\n  error = 'error',\n}\n\n/**\n * Metadata for a room\n */\nexport interface RoomInfo {\n\n  /** State of the room */\n  state: RoomInfoState;\n\n  /** roomId */\n  id: string;\n\n  /** Description of the room */\n  description: string;\n\n  /** private_id assigned by janus */\n  privateId: number;\n\n  /** Value passed back in \"joined\" message */\n  otherRoomId: number;  // This comes back in the \"joined\" message. Not sure what to use it for\n\n  /** Set to error code if there was an error in the room */\n  errorCode: number;\n\n  /** Local publishing state */\n  publishState: PublishState;\n\n  /** @internal Internal stream id */\n  localStreamId: string;\n\n  /** True iff the audio is muted */\n  muted: boolean;\n}\n\n/**\n * Remote feed state machine\n */\nexport enum RemoteFeedState {\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  ready = 'ready',\n  error = 'error',\n}\n\n/**\n * Current state of a remote feed\n * There exists a remote feed object for each available publisher in the video\n * room. It's possible to attach to these\n */\nexport interface RemoteFeed {\n  /** Current state of the feed */\n  state: RemoteFeedState;\n\n  /** Id of the publisher */\n  id: string;\n\n  /** @internal */\n  streamId: string;\n\n  /** number of video tracks available */\n  numVideoTracks: number;\n\n  /** Substream requested */\n  requestedSubstream: number;\n\n  /** Substream currently being received */\n  currentSubstream: number;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /** @internal */\n  audio_codec: string;\n\n  /** @internal */\n  video_codec: string;\n\n  /** @internal */\n  volume: number;\n\n  /** @internal */\n  muted: boolean;\n\n  /** timestamp of most recent slowLink event on this feed */\n  slowLink: moment.Moment;\n}\n\n/**\n * Information for a publisher. Note that the volume/mute information is not\n * very practical in how it's implemented in janus currently. In order to get\n * meaningful information about talking/not talking, you'll need to know the\n * average background noise level of each publisher ahead of time. This is\n * specified at `audio_level_average` in the room. This isn't practical if you\n * don't know the publisher's system setup ahead of time. We set the\n * `audio_level_average` to 127 in the backend configuration. That makes the\n * start/stop talking events good for knowing if the remote user has muted.\n * You might want to ignore this information depending on your use case.\n */\nexport interface Publisher {\n\n  /** Janus ID of the publisher */\n  id: string;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /**\n   * Current volume of the publisher's audio. See notes in the interface description.\n   */\n  volume: number;\n\n  /** Set to true iff the last volume event had the volume at 127 */\n  muted: boolean;\n}\n\n/**\n * Possible roles for a user.\n */\nexport enum JanusRole {\n  /** A user in this role will publish their audio/video and see/hear all other publishers */\n  publisher = 'publisher',\n\n  /** A user in this role will *not* publish their audio/video. They will still see/hear all other publishers */\n  listener = 'listener',\n}\n\n/**\n * IceServer configuration. More details are in the {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer|MDN Docs}\n */\nexport interface IceServer {\n  urls: string;\n  username?: string;\n  credential?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RemoteFeed.html":{"url":"interfaces/RemoteFeed.html","title":"interface - RemoteFeed","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RemoteFeed\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/janus.models.ts\n        \n\n            \n                Description\n            \n            \n                Current state of a remote feed\nThere exists a remote feed object for each available publisher in the video\nroom. It's possible to attach to these\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        currentSubstream\n                                \n                                \n                                        displayName\n                                \n                                \n                                        id\n                                \n                                \n                                        numVideoTracks\n                                \n                                \n                                        requestedSubstream\n                                \n                                \n                                        slowLink\n                                \n                                \n                                        state\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        currentSubstream\n                                    \n                                \n                                \n                                    \n                                        currentSubstream:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Substream currently being received \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Display name of the publisher \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Id of the publisher \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        numVideoTracks\n                                    \n                                \n                                \n                                    \n                                        numVideoTracks:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    number of video tracks available \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requestedSubstream\n                                    \n                                \n                                \n                                    \n                                        requestedSubstream:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Substream requested \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        slowLink\n                                    \n                                \n                                \n                                    \n                                        slowLink:     moment.Moment\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     moment.Moment\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    timestamp of most recent slowLink event on this feed \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                    \n                                \n                                \n                                    \n                                        state:         RemoteFeedState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RemoteFeedState\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current state of the feed \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as moment from 'moment';\n\n/**\n * Device specifications\n */\nexport interface Devices {\n  /** Microphone Device ID */\n  audioDeviceId: string;\n\n  /** Camera Device ID */\n  videoDeviceId: string;\n\n  /** Speaker Device ID */\n  speakerDeviceId: string;\n}\n\n/**\n * Room state machine\n */\nexport enum RoomInfoState {\n  start = 'start',\n  initializing = 'initializing',\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  attach_failed = 'attach_failed',\n  joining = 'joining',\n\n  /** Once joined, you can start publishing */\n  joined = 'joined',\n  error = 'error',\n}\n\n/**\n * Current publish status\n */\nexport enum PublishState {\n  start = 'start',\n  ready = 'ready',\n  publishRequested = 'publish requested',\n  publishing = 'publishing',\n  error = 'error',\n}\n\n/**\n * Metadata for a room\n */\nexport interface RoomInfo {\n\n  /** State of the room */\n  state: RoomInfoState;\n\n  /** roomId */\n  id: string;\n\n  /** Description of the room */\n  description: string;\n\n  /** private_id assigned by janus */\n  privateId: number;\n\n  /** Value passed back in \"joined\" message */\n  otherRoomId: number;  // This comes back in the \"joined\" message. Not sure what to use it for\n\n  /** Set to error code if there was an error in the room */\n  errorCode: number;\n\n  /** Local publishing state */\n  publishState: PublishState;\n\n  /** @internal Internal stream id */\n  localStreamId: string;\n\n  /** True iff the audio is muted */\n  muted: boolean;\n}\n\n/**\n * Remote feed state machine\n */\nexport enum RemoteFeedState {\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  ready = 'ready',\n  error = 'error',\n}\n\n/**\n * Current state of a remote feed\n * There exists a remote feed object for each available publisher in the video\n * room. It's possible to attach to these\n */\nexport interface RemoteFeed {\n  /** Current state of the feed */\n  state: RemoteFeedState;\n\n  /** Id of the publisher */\n  id: string;\n\n  /** @internal */\n  streamId: string;\n\n  /** number of video tracks available */\n  numVideoTracks: number;\n\n  /** Substream requested */\n  requestedSubstream: number;\n\n  /** Substream currently being received */\n  currentSubstream: number;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /** @internal */\n  audio_codec: string;\n\n  /** @internal */\n  video_codec: string;\n\n  /** @internal */\n  volume: number;\n\n  /** @internal */\n  muted: boolean;\n\n  /** timestamp of most recent slowLink event on this feed */\n  slowLink: moment.Moment;\n}\n\n/**\n * Information for a publisher. Note that the volume/mute information is not\n * very practical in how it's implemented in janus currently. In order to get\n * meaningful information about talking/not talking, you'll need to know the\n * average background noise level of each publisher ahead of time. This is\n * specified at `audio_level_average` in the room. This isn't practical if you\n * don't know the publisher's system setup ahead of time. We set the\n * `audio_level_average` to 127 in the backend configuration. That makes the\n * start/stop talking events good for knowing if the remote user has muted.\n * You might want to ignore this information depending on your use case.\n */\nexport interface Publisher {\n\n  /** Janus ID of the publisher */\n  id: string;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /**\n   * Current volume of the publisher's audio. See notes in the interface description.\n   */\n  volume: number;\n\n  /** Set to true iff the last volume event had the volume at 127 */\n  muted: boolean;\n}\n\n/**\n * Possible roles for a user.\n */\nexport enum JanusRole {\n  /** A user in this role will publish their audio/video and see/hear all other publishers */\n  publisher = 'publisher',\n\n  /** A user in this role will *not* publish their audio/video. They will still see/hear all other publishers */\n  listener = 'listener',\n}\n\n/**\n * IceServer configuration. More details are in the {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer|MDN Docs}\n */\nexport interface IceServer {\n  urls: string;\n  username?: string;\n  credential?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestSubstreamEvent.html":{"url":"interfaces/RequestSubstreamEvent.html","title":"interface - RequestSubstreamEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RequestSubstreamEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/video-room-wrapper.models.ts\n        \n\n            \n                Description\n            \n            \n                Data for the requestSubstream event. The event is used to request different\nsubstreams when the publisher is using multicast, which is the default.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        feed\n                                \n                                \n                                        substreamId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        feed\n                                    \n                                \n                                \n                                    \n                                        feed:         RemoteFeed\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RemoteFeed\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Remote feed that we're requesting a different substream for. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        substreamId\n                                    \n                                \n                                \n                                    \n                                        substreamId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The integer id of the stream to request. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { EventEmitter, } from '@angular/core';\n\nimport {\n  Devices,\n  JanusRole,\n  RemoteFeed,\n  RoomInfo,\n} from './janus.models';\n\n\n/**\n * Data for the publishOwnFeed event emitted by a videoroom. This event will\n * tell the system to start publishing the local feed of the user. By default,\n * you can specify an audioDeviceId and videoDeviceId and the system will capture\n * video/audio from those devices. Alternatively, if skipVideoCapture is set to\n * true, the stream from the canvas element will be published without audio. The\n * videoroom will take full responsibility for drawing to the canvas element\n */\nexport interface PublishOwnFeedEvent {\n\n  /** Device ID for the microphone. ID matches what is returned by `navigator.mediaDevics.enumerateDevices` */\n  audioDeviceId: string;\n\n  /** Device ID for the camera. ID matches what is returned by `navigator.mediaDevics.enumerateDevices` */\n  videoDeviceId: string;\n\n  /** HTML ID of the canvas element. Must exist in all use cases, even not drawing on\n   * the canvas manually. If document.getElementById([canvasId]) does not return a canvas\n   * element, this will fail\n   */\n  canvasId: string;\n\n  /** If true, directs the service to not setup a video element. It will instead transmit\n   * a video stream from the canvas element\n   */\n  skipVideoCapture: boolean;\n}\n\n\n/** Data for the requestSubstream event. The event is used to request different\n * substreams when the publisher is using multicast, which is the default.\n */\nexport interface RequestSubstreamEvent {\n  /** Remote feed that we're requesting a different substream for. */\n  feed: RemoteFeed;\n\n  /** The integer id of the stream to request. */\n  substreamId: number;\n}\n\n/** Data for the attachRemoteFeedEvent. The event will negotiate a connection to\n * receive the remote stream. This must be called on each remote feed the user wishes\n * to receive.\n */\nexport interface AttachRemoteFeedEvent {\n  /** Remote feed that we're requesting. The stream must be in the `RemoteFeedState.initialized` state. */\n  feed: RemoteFeed;\n\n  /** Room info object for the room the remote feed belongs to. */\n  roomInfo: RoomInfo;\n}\n\n/**\n * Interface for customer video room component\n *\n * Any provided custom video room must implement this interface. You need not use all of the\n * data if your use case doesn't require it. For example, a room might be publish only, in which\n * case the remoteFeeds can be ignored\n */\nexport interface VideoRoomComponent {\n\n  /** roomInfo object */\n  roomInfo: RoomInfo;\n\n  /** Role of the user */\n  role: JanusRole;\n\n  /** Which devices to user */\n  devices?: Devices;\n\n  /** List of available feeds */\n  remoteFeeds: RemoteFeed[];\n\n  /** Event to request a different substream */\n  requestSubstream: EventEmitter;\n\n  /** Event to publish a locally collected feed */\n  publishOwnFeed: EventEmitter;\n\n  /** Event to subscribe to another publisher's feed */\n  attachRemoteFeed: EventEmitter;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RoomInfo.html":{"url":"interfaces/RoomInfo.html","title":"interface - RoomInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RoomInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/janus.models.ts\n        \n\n            \n                Description\n            \n            \n                Metadata for a room\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        description\n                                \n                                \n                                        errorCode\n                                \n                                \n                                        id\n                                \n                                \n                                        muted\n                                \n                                \n                                        otherRoomId\n                                \n                                \n                                        privateId\n                                \n                                \n                                        publishState\n                                \n                                \n                                        state\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Description of the room \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorCode\n                                    \n                                \n                                \n                                    \n                                        errorCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Set to error code if there was an error in the room \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    roomId \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        muted\n                                    \n                                \n                                \n                                    \n                                        muted:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    True iff the audio is muted \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        otherRoomId\n                                    \n                                \n                                \n                                    \n                                        otherRoomId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Value passed back in \"joined\" message \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        privateId\n                                    \n                                \n                                \n                                    \n                                        privateId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    private_id assigned by janus \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publishState\n                                    \n                                \n                                \n                                    \n                                        publishState:         PublishState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PublishState\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Local publishing state \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                    \n                                \n                                \n                                    \n                                        state:         RoomInfoState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RoomInfoState\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    State of the room \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as moment from 'moment';\n\n/**\n * Device specifications\n */\nexport interface Devices {\n  /** Microphone Device ID */\n  audioDeviceId: string;\n\n  /** Camera Device ID */\n  videoDeviceId: string;\n\n  /** Speaker Device ID */\n  speakerDeviceId: string;\n}\n\n/**\n * Room state machine\n */\nexport enum RoomInfoState {\n  start = 'start',\n  initializing = 'initializing',\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  attach_failed = 'attach_failed',\n  joining = 'joining',\n\n  /** Once joined, you can start publishing */\n  joined = 'joined',\n  error = 'error',\n}\n\n/**\n * Current publish status\n */\nexport enum PublishState {\n  start = 'start',\n  ready = 'ready',\n  publishRequested = 'publish requested',\n  publishing = 'publishing',\n  error = 'error',\n}\n\n/**\n * Metadata for a room\n */\nexport interface RoomInfo {\n\n  /** State of the room */\n  state: RoomInfoState;\n\n  /** roomId */\n  id: string;\n\n  /** Description of the room */\n  description: string;\n\n  /** private_id assigned by janus */\n  privateId: number;\n\n  /** Value passed back in \"joined\" message */\n  otherRoomId: number;  // This comes back in the \"joined\" message. Not sure what to use it for\n\n  /** Set to error code if there was an error in the room */\n  errorCode: number;\n\n  /** Local publishing state */\n  publishState: PublishState;\n\n  /** @internal Internal stream id */\n  localStreamId: string;\n\n  /** True iff the audio is muted */\n  muted: boolean;\n}\n\n/**\n * Remote feed state machine\n */\nexport enum RemoteFeedState {\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  ready = 'ready',\n  error = 'error',\n}\n\n/**\n * Current state of a remote feed\n * There exists a remote feed object for each available publisher in the video\n * room. It's possible to attach to these\n */\nexport interface RemoteFeed {\n  /** Current state of the feed */\n  state: RemoteFeedState;\n\n  /** Id of the publisher */\n  id: string;\n\n  /** @internal */\n  streamId: string;\n\n  /** number of video tracks available */\n  numVideoTracks: number;\n\n  /** Substream requested */\n  requestedSubstream: number;\n\n  /** Substream currently being received */\n  currentSubstream: number;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /** @internal */\n  audio_codec: string;\n\n  /** @internal */\n  video_codec: string;\n\n  /** @internal */\n  volume: number;\n\n  /** @internal */\n  muted: boolean;\n\n  /** timestamp of most recent slowLink event on this feed */\n  slowLink: moment.Moment;\n}\n\n/**\n * Information for a publisher. Note that the volume/mute information is not\n * very practical in how it's implemented in janus currently. In order to get\n * meaningful information about talking/not talking, you'll need to know the\n * average background noise level of each publisher ahead of time. This is\n * specified at `audio_level_average` in the room. This isn't practical if you\n * don't know the publisher's system setup ahead of time. We set the\n * `audio_level_average` to 127 in the backend configuration. That makes the\n * start/stop talking events good for knowing if the remote user has muted.\n * You might want to ignore this information depending on your use case.\n */\nexport interface Publisher {\n\n  /** Janus ID of the publisher */\n  id: string;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /**\n   * Current volume of the publisher's audio. See notes in the interface description.\n   */\n  volume: number;\n\n  /** Set to true iff the last volume event had the volume at 127 */\n  muted: boolean;\n}\n\n/**\n * Possible roles for a user.\n */\nexport enum JanusRole {\n  /** A user in this role will publish their audio/video and see/hear all other publishers */\n  publisher = 'publisher',\n\n  /** A user in this role will *not* publish their audio/video. They will still see/hear all other publishers */\n  listener = 'listener',\n}\n\n/**\n * IceServer configuration. More details are in the {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer|MDN Docs}\n */\nexport interface IceServer {\n  urls: string;\n  username?: string;\n  credential?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SelfVideoComponent.html":{"url":"components/SelfVideoComponent.html","title":"component - SelfVideoComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SelfVideoComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/components/self-video/self-video.component.ts\n\n\n    \n        Description\n    \n    \n        Component for rendering video captured from a local device. Component both renders\nthe video and emits events to publish it to the janus server\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                janus-self-video\n            \n\n            \n                styleUrls\n                ./self-video.component.scss,../../styles/video-styles.scss\n            \n\n\n\n            \n                templateUrl\n                ./self-video.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                devices\n                            \n                            \n                                roomInfo\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                publishOwnFeed\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    devices\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/lib/components/self-video/self-video.component.ts:53\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n                \n                    \n                        Type :         Devices\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/self-video/self-video.component.ts:41\n                            \n                        \n                \n                    \n                        Devices to capture \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        roomInfo\n                    \n                \n                \n                    \n                        Type :         RoomInfo\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/self-video/self-video.component.ts:37\n                            \n                        \n                \n                    \n                        roomInfo object. Component will raise a fatal error if the state\nis not RoomInfoState.joined\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        publishOwnFeed\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/self-video/self-video.component.ts:49\n                            \n                        \n                \n                    \n                        Event to publish the local stream \n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n\n\n                \n                    \n                        setdevices(devices)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/components/self-video/self-video.component.ts:42\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            devices\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output\n} from '@angular/core';\n\nimport {\n  Devices,\n  PublishOwnFeedEvent,\n  PublishState,\n  RoomInfo,\n  RoomInfoState,\n} from '../../models';\n\n/**\n * Component for rendering video captured from a local device. Component both renders\n * the video and emits events to publish it to the janus server\n */\n@Component({\n  selector: 'janus-self-video',\n  templateUrl: './self-video.component.html',\n  styleUrls: [\n    './self-video.component.scss',\n    '../../styles/video-styles.scss',\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelfVideoComponent implements OnInit, AfterViewInit {\n\n  /** roomInfo object. Component will raise a fatal error if the state\n   * is not `RoomInfoState.joined`\n   */\n  @Input() roomInfo: RoomInfo;\n\n  /** Devices to capture */\n  @Input()\n  get devices(): Devices { return this.currentDevices; }\n  set devices(devices) {\n    this.onDevicesChange(this.currentDevices, devices);\n    this.currentDevices = devices;\n  }\n\n  /** Event to publish the local stream */\n  @Output()\n  publishOwnFeed = new EventEmitter();\n\n  private currentDevices: Devices;\n  private devicesInitialized = false;\n  private afterViewInitRan = false;\n\n  constructor() { }\n\n  ngOnInit(): void { }\n\n  async ngAfterViewInit(): Promise {\n    // Attach the canvas-self element\n    this.afterViewInitRan = true;\n    if (this.roomInfo.state !== RoomInfoState.joined) {\n      throw new Error('RoomInfo.state must be \"joined\" before creating a self-video component');\n    }\n\n    const audioDeviceId = this.devices ? this.devices.audioDeviceId : null;\n    const videoDeviceId = this.devices ? this.devices.videoDeviceId : null;\n    this._publishOwnFeed(audioDeviceId, videoDeviceId);\n  }\n\n  /** @internal */\n  _publishOwnFeed(audioDeviceId: string, videoDeviceId: string): void {\n    // Separate this for testing\n    this.publishOwnFeed.emit({\n      audioDeviceId,\n      videoDeviceId,\n      canvasId: 'canvas-self',\n      skipVideoCapture: false,\n    });\n  }\n\n  /** @internal */\n  onDevicesChange(previousDevices: Devices, newDevices: Devices): void {\n    if (!newDevices) {\n      return;\n    }\n\n    /* Minor dragon:\n     * publishOwnFeed won't work unless we know the devices **and** the canvas element already exists.\n     * Therefore, the first call to publishOwnFeed comes in ngAfterViewInit. After the first publish, we\n     * can adjust the devices in onDevicesChange.\n     */\n    if (!this.afterViewInitRan) {\n      // Haven't loaded yet\n      return;\n    }\n\n    if (\n      newDevices\n      && previousDevices\n      && newDevices.videoDeviceId === previousDevices.videoDeviceId\n      && newDevices.audioDeviceId === previousDevices.audioDeviceId\n    ) {\n      // Same capture devices. nothing to do here\n      return;\n    }\n\n    // There still exists a tiny race condition here. If the user changes the deviceId between a publishOwnFeed\n    // call in ngAfterViewInit and before the publish is complete, that change won't be registered :/\n    if (this.roomInfo.publishState === PublishState.publishRequested) {\n      return;\n    }\n    this._publishOwnFeed(newDevices.audioDeviceId, newDevices.videoDeviceId);\n  }\n}\n\n    \n\n    \n        \n  \n    \n  \n\n\n    \n\n    \n                \n                    ./self-video.component.scss\n                \n                ul.filter-list {\n    padding: 0;\n    margin: 0;\n\n    li {\n        display: block;\n    }\n\n    img.active {\n        border: 1px solid white;\n    }\n\n    img:hover {\n        border: 1px solid #ccc;\n    }\n}\n\ndiv.filter-box {\n    img {\n        width: 25px;\n        height: 25px;\n        cursor: pointer;\n        border-radius: 5px;\n        padding: 3px;\n        border: 1px solid rgba(0,0,0,0);    // Prevents resizing when adding a visible border\n    }\n\n    padding: 2px !important;\n}\n\n                \n                    ../../styles/video-styles.scss\n                \n                div.video-container {\n    height: 100%;\n\n    video,canvas {\n        height: 100%;\n        width: 100%;\n        font-size: 0px;\n        display: block;\n        object-fit: fill;\n    }\n\n    canvas {\n        transform: scaleX(-1);\n    }\n    video {\n        /* border: 1px solid rgba(0,0,0,.5); */\n    }\n\n    div.interior-box {\n        height: 100%;\n        position: relative;\n        border: 1px solid rgba(0,0,0,.5);\n    }\n\n    div.self {\n        border: 1px solid #8ae010;\n    }\n\n    div.overlay {\n        position: absolute;\n        top: 1px;\n        left: 1px;\n        padding: 5px;\n        background-color: rgba(53,53,53,.7);\n\n        font-family: OpenSans;\n        font-size: 16px;\n        font-weight: 600;\n        font-stretch: normal;\n        font-style: normal;\n        line-height: normal;\n        letter-spacing: -0.24px;\n        color: #ffffff;\n    }\n}\n\ndiv.loading-blocker {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(255, 255, 255, .85);\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    p {\n        font-size: 24px;\n        color: #777;\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        '\n    var COMPONENTS = [{'name': 'AudioBoxComponent', 'selector': 'janus-nvid-audio-box'},{'name': 'DefaultVideoRoomComponent', 'selector': 'janus-default-video-room'},{'name': 'DeviceSelectorComponent', 'selector': 'janus-device-selector'},{'name': 'JanusVideoroomComponent', 'selector': 'janus-videoroom'},{'name': 'SelfVideoComponent', 'selector': 'janus-self-video'},{'name': 'VideoBoxComponent', 'selector': 'janus-video-box'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SelfVideoComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/VideoBoxComponent.html":{"url":"components/VideoBoxComponent.html","title":"component - VideoBoxComponent","body":"\n                   \n\n\n\n\n\n  Components\n  VideoBoxComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/components/video-box/video-box.component.ts\n\n\n    \n        Description\n    \n    \n        Component for rendering an audio/video stream received from a remote publisher\nIn addition to rendering the video content, this will keep track of the streaming\nperformance and request higher/lower bitrate streams when simulcast is available.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnChanges\n                    OnDestroy\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                janus-video-box\n            \n\n            \n                styleUrls\n                ./video-box.component.scss,../../styles/video-styles.scss\n            \n\n\n\n            \n                templateUrl\n                ./video-box.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                videoQualityHelper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                monitorVideoQuality\n                            \n                            \n                                onDeviceChange\n                            \n                            \n                                onMaximize\n                            \n                            \n                                setupSubscriptions\n                            \n                            \n                                switchSubstream\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                devices\n                            \n                            \n                                mode\n                            \n                            \n                                remoteFeed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                maximize\n                            \n                            \n                                requestSubstream\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    devices\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(janusService: JanusService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/components/video-box/video-box.component.ts:89\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        janusService\n                                                  \n                                                        \n                                                                    JanusService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n                \n                    \n                        Type :         Devices\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-box/video-box.component.ts:54\n                            \n                        \n                \n                    \n                        Requested output device (speaker). If available, this will dynamically change the\nspeaker device. This is not available in chrome on android\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        mode\n                    \n                \n                \n                    \n                        Type :     \"speaker\" | \"grid\"\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-box/video-box.component.ts:48\n                            \n                        \n                \n                    \n                        Current mode of the videoroom \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        remoteFeed\n                    \n                \n                \n                    \n                        Type :         RemoteFeed\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-box/video-box.component.ts:45\n                            \n                        \n                \n                    \n                        RemoteFeed object \n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        maximize\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-box/video-box.component.ts:64\n                            \n                        \n                \n                    \n                        Event for switching to speaker/grid view \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        requestSubstream\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-box/video-box.component.ts:68\n                            \n                        \n                \n                    \n                        Event for switching to speaker/grid view \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            monitorVideoQuality\n                        \n                        \n                    \n                \n            \n            \n                \nmonitorVideoQuality(slowLink: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/video-box/video-box.component.ts:166\n                \n            \n\n\n            \n                \n                    Called anytime the remoteFeed changes plus on a set interval \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slowLink\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onDeviceChange\n                        \n                        \n                    \n                \n            \n            \n                \nonDeviceChange(devices: Devices)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/video-box/video-box.component.ts:211\n                \n            \n\n\n            \n                \n                    Attempts to change speaker if requested \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    devices\n                                    \n                                                Devices\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onMaximize\n                        \n                        \n                    \n                \n            \n            \n                \nonMaximize()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/video-box/video-box.component.ts:206\n                \n            \n\n\n            \n                \n                    Callback for the maximize button \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setupSubscriptions\n                        \n                        \n                    \n                \n            \n            \n                \nsetupSubscriptions()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/video-box/video-box.component.ts:133\n                \n            \n\n\n            \n                \n                    Interval for checking video quality \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            switchSubstream\n                        \n                        \n                    \n                \n            \n            \n                \nswitchSubstream(substreamId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/video-box/video-box.component.ts:197\n                \n            \n\n\n            \n                \n                    Called to request a new substream \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    substreamId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            videoQualityHelper\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     VideoQualityHelper\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/components/video-box/video-box.component.ts:80\n                            \n                        \n\n                \n                    \n                        Helper class for monitoring video quality and determining when to request a new substream \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n\n\n                \n                    \n                        setdevices(devices)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/components/video-box/video-box.component.ts:57\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            devices\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import * as moment from 'moment';\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  OnChanges,\n  Output,\n  ViewChild,\n} from '@angular/core';\n\nimport { Subject, interval, fromEvent } from 'rxjs';\nimport { first, takeUntil, debounce } from 'rxjs/operators';\n\nimport { RemoteFeed, JanusRole, Devices, RequestSubstreamEvent } from '../../models';\nimport { randomString } from '../../shared';\nimport { JanusService } from '../../services/janus.service';\n\nimport { VideoQualityHelper } from './video-quality-helper';\n\n\n/**\n * Component for rendering an audio/video stream received from a remote publisher\n *\n * In addition to rendering the video content, this will keep track of the streaming\n * performance and request higher/lower bitrate streams when simulcast is available.\n */\n@Component({\n  selector: 'janus-video-box',\n  templateUrl: './video-box.component.html',\n  styleUrls: [\n    './video-box.component.scss',\n    '../../styles/video-styles.scss',\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class VideoBoxComponent implements OnInit, OnChanges, OnDestroy, AfterViewInit {\n\n  /** RemoteFeed object */\n  @Input() remoteFeed: RemoteFeed;\n\n  /** Current mode of the videoroom */\n  @Input() mode: 'speaker' | 'grid';\n\n  /** Requested output device (speaker). If available, this will dynamically change the\n   * speaker device. This is not available in chrome on android\n   */\n  @Input()\n  get devices(): Devices {\n    return this.localDevices;\n  }\n  set devices(devices: Devices) {\n    this.localDevices = devices;\n    this.onDeviceChange(devices);\n  }\n\n  /** Event for switching to speaker/grid view */\n  @Output()\n  maximize = new EventEmitter();\n\n  /** Event for switching to speaker/grid view */\n  @Output()\n  requestSubstream = new EventEmitter();\n\n  /** @internal */\n  public videoId: string;\n\n  /** @internal */\n  public optionsOpen = false;\n\n  /** @internal */\n  public videoAvailable = false;\n\n  /** Helper class for monitoring video quality and determining when to request a new substream */\n  videoQualityHelper: VideoQualityHelper; // public for testing purposes\n\n  /** @internal */\n  private localDevices: Devices;\n\n  /** @internal */\n  private destroy$ = new Subject();\n\n  /** @internal */\n  @ViewChild('videoElement') video: ElementRef;\n\n  constructor(\n    private janusService: JanusService\n  ) {\n    this.videoQualityHelper = new VideoQualityHelper(3);\n  }\n\n  ngOnInit(): void {\n    // Set my unique id for the video\n    this.videoId = 'video-' + this.remoteFeed.id + this.mode;\n    this.setupSubscriptions();\n  }\n\n  ngAfterViewInit(): void {\n    this._attachMediaStream();\n    this.setSpeaker(this.devices);\n  }\n\n  ngOnChanges(changes): void {\n    if ('remoteFeed' in changes) {\n      // If there's a change in the remoteFeed, run the video quality monitor task\n      let slowLink = false;\n\n      if (\n        changes.remoteFeed.previousValue\n        && changes.remoteFeed.previousValue.slowLink !== changes.remoteFeed.currentValue.slowLink\n      ) {\n        slowLink = true;\n      }\n\n      this.monitorVideoQuality(slowLink);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n    if (this.video) {\n      this.video.nativeElement.pause();\n    }\n  }\n\n  /** Interval for checking video quality */\n  setupSubscriptions(): void {\n    interval(1000).pipe(\n      takeUntil(this.destroy$)\n    ).subscribe(() => {\n      this.monitorVideoQuality(false);\n    });\n  }\n\n  /** @internal */\n  _attachMediaStream(): void {\n    this.janusService.attachMediaStream(this.videoId, this.remoteFeed.streamId);\n  }\n\n  /** @internal */\n  private setSpeaker(devices: Devices): void {\n    // Given the devices, set the output sound device\n    if (\n      this.video\n      && this.video.nativeElement\n      && this.video.nativeElement.setSinkId\n      && devices\n      && devices.speakerDeviceId\n    ) {\n      this.video.nativeElement.setSinkId(devices.speakerDeviceId);\n    }\n  }\n\n  /** @internal */\n  onPlay(): void {\n    this.videoAvailable = true;\n  }\n\n  /** Called anytime the `remoteFeed` changes plus on a set interval */\n  monitorVideoQuality(slowLink: boolean): void {\n    // Periodic task to monitor the video quality and change substream if necessary\n\n    if (!this.remoteFeed) {\n      // If we don't have a remoteFeed, nothing we can do here\n      return;\n    }\n\n    if (!this.videoAvailable && this.video) {\n      // Sometimes this needs a kick start. For example, if the user takes a second to click\n      // the \"allow\" button for video/mic access, the autoplay on the video element won't\n      // actually autoplay\n      this.video.nativeElement.play();\n    }\n\n    const currentSubstream = this.remoteFeed.currentSubstream;\n    if (this.remoteFeed.numVideoTracks === 0 || slowLink) {\n      this.videoQualityHelper.streamError(currentSubstream);\n      if (currentSubstream > 0) {\n        this.switchSubstream(currentSubstream - 1);\n      }\n    } else {\n      const newSubstream = this.videoQualityHelper.ping(currentSubstream);\n      if (newSubstream > currentSubstream) {\n        this.videoQualityHelper.streamEnd(currentSubstream);\n        this.switchSubstream(newSubstream);\n      }\n    }\n  }\n\n  /** Called to request a new substream */\n  switchSubstream(substreamId: number): void {\n    // Switch the substream if we haven't already requested this substream\n    if (this.remoteFeed.requestedSubstream !== substreamId) {\n      console.log('switching substream', substreamId, this.videoId);\n      this.requestSubstream.emit({feed: this.remoteFeed, substreamId});\n    }\n  }\n\n  /** Callback for the maximize button */\n  onMaximize(): void {\n    this.maximize.emit(this.remoteFeed);\n  }\n\n  /** Attempts to change speaker if requested */\n  onDeviceChange(devices: Devices): void {\n    this.setSpeaker(devices);\n  }\n}\n\n    \n\n    \n        \n  \n    \n\n    \n      {{ remoteFeed.displayName }}\n    \n\n    \n\n      \n      \n\n      \n      \n    \n\n    \n       Loading... \n    \n  \n\n\n    \n\n    \n                \n                    ./video-box.component.scss\n                \n                div.display-name {\n    display: flex;\n    z-index: 1;\n\n    span.separator {\n        margin: 0 5px 0 10px;\n    }\n\n    i.fas {\n        font-size: 14px;\n        margin: 0 5px 0 5px;\n        cursor: pointer;\n    }\n}\n\ndiv.maximize {\n   left: auto !important;\n   right: 1px;\n   cursor: pointer;\n   z-index: 1;\n}\n\n                \n                    ../../styles/video-styles.scss\n                \n                div.video-container {\n    height: 100%;\n\n    video,canvas {\n        height: 100%;\n        width: 100%;\n        font-size: 0px;\n        display: block;\n        object-fit: fill;\n    }\n\n    canvas {\n        transform: scaleX(-1);\n    }\n    video {\n        /* border: 1px solid rgba(0,0,0,.5); */\n    }\n\n    div.interior-box {\n        height: 100%;\n        position: relative;\n        border: 1px solid rgba(0,0,0,.5);\n    }\n\n    div.self {\n        border: 1px solid #8ae010;\n    }\n\n    div.overlay {\n        position: absolute;\n        top: 1px;\n        left: 1px;\n        padding: 5px;\n        background-color: rgba(53,53,53,.7);\n\n        font-family: OpenSans;\n        font-size: 16px;\n        font-weight: 600;\n        font-stretch: normal;\n        font-style: normal;\n        line-height: normal;\n        letter-spacing: -0.24px;\n        color: #ffffff;\n    }\n}\n\ndiv.loading-blocker {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(255, 255, 255, .85);\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    p {\n        font-size: 24px;\n        color: #777;\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                {{ remoteFeed.displayName }}                                               Loading...       '\n    var COMPONENTS = [{'name': 'AudioBoxComponent', 'selector': 'janus-nvid-audio-box'},{'name': 'DefaultVideoRoomComponent', 'selector': 'janus-default-video-room'},{'name': 'DeviceSelectorComponent', 'selector': 'janus-device-selector'},{'name': 'JanusVideoroomComponent', 'selector': 'janus-videoroom'},{'name': 'SelfVideoComponent', 'selector': 'janus-self-video'},{'name': 'VideoBoxComponent', 'selector': 'janus-video-box'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'VideoBoxComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VideoRoomComponent.html":{"url":"interfaces/VideoRoomComponent.html","title":"interface - VideoRoomComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  VideoRoomComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/video-room-wrapper.models.ts\n        \n\n            \n                Description\n            \n            \n                Interface for customer video room component\nAny provided custom video room must implement this interface. You need not use all of the\ndata if your use case doesn't require it. For example, a room might be publish only, in which\ncase the remoteFeeds can be ignored\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        attachRemoteFeed\n                                \n                                \n                                            Optional\n                                        devices\n                                \n                                \n                                        publishOwnFeed\n                                \n                                \n                                        remoteFeeds\n                                \n                                \n                                        requestSubstream\n                                \n                                \n                                        role\n                                \n                                \n                                        roomInfo\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        attachRemoteFeed\n                                    \n                                \n                                \n                                    \n                                        attachRemoteFeed:     EventEmitter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     EventEmitter\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Event to subscribe to another publisher's feed \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        devices\n                                    \n                                \n                                \n                                    \n                                        devices:         Devices\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Devices\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Which devices to user \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publishOwnFeed\n                                    \n                                \n                                \n                                    \n                                        publishOwnFeed:         EventEmitter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EventEmitter\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Event to publish a locally collected feed \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        remoteFeeds\n                                    \n                                \n                                \n                                    \n                                        remoteFeeds:         RemoteFeed[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RemoteFeed[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    List of available feeds \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requestSubstream\n                                    \n                                \n                                \n                                    \n                                        requestSubstream:         EventEmitter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EventEmitter\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Event to request a different substream \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                    \n                                \n                                \n                                    \n                                        role:         JanusRole\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         JanusRole\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Role of the user \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roomInfo\n                                    \n                                \n                                \n                                    \n                                        roomInfo:         RoomInfo\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RoomInfo\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    roomInfo object \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { EventEmitter, } from '@angular/core';\n\nimport {\n  Devices,\n  JanusRole,\n  RemoteFeed,\n  RoomInfo,\n} from './janus.models';\n\n\n/**\n * Data for the publishOwnFeed event emitted by a videoroom. This event will\n * tell the system to start publishing the local feed of the user. By default,\n * you can specify an audioDeviceId and videoDeviceId and the system will capture\n * video/audio from those devices. Alternatively, if skipVideoCapture is set to\n * true, the stream from the canvas element will be published without audio. The\n * videoroom will take full responsibility for drawing to the canvas element\n */\nexport interface PublishOwnFeedEvent {\n\n  /** Device ID for the microphone. ID matches what is returned by `navigator.mediaDevics.enumerateDevices` */\n  audioDeviceId: string;\n\n  /** Device ID for the camera. ID matches what is returned by `navigator.mediaDevics.enumerateDevices` */\n  videoDeviceId: string;\n\n  /** HTML ID of the canvas element. Must exist in all use cases, even not drawing on\n   * the canvas manually. If document.getElementById([canvasId]) does not return a canvas\n   * element, this will fail\n   */\n  canvasId: string;\n\n  /** If true, directs the service to not setup a video element. It will instead transmit\n   * a video stream from the canvas element\n   */\n  skipVideoCapture: boolean;\n}\n\n\n/** Data for the requestSubstream event. The event is used to request different\n * substreams when the publisher is using multicast, which is the default.\n */\nexport interface RequestSubstreamEvent {\n  /** Remote feed that we're requesting a different substream for. */\n  feed: RemoteFeed;\n\n  /** The integer id of the stream to request. */\n  substreamId: number;\n}\n\n/** Data for the attachRemoteFeedEvent. The event will negotiate a connection to\n * receive the remote stream. This must be called on each remote feed the user wishes\n * to receive.\n */\nexport interface AttachRemoteFeedEvent {\n  /** Remote feed that we're requesting. The stream must be in the `RemoteFeedState.initialized` state. */\n  feed: RemoteFeed;\n\n  /** Room info object for the room the remote feed belongs to. */\n  roomInfo: RoomInfo;\n}\n\n/**\n * Interface for customer video room component\n *\n * Any provided custom video room must implement this interface. You need not use all of the\n * data if your use case doesn't require it. For example, a room might be publish only, in which\n * case the remoteFeeds can be ignored\n */\nexport interface VideoRoomComponent {\n\n  /** roomInfo object */\n  roomInfo: RoomInfo;\n\n  /** Role of the user */\n  role: JanusRole;\n\n  /** Which devices to user */\n  devices?: Devices;\n\n  /** List of available feeds */\n  remoteFeeds: RemoteFeed[];\n\n  /** Event to request a different substream */\n  requestSubstream: EventEmitter;\n\n  /** Event to publish a locally collected feed */\n  publishOwnFeed: EventEmitter;\n\n  /** Event to subscribe to another publisher's feed */\n  attachRemoteFeed: EventEmitter;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WebrtcService.html":{"url":"injectables/WebrtcService.html","title":"injectable - WebrtcService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  WebrtcService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/services/janus.service.ts\n        \n\n            \n                Description\n            \n            \n                Various helper functions for querying devices\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearMediaStream\n                            \n                            \n                                    Async\n                                getDefaultDevices\n                            \n                            \n                                getUserMedia\n                            \n                            \n                                isSupportedDevice\n                            \n                            \n                                listDevices\n                            \n                            \n                                supportsSpeakerSelection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/lib/services/janus.service.ts:20\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearMediaStream\n                        \n                        \n                    \n                \n            \n            \n                \nclearMediaStream(stream: MediaStream)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/services/janus.service.ts:83\n                \n            \n\n\n            \n                \n                    Clear all resources for a previously created media stream\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stream\n                                    \n                                            MediaStream\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getDefaultDevices\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDefaultDevices()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/services/janus.service.ts:49\n                \n            \n\n\n            \n                \n                    Returns the device IDs for the default audio, video, and speaker device\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUserMedia\n                        \n                        \n                    \n                \n            \n            \n                \ngetUserMedia(audioDeviceId: string | null, videoDeviceId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/services/janus.service.ts:31\n                \n            \n\n\n            \n                \n                    Wrapper around getUserMedia that allows the user to specify the audio and video device ids\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    audioDeviceId\n                                    \n                                            string | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Device ID of the desired audio device. If null, audio will not be included\n\n                                    \n                                \n                                \n                                    videoDeviceId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Device ID of the desired video device.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isSupportedDevice\n                        \n                        \n                    \n                \n            \n            \n                \nisSupportedDevice()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/services/janus.service.ts:76\n                \n            \n\n\n            \n                \n                    Determines if the current device is supported. Currently, iPhone 6 and older are not supported.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            listDevices\n                        \n                        \n                    \n                \n            \n            \n                \nlistDevices()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/services/janus.service.ts:42\n                \n            \n\n\n            \n                \n                    Wrapper around navigator.mediaDevices.enumerateDevices\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            supportsSpeakerSelection\n                        \n                        \n                    \n                \n            \n            \n                \nsupportsSpeakerSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/services/janus.service.ts:66\n                \n            \n\n\n            \n                \n                    Determines if the current platform supports setting the speaker. Some devices, e.g., most android\nphones, do not allow the dynamic setting of the speaker from within the browser. For those devices,\nit's necessary to change the output device outside of the browser.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nimport { Observable, of, interval } from 'rxjs';\nimport { tap, takeWhile } from 'rxjs/operators';\n\nimport Janus from '../3rdparty/janus.es';\n\nimport * as fromModels from '../models/janus-server.models';\nimport { RemoteFeed, RoomInfo, IceServer } from '../models/janus.models';\n\n\nimport { randomString } from '../shared';\n\n/**\n * Various helper functions for querying devices\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebrtcService {\n  // Wrappers around some common webrtc functions\n\n  constructor() { }\n\n  /**\n   * Wrapper around getUserMedia that allows the user to specify the audio and video device ids\n   *\n   * @param audioDeviceId Device ID of the desired audio device. If null, audio will not be included\n   * @param videoDeviceId Device ID of the desired video device.\n   */\n  getUserMedia(audioDeviceId: string | null, videoDeviceId: string): Promise {\n    const constraints = {\n      audio: audioDeviceId !== null ? {deviceId: audioDeviceId} : false,\n      video: {deviceId: videoDeviceId, width: 1920, height: 1080},\n    };\n    return navigator.mediaDevices.getUserMedia(constraints);\n  }\n\n  /**\n   * Wrapper around `navigator.mediaDevices.enumerateDevices`\n   */\n  listDevices(): Promise {\n    return navigator.mediaDevices.enumerateDevices();\n  }\n\n  /**\n   * Returns the device IDs for the default audio, video, and speaker device\n   */\n  async getDefaultDevices(): Promise {\n    const devices = await this.listDevices();\n    const audioDevices = devices.filter((device) => device.kind === 'audioinput');\n    const videoDevices = devices.filter((device) => device.kind === 'videoinput');\n    const speakerDevices = devices.filter((device) => device.kind === 'audiooutput');\n    const audioDeviceId = audioDevices.length = 13;\n  }\n}\n\n/** @internal */\n@Injectable({\n  providedIn: 'root'\n})\nexport class JanusService {\n  private streams = {};\n  private initialized = false;\n  private janus: any;\n  private server: string;\n  private opaqueId: string = randomString(16);\n  public handle;   // Handle to the videoroom plugin\n  private remoteHandles: { [id: number]: any } = {};   // Handles to remote streams\n\n  private videoElement: any;\n  private localStream: any;\n  private publishWebrtcState = false;\n\n  private drawLoopActive: boolean;\n  private iceServers: {urls: string}[];\n\n  constructor(\n    private webrtcService: WebrtcService,\n  ) {}\n\n  init(iceServers: IceServer[]): Observable {\n    // Initialize Janus\n    this.iceServers = iceServers;\n\n    if (this.initialized) {\n      console.log('Warning: called janus init twice');\n      return of(true);\n    }\n\n    return new Observable(\n      subscriber => {\n        Janus.init({\n          debug: 'none',\n          callback(): void {\n            // Make sure the browser supports WebRTC\n            if (!Janus.isWebrtcSupported()) {\n              subscriber.error('WebRTC is not supported');\n            }\n            subscriber.next();\n            subscriber.complete();\n          }\n        });\n      }\n    );\n  }\n\n  destroy(): void {\n    const leave = { request: 'leave' };\n\n    if (this.handle) {\n      this.handle.send({message: leave});\n    }\n    this.cleanupLocalStream();\n    this.janus.destroy({unload: true});\n\n    // Clean up all variables used\n    this.janus = null;\n    this.handle = null;\n    this.streams = {};\n    this.initialized = false;\n    this.janus = null;\n    this.server = null;\n    this.handle = null;\n    this.remoteHandles = {};\n    this.videoElement = null;\n    this.localStream = null;\n    this.publishWebrtcState = false;\n    this.drawLoopActive = null;\n    this.iceServers = [];\n  }\n\n  cleanupLocalStream(): void {\n    if (this.videoElement) {\n      this.videoElement.remove();\n    }\n    if (this.localStream) {\n      this.webrtcService.clearMediaStream(this.localStream);\n    }\n    this.drawLoopActive = false;\n  }\n\n  _get_random_string(): string {\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n  }\n\n  _attachVideoRoomHelper(subscriber): void {\n    const instance = this;\n    this.janus.attach({\n      plugin: 'janus.plugin.videoroom',\n      opaqueId: this.opaqueId,\n      success(pluginHandle): void {\n        instance.handle = pluginHandle;\n        subscriber.next({\n          message: fromModels.ATTACH_SUCCESS\n        });\n      },\n      error(error): void {\n        subscriber.error(error);\n      },\n      consentDialog(on): void {\n        subscriber.next({\n          message: fromModels.CONSENT_DIALOG,\n          payload: {on},\n        });\n      },\n      mediaState(medium, on): void {\n        subscriber.next({\n          message: fromModels.MEDIA_STATE,\n          payload: {medium, on},\n        });\n      },\n      webrtcState(on): void {\n        instance.publishWebrtcState = on;\n        subscriber.next({\n          message: fromModels.WEBRTC_STATE,\n          payload: {on},\n        });\n      },\n      iceState(arg1, arg2): void {\n        // console.log('ICE STATE', arg1, arg2);\n      },\n      slowLink(msg): void {\n      },\n      onmessage(msg, jsep): void {\n        subscriber.next({\n          message: fromModels.ON_MESSAGE,\n          payload: {msg, jsep},\n        });\n        if (!!jsep) {\n          instance.handleRemoteJsep(jsep);\n        }\n      },\n      onlocalstream(stream): void {\n        const streamId = instance._get_random_string();\n        instance.streams[streamId] = stream;\n        subscriber.next({\n          message: fromModels.ON_LOCAL_STREAM,\n          payload: {stream_id: streamId},\n        });\n      },\n      onremotestream(stream): void {\n        // Don't expect this to ever happen\n        subscriber.next({\n          message: fromModels.ON_REMOTE_STREAM,\n          payload: {stream},\n        });\n      },\n      oncleanup(): void {\n        subscriber.next({\n          message: fromModels.ON_CLEANUP,\n        });\n      }\n    });\n  }\n\n  attachVideoRoom(url): Observable {\n    // Create session\n    const instance = this;\n    return new Observable(\n      subscriber => {\n        instance.janus = new Janus({\n          server: url,\n          iceServers: this.iceServers,\n          success: () => {\n            instance._attachVideoRoomHelper(subscriber);\n          },\n          error(error): void {\n            subscriber.error(error);\n          },\n          destroyed(): void {\n            // window.location.reload();\n          }\n        });\n      }\n    );\n  }\n\n  register(name: string, userId: string, roomId: string | number, pin: string): void {\n    const register = {\n      request: 'join',\n      room: roomId,\n      ptype: 'publisher',\n      display: name,\n      id: userId,\n      pin,\n    };\n    this.handle.send({message: register});\n  }\n\n  handleRemoteJsep(jsep): void {\n    this.handle.handleRemoteJsep({jsep});\n  }\n\n  answerRemoteFeedJsep(jsep, feed: RemoteFeed, room: RoomInfo): void {\n    // Handle a jsep message for a remote feed\n\n    const handle = this.remoteHandles[feed.id];\n    handle.createAnswer({\n      jsep,\n      trickle: true,\n      media: { audioSend: false, videoSend: false },  // We want recvonly audio/video\n      success(jsepBody): void {\n        const body = { request: 'start', room: room.id };\n        handle.send({message: body, jsep: jsepBody});\n      },\n      error(error): void {\n        console.log('ERROR in JSEP RESPONSE', error);\n      }\n    });\n  }\n\n  draw(canvasContext, videoElement): void {\n    canvasContext.drawImage(videoElement, 0, 0);\n    const centerX = canvasContext.canvas.width / 2;\n    const centerY = canvasContext.canvas.height / 2;\n    const videoWidth = videoElement.videoWidth;\n    const videoHeight = videoElement.videoHeight;\n\n    canvasContext.fillStyle = '#000';\n    canvasContext.fillRect(0, 0, canvasContext.canvas.width, canvasContext.canvas.height);\n\n    canvasContext.save();\n    canvasContext.translate(centerX, centerY);\n    canvasContext.drawImage(\n      videoElement,\n      -videoWidth / 2,\n      -videoHeight / 2,\n      videoWidth,\n      videoHeight,\n    );\n    canvasContext.restore();\n  }\n\n  startDrawingLoop(canvasElement, videoElement, frameRate: number): void {\n    // Drawing loop using AudioContext oscillator. requestAnimationFrame doesn't fire\n    // on background tabs, so this is a hack to make this work when the user switches tabs\n\n    const instance = this;\n    instance.drawLoopActive = true;\n    const canvasContext = canvasElement.getContext('2d');\n\n    const stepMilliSeconds = 1000 / frameRate;\n\n    function step(): void {\n      if (instance.drawLoopActive) {\n        instance.draw(canvasContext, videoElement);\n        setTimeout(step, stepMilliSeconds);\n        // requestAnimationFrame(step);\n      }\n    }\n    step();\n  }\n\n  _muteVideo(videoElement): void {\n    // Mute a given video element\n\n    const instance = this;\n    function mute(event): void {\n      videoElement.muted = 'muted';\n      videoElement.removeEventListener('playing', mute);\n    }\n\n    videoElement.addEventListener('playing', mute);\n  }\n\n  _sizeCanvasElement(videoWidth: number, videoHeight: number): {canvasWidth: number, canvasHeight: number} {\n    // We're keeping the height the same. Goal is to add black bars to the sides\n    // if we're in portrait mode and crop to the center if we're in landscape.\n    return {\n      canvasWidth: videoHeight * 4 / 3,\n      canvasHeight: videoHeight,\n    };\n  }\n\n  _videoElementSafariHacks(videoElement): void {\n    // safari requires that the video element be in the body\n    const body = document.getElementsByTagName('body')[0];\n    body.appendChild(videoElement);\n    videoElement.setAttribute('style', 'width: 0; height: 0;');\n\n    // safari doesn't always auto-play the way you'd like it to\n    videoElement.addEventListener('canplay', () => videoElement.play());\n  }\n\n  _createVideoElement(canvasId: string, videoStream: any): any {\n    // Create the video element and attach it to the canvas\n\n    const videoElement = document.createElement('video');\n    const canvasElement: any = document.getElementById(canvasId);\n\n    // Firefox has a bug where calling captureStream before calling getContext results in an error.\n    canvasElement.getContext('2d');\n\n    const canvasStream = canvasElement.captureStream();\n    const videoSettings = videoStream.getVideoTracks()[0].getSettings();\n\n    this._videoElementSafariHacks(videoElement);\n\n    Janus.attachMediaStream(videoElement, videoStream);\n    videoElement.autoplay = true;\n    videoElement.setAttribute('playsinline', 'true');\n    videoElement.setAttribute('id', 'self-video');\n\n    // Some browsers don't like it if we set the muted attribute before the video is playing\n    this._muteVideo(videoElement);\n\n    const { canvasWidth, canvasHeight } = this._sizeCanvasElement(videoSettings.width, videoSettings.height);\n    canvasElement.width = canvasWidth;\n    canvasElement.height = canvasHeight;\n\n    const audioTrack = videoStream.getAudioTracks().find((item) => item);\n    if (!!audioTrack) {\n        canvasStream.addTrack(videoStream.getAudioTracks()[0]);\n    }\n\n    this.startDrawingLoop(canvasElement, videoElement, videoSettings.frameRate);\n\n    return {\n      videoElement,\n      canvasStream,\n    };\n  }\n\n  unPublishOwnFeed(): void {\n    // Unpublish your own feed\n    const unpublish = { request: 'unpublish' };\n    this.handle.send({ message: unpublish });\n    this.cleanupLocalStream();\n  }\n\n  publishOwnFeed(\n    audioDeviceId: string | null,\n    videoDeviceId: string,\n    canvasId: string = 'canvas-self',\n    skipVideoCapture: boolean = false,\n  ): Observable {\n    // Publish our own feed\n\n    return new Observable(\n      subscriber => {\n        if (this.publishWebrtcState) {\n          // Already publishing. Need to unpublish, wait until we're done unpublishing, and then republish\n          this.unPublishOwnFeed();\n          interval(100).pipe(\n            takeWhile(() => this.publishWebrtcState)\n          ).subscribe({\n            complete: () => {\n              this.createStreamAndOffer(subscriber, audioDeviceId, videoDeviceId, canvasId, skipVideoCapture);\n            }\n          });\n        } else {\n          // Simple case. Not publishing yet\n          this.createStreamAndOffer(subscriber, audioDeviceId, videoDeviceId, canvasId, skipVideoCapture);\n        }\n      }\n    );\n  }\n\n  createStreamAndOffer(\n    subscriber,\n    audioDeviceId: string | null,\n    videoDeviceId: string,\n    canvasId: string,\n    skipVideoCapture: boolean,\n    retryCount = 0,\n  ): void {\n    const instance = this;\n    if (skipVideoCapture) {\n      // We don't create any video element, etc.\n      const canvasElement: any = document.getElementById(canvasId);\n      const canvasStream = canvasElement.captureStream();\n      return this.createOffer(subscriber, canvasStream);\n    } else {\n      // Common case. We need to create a video element\n      instance.webrtcService.getUserMedia(audioDeviceId, videoDeviceId)\n        .then((videoStream) => {\n          instance.localStream = videoStream;\n          const {videoElement, canvasStream} = instance._createVideoElement(canvasId, videoStream);\n          instance.videoElement = videoElement;\n          this.createOffer(subscriber, canvasStream);\n        }\n      ).catch((error) => {\n        // Some devices get intermittent errors. I'm doing a retry here. Not a warm-fuzzy solution. Future work might\n        // find a race condition where we need to wait for an event before calling getUserMedia\n        if (retryCount  {\n            instance.createStreamAndOffer(\n              subscriber,\n              audioDeviceId,\n              videoDeviceId,\n              canvasId,\n              skipVideoCapture,\n              retryCount + 1,\n            );\n          }, 1000);\n        }\n      });\n    }\n  }\n\n  createOffer(\n    subscriber,\n    stream,\n  ): void {\n    const instance = this;\n    this.handle.createOffer({\n      media: { audioRecv: false, videoRecv: false, audioSend: true, videoSend: true },\n      success(jsep): void {\n        const publish = { request: 'configure', audio: true, video: true };\n        instance.handle.send({message: publish, jsep});\n        subscriber.next(true);\n        subscriber.complete();\n      },\n      error(error): void {\n        subscriber.error(error);\n      },\n      simulcast: true,\n      simulcastMaxBitrates: {\n        high: 256000,\n        medium: 128000,\n        low: 64000,\n      },\n      trickle: true,\n      stream,\n    });\n  }\n\n  attachMediaStream(elemId: string, streamId: string): void {\n    const element: any = document.getElementById(elemId);\n    Janus.attachMediaStream(element, this.streams[streamId]);\n  }\n\n  attachRemoteFeed(\n    feed: RemoteFeed,\n    room: RoomInfo,\n    pin: string,\n  ): Observable {\n    // A new feed has been published, create a new plugin handle and attach to it as a subscriber\n\n    const instance = this;\n\n    return new Observable(\n      subscriber => {\n        instance.janus.attach({\n          plugin: 'janus.plugin.videoroom',\n          opaqueId: instance.opaqueId,\n          success(pluginHandle): void {\n            instance.remoteHandles[feed.id] = pluginHandle;\n            instance.remoteHandles[feed.id].videoCodec = feed.video_codec;\n\n            const subscribe = {\n              request: 'join',\n              room: room.id,\n              ptype: 'subscriber',\n              feed: feed.id,\n              private_id: room.privateId,\n              substream: 0,\n              pin,\n            };\n            instance.remoteHandles[feed.id].send({message: subscribe});\n          },\n\n          error(error): void {\n            subscriber.error(error);\n          },\n\n          onmessage(msg, jsep): void {\n            subscriber.next({\n              message: fromModels.ON_REMOTE_FEED_MESSAGE,\n              payload: {\n                msg,\n                jsep,\n                feed,\n                room,\n              },\n            });\n            if (!!jsep) {\n              instance.answerRemoteFeedJsep(jsep, feed, room);\n            }\n          },\n\n          webrtcState(on): void {\n            subscriber.next({\n              message: fromModels.REMOTE_FEED_WEBRTC_STATE,\n              payload: {\n                on,\n                feed,\n                room,\n              },\n            });\n          },\n\n          onlocalstream(stream): void {\n            console.log('Would never expect to get here');\n          },\n\n          slowLink(msg): void {\n            subscriber.next({\n              message: fromModels.REMOTE_FEED_SLOW_LINK,\n              payload: {\n                feedId: feed.id,\n              },\n            });\n          },\n\n          onremotestream(stream): void {\n            // Save off remote stream\n\n            const streamId = instance._get_random_string();\n            instance.streams[streamId] = stream;\n\n            const numVideoTracks = stream.getVideoTracks() ? stream.getVideoTracks().length : 0;\n            subscriber.next({\n              message: fromModels.ON_REMOTE_REMOTE_STREAM,\n              payload: {\n                streamId,\n                numVideoTracks,\n                feed,\n                room,\n              },\n            });\n          },\n          oncleanup(): void {\n            subscriber.next({\n              message: fromModels.ON_REMOTE_CLEANUP,\n              payload: {\n                feed,\n                room,\n              },\n            });\n          }\n        });\n      }\n    );\n  }\n\n  toggleMute(): boolean {\n    const muted = this.handle.isAudioMuted();\n    if (muted) {\n        this.handle.unmuteAudio();\n    } else {\n        this.handle.muteAudio();\n    }\n    return this.handle.isAudioMuted();\n  }\n\n  setMute(mute: boolean): boolean {\n    const muted = this.handle.isAudioMuted();\n    if (muted === mute) {\n      return this.handle.isAudioMuted();\n    }\n\n    if (mute) {\n        this.handle.muteAudio();\n    } else {\n        this.handle.unmuteAudio();\n    }\n    return this.handle.isAudioMuted();\n  }\n\n  requestSubstream(feed: RemoteFeed, substreamId: number): void {\n    this.remoteHandles[feed.id].send({message: {request: 'configure', substream: substreamId}});\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.0.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^10.1.1\n        \n            @angular/core : ^10.1.1\n        \n            @ngrx/component-store : ^10.0.1\n        \n            moment : ^2.29.1\n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            JanusRole   (src/.../janus.models.ts)\n                        \n                        \n                            PublishState   (src/.../janus.models.ts)\n                        \n                        \n                            RemoteFeedState   (src/.../janus.models.ts)\n                        \n                        \n                            RoomInfoState   (src/.../janus.models.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/models/janus.models.ts\n    \n        \n            \n                \n                    \n                        \n                        JanusRole\n                    \n                \n                    \n                        \n                            Possible roles for a user.\n\n                        \n                    \n                        \n                            \n                                 publisher\n                            \n                        \n                        \n                            \n                                Value : publisher\n                            \n                        \n                        \n                            \n                                 listener\n                            \n                        \n                        \n                            \n                                Value : listener\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PublishState\n                    \n                \n                    \n                        \n                            Current publish status\n\n                        \n                    \n                        \n                            \n                                 start\n                            \n                        \n                        \n                            \n                                Value : start\n                            \n                        \n                        \n                            \n                                 ready\n                            \n                        \n                        \n                            \n                                Value : ready\n                            \n                        \n                        \n                            \n                                 publishRequested\n                            \n                        \n                        \n                            \n                                Value : publish requested\n                            \n                        \n                        \n                            \n                                 publishing\n                            \n                        \n                        \n                            \n                                Value : publishing\n                            \n                        \n                        \n                            \n                                 error\n                            \n                        \n                        \n                            \n                                Value : error\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RemoteFeedState\n                    \n                \n                    \n                        \n                            Remote feed state machine\n\n                        \n                    \n                        \n                            \n                                 initialized\n                            \n                        \n                        \n                            \n                                Value : initialized\n                            \n                        \n                        \n                            \n                                 attaching\n                            \n                        \n                        \n                            \n                                Value : attaching\n                            \n                        \n                        \n                            \n                                 attached\n                            \n                        \n                        \n                            \n                                Value : attached\n                            \n                        \n                        \n                            \n                                 ready\n                            \n                        \n                        \n                            \n                                Value : ready\n                            \n                        \n                        \n                            \n                                 error\n                            \n                        \n                        \n                            \n                                Value : error\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RoomInfoState\n                    \n                \n                    \n                        \n                            Room state machine\n\n                        \n                    \n                        \n                            \n                                 start\n                            \n                        \n                        \n                            \n                                Value : start\n                            \n                        \n                        \n                            \n                                 initializing\n                            \n                        \n                        \n                            \n                                Value : initializing\n                            \n                        \n                        \n                            \n                                 initialized\n                            \n                        \n                        \n                            \n                                Value : initialized\n                            \n                        \n                        \n                            \n                                 attaching\n                            \n                        \n                        \n                            \n                                Value : attaching\n                            \n                        \n                        \n                            \n                                 attached\n                            \n                        \n                        \n                            \n                                Value : attached\n                            \n                        \n                        \n                            \n                                 attach_failed\n                            \n                        \n                        \n                            \n                                Value : attach_failed\n                            \n                        \n                        \n                            \n                                 joining\n                            \n                        \n                        \n                            \n                                Value : joining\n                            \n                        \n                        \n                            \n                                 joined\n                            \n                        \n                        \n                            \n                                Value : joined\n                            \n                        \n                        \n                            \n                                 error\n                            \n                        \n                        \n                            \n                                Value : error\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nJanus Videoroom Component\nThis is an angular library with features to make it easy to embed a videoroom\ninto any angular app. Once you have a properly configured, public instance of a\njanus server with the videoroom plugin enabled, this library includes a\ndirective that will connect clients in a videoroom.\nWhy build this?\nWhen building a product that incorporates a videoroom, the interesting part of\nthe product is how it helps users find, create, edit, join, and view\nvideorooms. That's what gives the product it's competitive advantage. However,\nwhen we started working on our own product, we spent the vast majority of our\nengineering time working with low level webrtc signalling. This mismatch led us\nto believe there's room for improvement in this field. Our goal is to help\nother developers spend more time on their app and less time on webrtc details.\nThe Janus documentation and demos are great for understanding how the service\nworks. However, the sample client code is not easy to adopt into your own\napplication. This makes it so that developers need to write a lot of the low\nlevel code themselves and understand many of the details of the videoroom\nplugin. While more knowledge is always better than less, we believe it's\npossible to implement a videoroom without requiring the developer to understand\nintimate details of webrtc.\nWhat does this implement?\nThe core function provided by this library is a component called JanusVideoroomComponent that implements a videoroom. The selector for the component is janus-videoroom. You can have a fully functional videoroom only specifying the URL of the janus gateway and the room ID. The videoroom supports the following features:\n\nRoom ID You can specify any roomId that is available on the janus gateway.\nhttp and websocket connections You can specify an http and/or websocket URL. The component will prefer the websocket URL and fallback to the http URL.\nPINs You can specify a PIN for any room that requires it.\nAuto Resize Videos are automatically enlarged to take up the maximum screen real estate upon changing the size or orientation of the screen.\nMultiple Aspect Ratios Different source video aspect ratios are handled smoothly.\nDisplay Names You can specify the display name for anyone joining a videoroom.\nPublishers or Read Only Users Users can be publishers, who will send a feed from their camera/microphone, or they can be read only users that don't transmit anything.\nSimulcast Supported clients will publish 3 different quality video feeds and clients will dynamically pick the appropriate stream based on current network conditions\nDevices Device IDs can be input and dynamically changed so that users can change which input or output devices to use.\nICE Servers In addition the the janus gateway, custom STUN/TURN servers can be specified.\nMute Audio Audio can be muted for publishers.\nSupported Platforms Tested and works on Chrome (Windows, macOS, and android) and Safari (macOS and iOS).\n\nWhat does this not implement?\nIn the spirit of doing one thing well, the janus-videoroom component does not\nimplement many necessary parts of an application. For example, the component\nsupports muting the feed of a publisher. However, it does not implement a mute\nbutton. The burden is put on the developer to implement the UX around how to\nmute a feed.\nThe following is a non-exhaustive list of necessary items for most webapps that\nare not implemented by JanusVideoroomComponent. These will have to be\nimplemented by the application outside of this library.\n\nJanus room configuration Create/edit/delete operations on janus rooms are not supported\nUI elements for interaction Mute, change device, etc. are supported by the component, but it does not include UI elements for these.\nUser Authentication\nBackend Storage\nJanus gateway deployment\n\nHow to use\nInstallation\nDependencies\njanus-angular has 3 peer dependencies: webrtc-adapter, @ngrx/component-store, and moment. These can be installed by yarn\nyarn add webrtc-adapter @ngrx/component-store momentInstalling janus-angular\nInstallation is available through yarn\nyarn add janus-angularIncluding the module\nThe JanusModule must be included in your imports for the module in which you wish to use the directive\nimport { JanusModule } from 'janus-angular';\n...\n@NgModule({\n  declarations: [\n    ...\n  ],\n  imports: [\n    ...\n    JanusModule,\n  ],\n})\nexport class YourAppModule { }Using the directive\nThe following minimal component will work with the demo deploy of janus.\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  styleUrls: ['./app.component.scss'],\n  template: `\n    \n    \n  `\n})\nexport class AppComponent {\n  roomId = 1234;\n  wsUrl = 'wss://janus.conf.meetecho.com/ws';\n}Inputs/Outputs for the component are documented in the API docs on this site. Page for the\ncomponent docs is here\nSample Application\nWe have written a small, sample application to show how to use the library. The\nrepo lives here.\nJanus setup\nThis is a client library tightly coupled with a Janus webrtc Server with the\nvideoroom plugin.  The documentation for that can be found on that Janus\nwebsite here.\nFuture Work\nIn addition to tireless bug fixing and making sure it works on all platforms\nand networks, future work will include adding additional touchpoints in which\nsomeone can customize the videoroom. Overlays work great to give rough\nfunctionality to all supported features. However, there are often times when an\napp wants to implement buttons on a publisher video itself, or change the\nentire look and feel of the videoroom. We do this internally, and are working\nto release those touchpoints to the public package.\nDonations\nAre you happy with the product and want to support future development? We\naccept donations\nhere. Donations\nfund development of new features on the library.\nSource Code\nSource code for this library lives here\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        JanusModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_JanusModule\n\n\n\ncluster_JanusModule_declarations\n\n\n\ncluster_JanusModule_exports\n\n\n\n\nAudioBoxComponent\n\nAudioBoxComponent\n\n\n\nJanusModule\n\nJanusModule\n\nJanusModule -->\n\nAudioBoxComponent->JanusModule\n\n\n\n\n\nDefaultVideoRoomComponent\n\nDefaultVideoRoomComponent\n\nJanusModule -->\n\nDefaultVideoRoomComponent->JanusModule\n\n\n\n\n\nDeviceSelectorComponent\n\nDeviceSelectorComponent\n\nJanusModule -->\n\nDeviceSelectorComponent->JanusModule\n\n\n\n\n\nJanusVideoroomComponent\n\nJanusVideoroomComponent\n\nJanusModule -->\n\nJanusVideoroomComponent->JanusModule\n\n\n\n\n\nSelfVideoComponent\n\nSelfVideoComponent\n\nJanusModule -->\n\nSelfVideoComponent->JanusModule\n\n\n\n\n\nVideoBoxComponent\n\nVideoBoxComponent\n\nJanusModule -->\n\nVideoBoxComponent->JanusModule\n\n\n\n\n\nAudioBoxComponent \n\nAudioBoxComponent \n\nAudioBoxComponent  -->\n\nJanusModule->AudioBoxComponent \n\n\n\n\n\nDefaultVideoRoomComponent \n\nDefaultVideoRoomComponent \n\nDefaultVideoRoomComponent  -->\n\nJanusModule->DefaultVideoRoomComponent \n\n\n\n\n\nDeviceSelectorComponent \n\nDeviceSelectorComponent \n\nDeviceSelectorComponent  -->\n\nJanusModule->DeviceSelectorComponent \n\n\n\n\n\nJanusVideoroomComponent \n\nJanusVideoroomComponent \n\nJanusVideoroomComponent  -->\n\nJanusModule->JanusVideoroomComponent \n\n\n\n\n\nSelfVideoComponent \n\nSelfVideoComponent \n\nSelfVideoComponent  -->\n\nJanusModule->SelfVideoComponent \n\n\n\n\n\nVideoBoxComponent \n\nVideoBoxComponent \n\nVideoBoxComponent  -->\n\nJanusModule->VideoBoxComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    9 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ATTACH_SUCCESS   (src/.../janus-server.models.ts)\n                        \n                        \n                            components   (src/.../index.ts)\n                        \n                        \n                            components   (src/.../index.ts)\n                        \n                        \n                            CONSENT_DIALOG   (src/.../janus-server.models.ts)\n                        \n                        \n                            DETACHED   (src/.../janus-server.models.ts)\n                        \n                        \n                            initialState   (src/.../janus.reducers.ts)\n                        \n                        \n                            MEDIA_STATE   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_CLEANUP   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_DATA   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_DATA_OPEN   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_LOCAL_STREAM   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_MESSAGE   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_REMOTE_CLEANUP   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_REMOTE_FEED_MESSAGE   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_REMOTE_LOCAL_STREAM   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_REMOTE_REMOTE_STREAM   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_REMOTE_STREAM   (src/.../janus-server.models.ts)\n                        \n                        \n                            randomString   (src/.../random.ts)\n                        \n                        \n                            REMOTE_FEED_SLOW_LINK   (src/.../janus-server.models.ts)\n                        \n                        \n                            REMOTE_FEED_WEBRTC_STATE   (src/.../janus-server.models.ts)\n                        \n                        \n                            RemoteFeedFactory   (src/.../janus.factories.ts)\n                        \n                        \n                            REQUEST_SUBSTREAM   (src/.../janus.actions.ts)\n                        \n                        \n                            RoomInfoFactory   (src/.../janus.factories.ts)\n                        \n                        \n                            SLOW_LINK   (src/.../janus-server.models.ts)\n                        \n                        \n                            TOGGLE_MUTE_SUCCESS   (src/.../janus.actions.ts)\n                        \n                        \n                            WEBRTC_STATE   (src/.../janus-server.models.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/models/janus-server.models.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ATTACH_SUCCESS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'attach success'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CONSENT_DIALOG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'consent dialog'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DETACHED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'detached'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MEDIA_STATE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'media state'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_CLEANUP\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'cleanup'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_DATA\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'data'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_DATA_OPEN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'data open'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_LOCAL_STREAM\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'local stream'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_MESSAGE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'message'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_REMOTE_CLEANUP\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[remote] cleanup'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_REMOTE_FEED_MESSAGE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[remote] message'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_REMOTE_LOCAL_STREAM\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[remote] local stream'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_REMOTE_REMOTE_STREAM\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[remote] remote stream'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_REMOTE_STREAM\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'remote stream'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            REMOTE_FEED_SLOW_LINK\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[remote] slow link'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            REMOTE_FEED_WEBRTC_STATE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[remote] webrtc state'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SLOW_LINK\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'slow link'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            WEBRTC_STATE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'webrtc state'\n                        \n                    \n\n\n            \n        \n\n    src/lib/components/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            components\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  AudioBoxComponent,\n  VideoBoxComponent,\n  DefaultVideoRoomComponent,\n  SelfVideoComponent,\n]\n                        \n                    \n\n\n            \n        \n\n    src/lib/containers/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            components\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  JanusVideoroomComponent,\n  DeviceSelectorComponent,\n]\n                        \n                    \n\n\n            \n        \n\n    src/lib/store/reducers/janus.reducers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            initialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     VideoroomState\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  roomInfo: {\n    state: RoomInfoState.start,\n    id: null,\n    description: null,\n    privateId: null,\n    otherRoomId: null,\n\n    errorCode: null,\n\n    publishState: PublishState.start,\n    localStreamId: null,\n    muted: false,\n  },\n  remoteFeeds: {},\n}\n                        \n                    \n\n\n            \n        \n\n    src/lib/shared/random.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            randomString\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ((bytes: number) => {\n  const array = new Uint8Array(bytes);\n  window.crypto.getRandomValues(array);\n\n  // Real pain to find a cross platform way to do this smoothly. Dropping into a for loop\n  let ret = '';\n  for (const item of array) {\n    ret += item.toString(36);\n  }\n\n  return ret;\n})\n                        \n                    \n\n\n            \n        \n\n    src/lib/factories/janus.factories.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            RemoteFeedFactory\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Factory.Sync.makeFactory({\n  state: RemoteFeedState.initialized,\n  id: Factory.each(i => i.toString()),\n  streamId: Factory.each(i => 'stream' + i.toString()),\n  numVideoTracks: 0,\n  requestedSubstream: 0,\n  currentSubstream: 0,\n  displayName: Factory.each(i => 'name' + i.toString()),\n  audio_codec: Factory.each(i => 'audio' + i.toString()),\n  video_codec: Factory.each(i => 'video' + i.toString()),\n  muted: false,\n  volume: 64,\n  slowLink: null,\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RoomInfoFactory\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Factory.Sync.makeFactory({\n  state: RoomInfoState.start,\n  id: Factory.each(i => i.toString()),\n  description: Factory.each(i => 'description' + i.toString()),\n  privateId: Factory.each(i => i),\n  otherRoomId: Factory.each(i => i),\n  errorCode: null,\n  publishState: PublishState.start,\n  localStreamId: Factory.each(i => 'stream' + i.toString()),\n  muted: false,\n})\n                        \n                    \n\n\n            \n        \n\n    src/lib/store/actions/janus.actions.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            REQUEST_SUBSTREAM\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[Janus] Request Substream'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TOGGLE_MUTE_SUCCESS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[Janus] Toggle Mute Success'\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
