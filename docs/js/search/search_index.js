var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AttachRemoteFeedEvent.html",[0,0.257,1,1.114]],["body/interfaces/AttachRemoteFeedEvent.html",[0,0.476,1,1.944,2,1.013,3,0.512,4,0.29,5,0.352,6,2.002,7,0.393,8,2.002,9,0.416,10,2.83,11,0.832,12,2.616,13,2.31,14,2.728,15,0.958,16,0.697,17,1.646,18,1.323,19,1.132,20,0.777,21,2.616,22,0.232,23,0.94,24,0.846,25,0.797,26,0.459,27,0.044,28,2.289,29,2.914,30,2.055,31,0.831,32,1.047,33,2.616,34,0.379,35,1.563,36,0.558,37,0.464,38,0.831,39,2.002,40,1.646,41,1.768,42,1.476,43,2.002,44,1.323,45,0.719,46,0.809,47,0.809,48,0.94,49,1.573,50,1.057,51,1.057,52,1.573,53,2.002,54,1.573,55,2.002,56,2.055,57,0.558,58,0.831,59,2.308,60,1.329,61,1.768,62,1.573,63,0.29,64,1.768,65,2.002,66,2.002,67,2.31,68,0.448,69,1.13,70,0.459,71,0.917,72,1.013,73,2.616,74,2.616,75,2.616,76,0.706,77,1.013,78,0.907,79,2.002,80,1.319,81,2.002,82,2.002,83,2.002,84,2.002,85,0.907,86,2.002,87,1.573,88,2.002,89,1.768,90,0.907,91,0.358,92,2.002,93,1.768,94,0.719,95,1.837,96,1.768,97,1.833,98,2.289,99,2.002,100,0.485,101,1.573,102,2.002,103,1.13,104,0.94,105,2.002,106,1.573,107,0.636,108,2.002,109,0.29,110,1.573,111,1.573,112,1.768,113,0.907,114,1.185,115,1.573,116,1.768,117,1.259,118,0.729,119,1.646,120,2.002,121,1.406,122,1.057,123,1.259,124,0.809,125,1.406,126,2.002,127,2.002,128,1.259,129,2.002,130,1.13,131,1.406,132,0.024,133,0.031,134,0.024]],["title/components/AudioBoxComponent.html",[109,0.257,135,0.802]],["body/components/AudioBoxComponent.html",[3,0.345,4,0.285,5,0.345,7,0.227,9,0.409,16,0.537,22,0.227,25,0.837,26,0.539,27,0.044,32,0.928,34,0.418,36,0.548,37,0.52,48,0.706,57,0.72,60,1.044,62,2.03,63,0.515,68,0.285,70,0.559,71,0.548,76,0.476,78,1.17,85,0.89,91,0.369,109,0.462,124,1.24,132,0.023,133,0.03,134,0.023,135,1.389,136,1.458,137,1.236,138,1.379,139,1.379,140,1.379,141,5.366,142,4.392,143,2.638,144,3.469,145,3.469,146,2.962,147,1.625,148,2.027,149,2.887,150,0.794,151,1.814,152,1.814,153,2.153,154,0.954,155,2.027,156,2.962,157,1.625,158,3.876,159,1.814,160,3.469,161,2.281,162,3.469,163,1.814,164,2.281,165,1.625,166,2.638,167,3.75,168,2.004,169,3.223,170,1.816,171,0.888,172,1.46,173,3.223,174,1.552,175,1.458,176,1.655,177,2.584,178,2.153,179,2.962,180,2.584,181,3.223,182,3.469,183,3.223,184,3.469,185,1.814,186,2.058,187,2.252,188,3.223,189,1.816,190,1.379,191,1.735,192,2.584,193,1.735,194,1.965,195,0.994,196,3.469,197,2.252,198,2.638,199,1.24,200,1.625,201,2.638,202,1.379,203,3.223,204,3.223,205,1.379,206,2.638,207,1.109,208,2.252,209,3.223,210,2.638,211,1.965,212,3.223,213,2.638,214,2.638,215,3.223,216,3.223,217,3.223,218,2.638,219,3.223,220,2.638,221,1.109,222,1.236,223,2.153,224,1.379,225,1.814,226,0.89,227,1.379,228,0.89,229,1.379,230,0.794,231,1.379,232,0.89,233,1.236,234,1.379,235,0.89,236,0.994,237,1.236,238,1.379,239,1.379]],["title/components/DefaultVideoRoomComponent.html",[109,0.257,226,0.802]],["body/components/DefaultVideoRoomComponent.html",[1,0.682,3,0.19,4,0.157,5,0.19,7,0.333,9,0.225,11,0.808,14,1.486,15,0.649,16,0.484,17,1.464,18,0.852,19,0.739,22,0.195,23,0.605,24,0.716,25,0.84,26,0.573,27,0.044,28,1.322,30,1.622,31,0.848,32,0.605,34,0.337,35,1.409,36,0.302,37,0.417,38,0.656,40,1.299,42,1.313,46,0.834,47,1.019,48,1.086,57,0.302,60,0.68,63,0.157,68,0.157,69,1.313,70,0.19,76,0.262,78,0.762,85,1.369,91,0.418,94,0.389,95,1.449,97,1.679,98,1.322,100,0.262,103,1.313,104,0.836,107,0.993,109,0.446,118,0.649,119,2.055,122,1.019,123,1.059,125,1.182,128,0.682,131,1.449,132,0.013,133,0.02,134,0.013,135,0.491,136,1.313,137,0.682,138,0.761,139,0.761,140,0.761,147,1.059,148,1.449,149,2.064,150,0.438,151,1.182,152,1.182,153,1.86,154,0.824,155,0.761,157,1.059,159,1.182,161,1.486,163,1.182,164,1.486,165,1.059,168,2.086,170,1.752,171,0.824,172,1.409,174,0.852,175,1.313,176,1.581,178,0.761,185,1.874,186,2.055,189,1.586,190,0.761,191,0.957,192,1.683,195,0.548,199,1.32,200,1.464,202,2.195,205,0.761,207,1.668,211,1.083,221,0.611,222,0.682,223,1.634,224,0.761,225,1.182,226,1.054,227,0.761,228,0.491,229,0.761,230,0.438,231,0.761,232,0.491,233,0.682,234,0.761,235,0.491,236,0.548,237,0.682,238,0.761,239,0.761,240,5.474,241,3.826,242,1.777,243,2.762,244,2.762,245,0.834,246,2.762,247,2.762,248,2.26,249,1.829,250,3.126,251,2.762,252,2.762,253,2.762,254,2.762,255,1.059,256,2.26,257,1.449,258,2.26,259,1.322,260,2.762,261,1.823,262,3.387,263,2.762,264,3.39,265,3.387,266,2.762,267,2.26,268,2.762,269,2.762,270,2.762,271,1.322,272,1.455,273,3.126,274,2.762,275,2.26,276,1.777,277,1.777,278,2.762,279,2.669,280,3.819,281,2.762,282,2.762,283,2.26,284,2.367,285,1.322,286,2.26,287,1.182,288,1.322,289,1.208,290,3.385,291,2.762,292,2.26,293,2.762,294,1.777,295,2.26,296,1.777,297,1.777,298,2.762,299,2.26,300,1.777,301,1.777,302,2.762,303,1.777,304,2.762,305,2.762,306,2.611,307,2.762,308,2.26,309,1.93,310,1.683,311,2.367,312,2.26,313,3.387,314,1.829,315,2.762,316,2.762,317,1.777,318,3.06,319,1.93,320,2.762,321,2.26,322,1.777,323,2.762,324,3.819,325,1.777,326,1.777,327,2.26,328,1.777,329,1.506,330,3.866,331,0.852,332,1.777,333,1.777,334,2.762,335,1.777,336,1.777,337,1.777,338,1.777,339,1.777,340,1.455,341,1.93,342,1.777,343,1.242,344,1.486,345,0.851,346,2.26,347,0.957,348,0.851,349,0.682,350,0.611,351,0.957,352,2.762,353,1.777,354,1.777,355,1.777,356,3.387,357,1.777,358,0.851,359,1.777,360,1.455,361,2.096,362,1.455,363,1.777,364,1.777,365,1.777,366,1.777,367,2.772,368,2.762,369,1.777,370,1.455,371,0.957,372,0.957,373,0.957,374,1.455,375,3.385,376,1.777,377,1.777,378,1.777,379,1.777,380,1.455,381,1.777,382,1.242,383,1.777,384,1.777,385,1.777,386,1.777,387,1.777,388,1.777,389,2.762,390,2.762,391,2.762,392,1.777,393,3.387,394,4.378,395,1.455,396,1.777,397,2.762,398,1.777,399,1.777,400,0.957,401,1.777,402,1.777,403,1.777,404,1.777,405,1.777,406,1.777,407,1.242,408,1.98,409,4.136,410,1.777,411,1.777,412,2.762,413,2.762,414,2.669,415,3.126,416,1.777,417,1.242,418,1.242,419,1.777,420,1.083,421,1.455,422,1.083,423,1.777,424,1.777,425,0.682,426,1.242,427,1.242,428,1.455,429,1.455,430,1.777,431,2.328,432,3.387,433,3.819,434,1.777,435,2.772,436,1.777,437,1.777,438,3.387,439,2.762,440,1.777,441,1.777,442,1.777,443,1.242,444,1.777,445,3.819,446,0.761,447,3.387,448,1.777,449,1.777,450,3.387,451,1.777,452,3.387,453,1.777,454,1.777,455,1.777,456,3.819,457,2.762,458,3.387,459,1.777,460,2.762,461,1.777,462,1.777,463,1.455,464,1.777,465,1.242,466,1.683,467,1.93,468,1.242,469,1.683,470,1.083,471,1.683,472,1.486,473,1.242,474,2.762,475,0.611,476,1.242,477,1.777,478,1.777,479,1.242,480,1.455,481,1.242,482,1.455,483,1.777,484,1.242,485,1.455]],["title/components/DeviceSelectorComponent.html",[109,0.257,228,0.802]],["body/components/DeviceSelectorComponent.html",[3,0.311,4,0.256,5,0.311,7,0.205,9,0.368,11,0.584,20,0.712,22,0.205,23,0.866,26,0.481,27,0.044,34,0.46,35,1.385,36,0.493,37,0.496,41,2.127,48,0.866,50,0.715,51,0.715,60,0.974,63,0.256,68,0.256,70,0.613,72,1.487,77,1.487,78,1.091,91,0.317,109,0.397,117,1.515,128,1.113,132,0.021,133,0.028,134,0.021,135,0.801,136,1.359,137,1.113,138,1.242,139,1.242,140,1.242,147,1.85,148,1.923,150,0.715,151,1.691,152,1.691,153,2.183,154,0.934,155,1.242,157,1.515,159,1.691,163,1.691,165,1.515,168,2.079,170,1.113,171,0.763,172,0.895,175,1.359,176,1.605,177,2.409,186,1.515,189,1.515,190,1.242,193,1.562,194,1.769,195,1.385,199,0.715,200,1.85,202,2.463,205,1.242,207,1.359,221,0.998,222,1.113,223,2.064,224,1.242,225,1.691,226,0.801,227,1.242,228,1.331,229,1.242,230,0.715,231,1.242,232,0.801,233,1.113,234,1.242,235,0.801,236,0.895,237,1.113,238,1.242,239,1.242,245,0.715,249,2.151,261,2.418,271,1.892,272,2.375,273,3.948,275,3.234,279,2.762,306,2.127,311,2.762,314,2.31,329,1.359,331,0.895,344,2.127,345,1.39,347,1.562,348,1.39,358,1.39,361,1.39,371,1.562,372,1.562,373,1.562,400,1.562,408,1.39,429,2.375,446,1.691,469,2.409,470,1.769,471,1.769,472,1.562,486,5.498,487,4.499,488,2.902,489,5.207,490,3.234,491,3.234,492,3.952,493,3.952,494,3.952,495,2.762,496,3.234,497,3.952,498,2.762,499,4.493,500,3.952,501,4.493,502,4.493,503,4.493,504,4.493,505,3.677,506,4.493,507,4.493,508,4.824,509,2.94,510,2.902,511,2.902,512,1.691,513,3.952,514,2.902,515,2.902,516,2.902,517,2.902,518,2.902,519,2.902,520,2.902,521,2.375,522,2.902,523,2.902,524,2.902,525,2.375,526,4.493,527,2.902,528,2.375,529,2.902,530,2.902,531,2.902,532,2.902,533,2.902,534,2.902,535,1.39,536,2.902,537,2.902,538,1.769,539,2.902,540,1.769,541,2.902,542,2.028,543,2.902,544,2.902,545,2.902,546,2.902,547,4.493,548,3.677,549,2.375,550,2.902,551,2.375,552,2.902,553,2.375,554,5.207,555,3.952,556,2.902,557,2.902,558,2.028,559,2.028,560,2.902,561,2.902,562,2.902,563,2.902,564,2.902,565,2.902]],["title/interfaces/Devices.html",[0,0.257,37,0.257]],["body/interfaces/Devices.html",[0,0.457,2,0.878,3,0.305,4,0.252,5,0.305,7,0.374,9,0.607,11,0.576,15,0.813,16,0.361,18,1.203,19,0.971,20,0.707,22,0.201,23,0.854,24,0.421,25,0.421,26,0.476,27,0.044,31,1.045,32,0.624,34,0.252,37,0.345,38,0.551,44,0.878,45,1.098,46,1.179,47,0.702,50,1.179,51,1.179,57,0.756,58,0.755,63,0.345,68,0.484,70,0.578,71,0.958,72,1.203,76,0.868,77,1.203,80,1.077,90,0.786,91,0.275,94,0.974,100,0.818,104,0.854,107,1.06,113,0.786,114,0.786,118,0.813,122,0.961,124,0.961,130,1.342,132,0.02,133,0.028,134,0.02,150,0.702,154,0.756,171,0.663,174,1.203,176,1.203,199,1.306,245,0.961,255,1.092,257,1.219,259,1.364,285,1.364,287,2.048,288,1.868,289,1.321,331,0.878,349,1.496,350,1.342,425,1.092,475,0.979,512,1.669,535,2.291,566,1.364,567,2.099,568,1.342,569,1.868,570,2.576,571,1.868,572,2.048,573,2.291,574,1.868,575,1.496,576,1.364,577,2.145,578,2.07,579,1.364,580,1.53,581,2.291,582,1.364,583,1.092,584,1.364,585,1.533,586,1.364,587,1.364,588,2.099,589,1.496,590,1.364,591,1.364,592,1.364,593,1.364,594,1.364,595,1.724,596,1.364,597,1.496,598,1.669,599,0.979,600,1.219,601,1.533,602,1.219,603,1.364,604,1.533,605,1.364,606,1.219,607,1.868,608,1.364,609,1.364,610,2.4,611,1.533,612,1.533,613,1.669,614,1.533,615,2.576,616,1.533,617,1.533,618,1.533,619,2.099,620,1.364,621,1.533,622,1.533,623,2.099,624,1.533,625,1.868,626,1.533,627,1.533,628,2.099,629,1.868,630,1.219,631,2.099,632,1.533,633,0.979,634,2.099,635,1.364,636,1.669,637,1.364,638,1.533,639,1.533,640,1.533,641,1.219,642,1.364,643,1.533,644,1.533,645,1.533,646,1.364,647,1.669,648,1.868,649,1.669,650,1.364,651,1.868,652,1.496,653,1.364,654,1.219,655,1.219,656,1.364,657,1.364,658,1.219,659,1.219,660,1.364,661,1.533]],["title/interfaces/IceServer.html",[0,0.257,652,1.114]],["body/interfaces/IceServer.html",[0,0.457,2,0.879,3,0.305,4,0.252,5,0.305,7,0.374,9,0.607,11,0.576,15,0.813,16,0.361,18,1.203,19,0.971,20,0.707,22,0.201,23,0.855,24,0.421,25,0.421,26,0.476,27,0.044,31,1.045,32,0.624,34,0.252,37,0.252,38,0.552,44,0.879,45,1.098,46,1.179,47,0.702,50,0.702,51,0.702,57,0.756,58,0.756,63,0.345,68,0.484,70,0.512,71,0.931,72,0.879,76,0.868,77,0.879,80,1.077,90,0.787,91,0.275,94,0.975,100,0.818,104,0.855,107,1.06,113,0.787,114,0.787,118,0.813,122,0.962,124,0.962,130,1.342,132,0.02,133,0.028,134,0.02,150,0.702,154,0.756,171,0.663,172,1.476,174,1.203,176,0.879,199,1.306,245,0.962,255,1.093,257,1.22,259,1.365,285,1.365,287,2.049,288,1.869,289,1.321,331,0.879,349,1.497,350,1.342,425,1.093,475,0.98,512,1.67,535,1.365,566,1.365,567,1.534,568,1.342,569,1.869,570,2.576,571,1.869,572,2.049,573,2.292,574,1.869,575,1.497,576,1.365,577,2.146,578,2.07,579,1.365,580,1.531,581,2.292,582,1.365,583,1.093,584,1.365,585,1.534,586,1.365,587,1.365,588,2.1,589,1.497,590,1.365,591,1.365,592,1.365,593,1.365,594,1.365,595,1.725,596,1.365,597,1.497,598,1.67,599,0.98,600,1.22,601,1.534,602,1.22,603,1.365,604,1.534,605,1.365,606,1.22,607,1.869,608,1.365,609,1.365,610,2.401,611,1.534,612,1.534,613,1.67,614,1.534,615,2.576,616,1.534,617,1.534,618,1.534,619,2.1,620,1.365,621,1.534,622,1.534,623,2.1,624,1.534,625,1.869,626,1.534,627,1.534,628,2.1,629,1.869,630,1.22,631,2.1,632,1.534,633,0.98,634,2.1,635,1.365,636,1.905,637,1.365,638,1.534,639,1.534,640,1.534,641,1.22,642,1.365,643,1.534,644,1.534,645,1.534,646,1.365,647,1.67,648,1.869,649,1.67,650,1.365,651,1.869,652,1.836,653,1.869,654,1.67,655,1.22,656,1.365,657,1.365,658,1.67,659,2.049,660,2.292,661,2.576,662,2.333]],["title/modules/JanusModule.html",[663,1.771,664,1.563]],["body/modules/JanusModule.html",[3,0.395,4,0.326,5,0.395,7,0.374,27,0.044,34,0.515,36,0.628,68,0.326,91,0.326,132,0.027,133,0.033,134,0.027,135,1.617,142,3.023,195,1.139,221,1.271,226,1.617,228,1.617,230,1.444,232,1.617,235,1.617,236,1.715,241,2.582,487,3.023,521,3.023,663,2.252,664,3.24,665,2.582,666,1.988,667,3.531,668,3.023,669,2.582,670,4.135,671,3.023,672,3.023,673,3.023,674,3.787,675,3.023,676,3.023,677,3.694,678,3.787,679,4.627,680,3.023,681,4.627,682,3.694,683,3.023,684,3.694,685,3.694,686,3.694,687,3.694,688,4.627,689,3.694,690,3.023,691,3.694,692,3.023,693,3.694,694,5.052,695,3.023,696,3.787,697,3.694,698,3.787,699,3.023,700,3.023]],["title/components/JanusVideoroomComponent.html",[109,0.257,230,0.716]],["body/components/JanusVideoroomComponent.html",[0,0.346,1,1.097,3,0.199,4,0.164,5,0.199,7,0.354,9,0.236,11,0.275,13,1.54,15,0.316,16,0.236,19,0.554,20,0.754,22,0.131,24,0.578,25,0.422,26,0.583,27,0.044,34,0.434,35,1.302,36,0.316,37,0.473,38,0.675,42,1.825,44,1.206,45,0.407,48,1.05,52,0.891,57,0.758,58,0.818,60,0.705,63,0.394,68,0.164,69,0.984,70,0.199,71,0.758,76,0.791,78,0.79,80,1.503,85,0.513,90,0.513,91,0.328,94,0.977,100,0.659,103,0.984,107,0.758,109,0.473,110,2.135,111,0.891,114,1.08,115,1.37,116,1.001,117,1.839,118,0.486,119,1.097,121,2.052,122,1.099,123,1.5,125,0.796,132,0.013,133,0.021,134,0.013,135,0.513,136,0.984,137,0.713,138,0.796,139,0.796,140,0.796,147,1.097,148,1.492,150,0.458,151,1.224,152,1.224,153,1.886,154,0.98,155,0.796,157,1.097,159,1.224,163,1.674,164,1.54,165,1.097,168,2.072,170,1.097,171,0.789,172,0.882,174,0.882,175,1.199,178,1.224,185,0.796,186,1.886,189,2.013,190,0.796,191,1.001,192,1.744,193,1.001,194,1.134,195,0.574,199,1.237,200,1.62,202,1.224,205,0.796,207,1.691,221,0.64,222,0.713,223,1.674,224,0.796,225,1.224,226,0.513,227,0.796,228,0.513,229,0.796,230,0.964,231,0.796,232,0.513,233,0.713,234,0.796,235,0.513,236,0.574,237,0.713,238,0.796,239,0.796,245,0.705,249,1.669,255,1.097,261,1.876,271,1.37,284,1.999,289,0.79,290,1.522,295,2.853,311,1.999,314,1.37,319,1.3,321,1.522,327,1.522,329,1.199,331,1.075,341,2.436,344,1.54,345,0.891,347,1.001,348,0.891,349,0.713,350,0.64,351,1.001,358,0.891,371,1.001,372,1.001,373,1.001,380,1.522,382,1.3,400,1.001,418,1.999,420,1.744,422,1.134,427,1.999,446,1.224,463,3.202,466,1.134,491,2.341,509,2.385,538,1.134,540,1.134,542,1.999,568,0.984,575,1.097,580,0.64,583,1.781,587,1.37,589,1.337,595,1.534,597,1.097,599,0.64,630,2.052,633,0.64,636,1.674,642,1.669,648,1.37,649,2.218,652,1.337,654,1.224,655,1.224,656,0.891,657,0.891,658,1.674,659,1.224,660,1.873,662,1.522,669,1.999,683,4.456,701,5.444,702,1.86,703,2.341,704,2.861,705,2.341,706,2.861,707,2.341,708,2.341,709,1.999,710,2.341,711,2.861,712,3.913,713,2.861,714,2.436,715,3.293,716,2.436,717,4.795,718,3.485,719,2.861,720,4.795,721,3.202,722,4.224,723,3.509,724,3.457,725,3.924,726,3.485,727,1.86,728,1.86,729,1.86,730,2.861,731,1.86,732,3.913,733,1.86,734,2.734,735,2.861,736,3.202,737,2.861,738,2.861,739,1.86,740,3.202,741,2.341,742,2.861,743,2.861,744,2.861,745,2.861,746,1.999,747,1.37,748,2.861,749,2.861,750,2.341,751,2.861,752,2.861,753,2.861,754,1.86,755,2.861,756,2.861,757,1.86,758,2.341,759,3.913,760,2.861,761,2.341,762,1.86,763,2.861,764,3.913,765,1.86,766,2.861,767,2.861,768,1.86,769,1.86,770,1.86,771,2.341,772,2.341,773,1.86,774,3.202,775,3.202,776,2.861,777,2.341,778,1.86,779,1.86,780,1.3,781,1.86,782,1.86,783,1.86,784,1.86,785,1.86,786,1.86,787,1.86,788,1.86,789,1.86,790,1.86,791,3.485,792,1.86,793,1.86,794,1.3,795,1.86,796,1.86,797,1.86,798,1.522,799,1.134,800,1.86,801,1.86,802,3.913,803,3.913,804,3.913,805,1.522,806,1.86,807,1.86,808,1.86,809,2.861,810,1.86,811,1.86,812,1.86,813,1.86,814,1.134,815,1.86,816,2.861,817,1.3,818,1.522,819,1.86,820,1.522,821,1.86,822,1.3,823,1.522,824,1.86,825,1.86,826,1.522,827,1.86,828,1.522,829,1.86,830,1.522,831,1.999,832,1.86,833,1.86,834,1.86,835,1.86,836,1.3,837,1.86,838,1.522,839,1.522,840,1.86,841,2.861,842,2.861,843,1.86,844,1.86,845,1.86,846,1.86,847,1.86,848,1.86,849,1.86,850,1.86,851,1.86,852,1.86,853,1.86,854,1.86,855,3.913,856,1.744,857,1.86,858,1.86,859,1.86,860,1.86,861,2.861,862,1.86,863,1.86,864,1.86,865,1.86,866,2.861,867,1.86,868,1.86,869,1.86,870,1.86,871,2.861,872,1.86,873,1.86,874,1.86,875,1.86,876,1.86,877,1.86,878,1.86,879,1.86,880,1.86,881,1.522,882,1.86,883,1.86,884,1.86,885,1.86]],["title/interfaces/PublishOwnFeedEvent.html",[0,0.257,69,0.999]],["body/interfaces/PublishOwnFeedEvent.html",[0,0.469,1,1.586,2,0.958,3,0.443,4,0.274,5,0.333,6,1.894,7,0.375,8,1.894,9,0.394,10,2.78,11,0.832,12,1.894,13,1.672,14,2.227,15,0.878,16,0.687,17,1.191,18,0.958,19,1.09,20,0.763,21,1.894,22,0.219,23,0.906,24,0.784,25,0.732,26,0.531,27,0.044,28,1.981,29,2.522,30,1.488,31,0.602,32,0.906,33,1.894,34,0.365,35,1.529,36,0.528,37,0.469,38,0.801,39,1.894,40,1.784,41,2.227,42,1.706,43,2.522,44,1.529,45,0.906,46,1.019,47,1.019,48,1.019,49,1.981,50,1.309,51,1.309,52,1.981,53,2.522,54,1.981,55,2.522,56,2.543,57,0.703,58,0.96,59,2.446,60,1.408,61,2.227,62,1.981,63,0.365,64,2.227,65,2.522,66,2.522,67,2.669,68,0.438,69,1.423,70,0.531,71,0.965,72,1.276,73,3.023,74,3.023,75,3.023,76,0.823,77,1.276,78,1.142,79,2.522,80,1.369,81,2.522,82,2.522,83,2.522,84,2.522,85,1.142,86,2.522,87,2.375,88,2.522,89,2.227,90,1.142,91,0.375,92,2.522,93,2.227,94,1.019,95,1.77,96,1.672,97,1.784,98,2.227,99,1.894,100,0.459,101,1.488,102,1.894,103,1.069,104,0.906,105,1.894,106,1.488,107,0.602,108,1.894,109,0.274,110,1.488,111,1.488,112,1.672,113,0.858,114,1.142,115,1.488,116,1.672,117,1.191,118,0.703,119,1.586,120,1.894,121,1.33,122,1.019,123,1.191,124,0.765,125,1.33,126,1.894,127,1.894,128,1.191,129,1.894,130,1.069,131,1.33,132,0.022,133,0.03,134,0.022]],["title/interfaces/Publisher.html",[0,0.257,100,0.429]],["body/interfaces/Publisher.html",[0,0.461,2,0.83,3,0.288,4,0.238,5,0.288,7,0.376,9,0.623,11,0.638,15,0.835,16,0.341,18,1.332,19,0.951,20,0.726,22,0.19,23,0.822,24,0.398,25,0.398,26,0.5,27,0.044,31,1.031,32,0.59,34,0.238,37,0.238,38,0.521,44,1.157,45,1.076,46,1.151,47,0.663,50,0.663,51,0.663,57,0.835,58,0.836,63,0.381,68,0.478,70,0.5,71,0.956,72,0.83,76,0.858,77,0.83,80,1.192,90,1.036,91,0.265,94,1.076,100,0.841,104,0.822,107,1.072,113,1.036,114,1.036,118,0.794,122,0.924,124,0.924,130,1.607,132,0.019,133,0.027,134,0.019,150,0.663,154,0.835,171,0.734,174,1.157,176,0.83,199,1.286,245,1.064,255,1.439,257,1.606,259,1.797,285,1.797,287,1.999,288,2.068,289,1.356,331,0.83,349,1.439,350,1.29,425,1.032,475,1.29,512,1.848,535,1.289,566,1.289,567,1.449,568,1.29,569,1.797,570,2.514,571,1.797,572,1.999,573,2.237,574,1.797,575,1.439,576,1.289,577,2.102,578,2.042,579,1.289,580,1.485,581,2.237,582,1.289,583,1.032,584,1.289,585,1.449,586,1.289,587,1.289,588,2.019,589,1.439,590,1.289,591,1.289,592,1.289,593,1.289,594,1.289,595,1.86,596,1.289,597,1.656,598,1.606,599,0.926,600,1.152,601,1.449,602,1.152,603,1.289,604,1.449,605,1.289,606,1.152,607,2.352,608,1.289,609,1.289,610,2.651,611,1.449,612,1.449,613,1.606,614,1.449,615,2.866,616,2.019,617,2.019,618,2.019,619,2.514,620,1.797,621,2.019,622,2.019,623,2.514,624,2.019,625,2.237,626,2.019,627,2.019,628,2.514,629,2.237,630,1.606,631,2.514,632,2.019,633,1.29,634,2.514,635,1.797,636,1.848,637,1.797,638,2.019,639,2.019,640,2.019,641,1.606,642,1.797,643,2.019,644,2.019,645,2.019,646,1.289,647,1.606,648,1.797,649,1.606,650,1.289,651,1.797,652,1.439,653,1.289,654,1.152,655,1.152,656,1.289,657,1.289,658,1.152,659,1.152,660,1.289,661,1.449]],["title/interfaces/RemoteFeed.html",[0,0.257,25,0.429]],["body/interfaces/RemoteFeed.html",[0,0.451,2,0.843,3,0.292,4,0.241,5,0.292,7,0.377,9,0.596,11,0.643,15,0.869,16,0.346,18,1.343,19,1.051,20,0.695,22,0.193,23,0.83,24,0.404,25,0.56,26,0.561,27,0.044,31,1.092,32,0.83,34,0.241,37,0.241,38,0.529,44,0.843,45,1.082,46,1.159,47,0.673,50,0.673,51,0.673,57,0.74,58,0.734,63,0.335,68,0.479,70,0.503,71,0.958,72,0.843,76,0.86,77,0.843,80,1.047,90,0.754,91,0.332,94,0.954,100,0.833,104,1.03,107,1.111,113,0.754,114,0.754,118,0.799,122,0.934,124,1.159,130,1.304,132,0.02,133,0.027,134,0.02,150,0.673,154,0.74,171,0.74,174,1.343,176,0.843,199,1.292,245,1.073,255,1.048,257,1.17,259,1.309,285,1.309,287,2.012,288,1.815,289,1.411,331,0.843,349,1.803,350,1.304,425,1.048,475,0.94,512,1.863,535,1.309,566,1.309,567,1.471,568,1.304,569,1.815,570,2.531,571,1.815,572,2.012,573,2.252,574,1.815,575,1.454,576,1.309,577,2.114,578,2.049,579,1.309,580,1.497,581,2.252,582,1.309,583,1.048,584,1.309,585,1.471,586,1.309,587,1.309,588,2.041,589,1.454,590,1.309,591,1.309,592,1.309,593,1.309,594,1.309,595,1.699,596,1.815,597,1.67,598,1.863,599,1.304,600,1.17,601,2.041,602,2.012,603,2.252,604,2.041,605,1.815,606,2.012,607,2.365,608,1.309,609,1.309,610,2.365,611,2.041,612,2.041,613,2.188,614,2.343,615,2.531,616,1.471,617,1.471,618,1.471,619,2.041,620,1.309,621,1.471,622,1.471,623,2.041,624,1.471,625,1.815,626,1.471,627,1.471,628,2.041,629,1.815,630,1.17,631,2.041,632,1.471,633,0.94,634,2.041,635,1.309,636,1.623,637,1.309,638,1.471,639,1.471,640,1.471,641,1.17,642,1.309,643,1.471,644,1.471,645,1.471,646,1.309,647,1.623,648,1.815,649,1.623,650,1.309,651,1.815,652,1.454,653,1.309,654,1.17,655,1.17,656,1.309,657,1.309,658,1.17,659,1.17,660,1.309,661,1.471]],["title/interfaces/RequestSubstreamEvent.html",[0,0.257,103,0.999]],["body/interfaces/RequestSubstreamEvent.html",[0,0.477,1,1.652,2,1.019,3,0.461,4,0.292,5,0.354,6,2.014,7,0.381,8,2.014,9,0.419,10,2.836,11,0.841,12,2.014,13,1.778,14,2.319,15,0.918,16,0.685,17,1.267,18,1.019,19,1.123,20,0.75,21,2.014,22,0.233,23,0.944,24,0.798,25,0.798,26,0.461,27,0.044,28,2.296,29,2.922,30,1.582,31,0.64,32,0.944,33,2.014,34,0.381,35,1.567,36,0.562,37,0.465,38,0.834,39,2.014,40,1.652,41,1.778,42,1.482,43,2.014,44,1.329,45,0.724,46,0.814,47,0.814,48,1.05,49,1.582,50,1.062,51,1.062,52,1.582,53,2.014,54,1.582,55,2.014,56,2.063,57,0.562,58,0.834,59,2.312,60,1.331,61,1.778,62,1.582,63,0.292,64,1.778,65,2.014,66,2.014,67,2.319,68,0.449,69,1.137,70,0.461,71,0.935,72,1.019,73,2.626,74,2.626,75,2.626,76,0.708,77,1.019,78,0.912,79,2.014,80,1.323,81,2.014,82,2.014,83,2.014,84,2.014,85,0.912,86,2.014,87,1.582,88,2.014,89,1.778,90,0.912,91,0.358,92,2.014,93,1.778,94,0.724,95,2.052,96,2.319,97,2.021,98,2.523,99,2.626,100,0.636,101,2.063,102,2.626,103,1.482,104,1.05,105,2.626,106,2.433,107,0.928,108,2.014,109,0.292,110,1.582,111,1.582,112,1.778,113,0.912,114,1.189,115,1.582,116,1.778,117,1.267,118,0.732,119,1.652,120,2.014,121,1.414,122,1.062,123,1.267,124,0.814,125,1.414,126,2.014,127,2.014,128,1.267,129,2.014,130,1.137,131,1.414,132,0.024,133,0.031,134,0.024]],["title/interfaces/RoomInfo.html",[0,0.257,24,0.429]],["body/interfaces/RoomInfo.html",[0,0.452,2,0.846,3,0.294,4,0.242,5,0.294,7,0.392,9,0.678,11,0.561,15,0.8,16,0.348,18,1.172,19,0.958,20,0.696,22,0.193,23,0.833,24,0.561,25,0.405,26,0.573,27,0.044,31,1.093,32,0.601,34,0.242,37,0.242,38,0.531,44,0.846,45,1.083,46,1.219,47,0.937,50,0.676,51,0.676,57,0.8,58,0.845,63,0.385,68,0.48,70,0.504,71,0.952,72,0.846,76,0.86,77,0.846,80,1.049,90,0.757,91,0.268,94,1.083,100,0.812,104,0.833,107,1.106,113,0.757,114,0.757,118,0.8,122,0.937,124,0.937,130,1.307,132,0.02,133,0.027,134,0.02,150,0.937,154,0.8,171,0.646,174,1.172,176,0.846,199,1.293,245,0.937,255,1.052,257,1.174,259,1.313,285,1.313,287,2.016,288,2.089,289,1.3,331,1.172,349,1.458,350,1.62,425,1.052,475,0.943,512,1.627,535,1.313,566,1.313,567,1.476,568,1.307,569,1.82,570,2.535,571,1.82,572,2.016,573,2.255,574,1.82,575,1.458,576,1.313,577,2.19,578,2.108,579,1.313,580,1.84,581,2.255,582,1.313,583,1.458,584,1.82,585,2.046,586,2.255,587,1.82,588,2.348,589,1.673,590,2.255,591,1.313,592,1.82,593,2.255,594,1.313,595,1.868,596,1.313,597,1.458,598,1.627,599,0.943,600,1.174,601,1.476,602,1.174,603,1.313,604,1.476,605,1.313,606,1.174,607,1.82,608,1.313,609,1.313,610,2.368,611,1.476,612,1.476,613,1.627,614,1.476,615,2.535,616,1.476,617,1.476,618,1.476,619,2.046,620,1.313,621,1.476,622,1.476,623,2.046,624,1.476,625,1.82,626,1.476,627,1.476,628,2.046,629,1.82,630,1.174,631,2.046,632,1.476,633,0.943,634,2.046,635,1.313,636,1.627,637,1.313,638,1.476,639,1.476,640,1.476,641,1.174,642,1.313,643,1.476,644,1.476,645,1.476,646,1.313,647,1.627,648,1.82,649,1.627,650,1.313,651,1.82,652,1.458,653,1.313,654,1.174,655,1.174,656,1.313,657,1.313,658,1.174,659,1.174,660,1.313,661,1.476]],["title/components/SelfVideoComponent.html",[109,0.257,232,0.802]],["body/components/SelfVideoComponent.html",[3,0.277,4,0.229,5,0.277,7,0.183,9,0.328,11,0.539,16,0.463,20,0.382,22,0.183,24,0.779,26,0.453,27,0.044,31,0.707,32,0.926,34,0.322,35,1.304,36,0.44,37,0.509,40,1.927,47,1.132,48,0.567,50,0.9,51,1.132,52,2.025,56,1.24,57,0.44,58,0.501,59,1.966,60,1.132,63,0.229,68,0.229,69,0.89,70,0.453,76,0.539,78,1.008,85,1.337,87,1.24,91,0.388,109,0.48,118,0.854,123,0.993,132,0.019,133,0.026,134,0.019,135,0.715,136,1.256,137,0.993,138,1.108,139,1.108,140,1.108,146,2.552,147,1.4,148,1.81,149,2.578,150,0.638,151,1.562,152,1.562,153,2.056,154,0.934,155,1.108,156,2.552,157,1.4,159,1.562,163,1.562,164,1.965,165,1.622,168,1.857,170,0.993,171,0.719,172,0.798,175,1.256,178,1.108,185,1.108,186,1.761,187,1.809,189,1.622,190,1.108,195,0.798,197,1.809,199,0.9,200,1.622,205,1.108,207,1.256,211,2.578,221,0.89,222,0.993,223,1.966,224,1.108,225,1.562,226,0.715,227,1.108,228,0.715,229,1.108,230,0.638,231,1.108,232,1.268,233,2.107,234,1.108,235,0.715,236,0.798,237,0.993,238,1.108,239,1.108,245,1.042,257,1.562,271,1.748,306,2.276,309,1.809,310,2.578,314,1.24,329,1.256,350,0.89,351,1.393,361,2.199,407,1.809,408,1.24,420,2.225,431,3.063,443,1.809,446,1.81,465,1.809,466,3.063,467,2.956,468,1.809,469,1.578,470,1.578,471,1.578,472,1.965,473,1.809,475,1.256,476,3.21,479,3.685,480,2.119,481,3.512,484,2.552,498,1.809,525,2.119,528,2.119,538,1.578,540,1.578,558,3.21,559,2.552,577,1.108,578,1.4,580,0.89,591,1.24,596,1.748,599,0.89,625,1.24,650,1.24,692,4.113,715,2.225,746,1.809,747,1.748,774,2.988,777,2.988,780,2.552,794,1.809,814,1.578,817,2.552,822,1.809,831,2.552,856,2.225,886,5.025,887,2.589,888,3.651,889,3.651,890,3.651,891,2.589,892,3.461,893,3.651,894,2.589,895,2.589,896,2.589,897,3.651,898,4.229,899,2.589,900,2.589,901,3.651,902,2.988,903,3.651,904,2.589,905,2.589,906,2.589,907,2.589,908,3.651,909,2.589,910,2.589,911,2.589,912,2.589,913,2.589,914,2.589,915,2.589,916,2.119,917,2.589,918,2.589,919,4.229,920,2.589,921,2.589,922,1.809,923,2.589,924,2.589,925,3.651,926,2.589,927,2.589,928,2.119,929,2.589,930,2.589,931,3.651,932,2.589,933,2.589,934,2.589,935,2.589,936,2.119,937,2.119,938,2.589,939,2.119,940,2.589,941,2.589,942,2.589,943,2.589,944,2.589,945,2.119,946,2.589,947,2.988,948,2.589,949,4.316,950,2.589,951,2.589,952,2.589,953,2.589,954,2.589,955,3.651,956,2.119,957,2.119,958,2.589,959,2.589,960,2.589,961,2.589,962,2.589,963,2.589,964,2.119,965,2.119,966,4.226,967,2.119,968,2.119,969,2.119,970,2.119,971,2.988,972,2.119,973,2.119,974,2.119,975,2.119,976,2.988,977,2.988,978,2.119,979,2.119,980,2.119,981,2.119,982,2.119,983,2.119,984,2.119,985,3.461,986,2.119,987,2.119,988,2.119,989,2.119,990,2.119,991,2.119,992,2.119,993,2.119,994,2.988,995,2.119,996,1.809,997,2.119,998,2.119,999,2.119]],["title/components/VideoBoxComponent.html",[109,0.257,235,0.802]],["body/components/VideoBoxComponent.html",[3,0.219,4,0.181,5,0.219,7,0.144,9,0.259,11,0.607,15,0.522,16,0.39,17,1.575,20,0.302,22,0.261,23,0.673,25,0.791,26,0.551,27,0.044,32,0.809,34,0.436,35,1.358,36,0.347,37,0.494,38,0.396,42,1.057,45,0.448,48,0.448,57,0.748,58,0.595,59,0.875,60,0.91,63,0.181,68,0.181,70,0.495,71,0.347,76,0.302,78,0.848,85,0.848,91,0.403,94,0.809,95,1.581,97,1.774,100,0.454,103,0.703,104,1.082,106,1.967,107,0.715,109,0.389,117,0.784,124,1.14,128,0.784,132,0.015,133,0.022,134,0.015,135,0.564,136,1.057,137,0.784,138,0.875,139,0.875,140,0.875,143,1.673,146,2.871,147,1.179,148,1.581,149,2.251,150,0.504,151,1.315,152,1.315,153,1.937,154,0.858,155,0.875,156,2.581,157,1.179,158,2.516,159,1.315,160,2.516,161,1.654,162,2.516,163,1.315,164,1.654,165,1.179,166,1.673,167,3.233,168,2.053,170,1.689,171,0.839,172,1.358,174,1.358,175,1.591,176,1.523,177,1.874,178,1.98,179,2.148,180,1.874,182,2.516,184,2.516,185,1.98,186,2.133,187,1.429,189,1.575,190,0.875,191,1.1,192,1.874,194,1.246,195,1.139,196,2.516,197,1.429,198,1.673,199,1.245,200,1.575,201,1.673,202,1.758,205,0.875,206,1.673,207,1.057,210,1.673,211,1.246,213,1.673,214,1.673,218,1.673,220,1.673,221,0.703,222,0.784,223,1.758,224,0.875,225,1.315,226,0.564,227,0.875,228,0.564,229,0.875,230,0.504,231,0.875,232,0.564,233,0.784,234,0.875,235,1.134,236,0.63,237,0.784,238,0.875,239,0.875,245,0.91,261,1.988,264,3.078,267,3.362,271,1.472,289,0.848,299,2.516,306,1.654,310,2.504,314,1.769,318,2.148,319,1.429,329,1.698,330,2.516,340,1.673,343,3.078,344,1.654,345,0.979,346,1.673,347,1.1,348,0.979,351,1.1,358,0.979,361,2.364,370,1.673,371,1.1,372,1.1,373,1.1,375,1.673,395,3.362,400,1.1,408,1.967,420,1.246,426,1.429,431,2.684,443,1.429,446,1.581,465,1.429,466,2.82,467,2.581,468,1.429,469,1.874,470,1.246,471,2.251,472,1.654,473,1.429,475,1.057,476,2.871,479,2.581,481,2.581,484,2.148,485,2.516,498,1.429,558,1.429,559,2.871,568,1.057,605,1.472,606,1.581,613,1.758,633,0.703,647,1.315,695,4.425,716,2.581,746,1.429,747,0.979,780,1.429,794,1.429,814,1.246,836,1.429,892,3.023,902,2.516,916,1.673,928,1.673,945,2.516,947,1.673,949,3.786,956,2.516,957,2.516,964,1.673,965,1.673,966,4.042,967,1.673,968,1.673,969,1.673,970,1.673,971,2.516,972,1.673,973,1.673,974,1.673,975,1.673,976,2.516,977,3.023,978,1.673,979,1.673,980,1.673,981,1.673,982,1.673,983,1.673,984,1.673,985,3.023,986,1.673,987,1.673,988,1.673,989,1.673,990,1.673,991,1.673,992,1.673,993,1.673,994,2.516,995,1.673,996,1.429,997,1.673,998,1.673,999,1.673,1000,4.425,1001,2.516,1002,3.074,1003,3.074,1004,3.074,1005,3.074,1006,3.074,1007,2.516,1008,2.148,1009,2.045,1010,4.626,1011,3.074,1012,3.074,1013,4.404,1014,2.045,1015,2.045,1016,2.045,1017,2.045,1018,2.045,1019,4.108,1020,4.108,1021,3.362,1022,2.045,1023,3.074,1024,2.045,1025,3.074,1026,3.074,1027,2.045,1028,2.045,1029,3.023,1030,2.045,1031,3.074,1032,3.928,1033,3.074,1034,2.045,1035,2.045,1036,3.023,1037,3.074,1038,3.074,1039,2.045,1040,1.429,1041,1.673,1042,2.045,1043,2.045,1044,2.045,1045,2.045,1046,2.045,1047,2.045,1048,2.045,1049,3.074,1050,2.045,1051,2.045,1052,2.045,1053,3.074,1054,3.074,1055,2.045,1056,2.045,1057,2.045,1058,2.045,1059,3.694,1060,2.045,1061,2.045,1062,2.045,1063,2.045,1064,2.045,1065,1.673,1066,2.045,1067,2.045,1068,2.045,1069,2.045,1070,2.045,1071,3.074,1072,2.045,1073,1.429,1074,3.074,1075,2.045,1076,2.045,1077,2.045,1078,2.045,1079,2.045,1080,2.045,1081,1.673,1082,2.045,1083,2.045,1084,3.074,1085,2.045,1086,2.045,1087,2.045,1088,2.045,1089,2.045,1090,2.045,1091,3.074,1092,2.045,1093,2.045,1094,2.045,1095,2.045,1096,2.045,1097,2.045,1098,2.045,1099,3.074,1100,3.074,1101,2.045,1102,2.045,1103,2.045,1104,2.045,1105,2.045,1106,2.045,1107,1.429,1108,2.045]],["title/interfaces/VideoRoomComponent.html",[0,0.257,121,1.243]],["body/interfaces/VideoRoomComponent.html",[0,0.487,1,1.596,2,0.967,3,0.445,4,0.277,5,0.336,6,1.911,7,0.394,8,1.911,9,0.397,10,2.788,11,0.84,12,1.911,13,1.687,14,2.24,15,0.88,16,0.657,17,1.202,18,0.967,19,1.101,20,0.786,21,1.911,22,0.221,23,0.912,24,0.845,25,0.786,26,0.582,27,0.044,28,1.993,29,2.537,30,1.501,31,0.607,32,1.023,33,1.911,34,0.368,35,1.739,36,0.533,37,0.502,38,0.964,39,1.911,40,1.986,41,1.687,42,1.431,43,1.911,44,1.283,45,0.687,46,0.772,47,0.772,48,0.912,49,1.501,50,1.025,51,1.025,52,1.501,53,1.911,54,1.501,55,1.911,56,1.993,57,0.533,58,0.806,59,2.279,60,1.312,61,1.687,62,1.501,63,0.277,64,1.687,65,1.911,66,1.911,67,2.24,68,0.44,69,1.078,70,0.445,71,0.905,72,0.967,73,2.537,74,2.537,75,2.537,76,0.69,77,0.967,78,0.865,79,1.911,80,1.43,81,1.911,82,1.911,83,1.911,84,1.911,85,0.865,86,1.911,87,1.501,88,1.911,89,1.687,90,0.865,91,0.376,92,1.911,93,1.687,94,0.687,95,2.217,96,1.687,97,1.909,98,2.383,99,1.911,100,0.463,101,1.501,102,1.911,103,1.078,104,1.023,105,1.911,106,1.501,107,0.607,108,2.537,109,0.368,110,1.993,111,1.993,112,2.24,113,1.149,114,1.374,115,1.993,116,2.24,117,1.596,118,0.846,119,2.042,120,2.537,121,1.781,122,1.312,123,1.596,124,1.025,125,1.781,126,2.537,127,2.537,128,1.596,129,2.537,130,1.431,131,2.13,132,0.023,133,0.03,134,0.023,172,1.283]],["title/components/VideoRoomWrapperComponent.html",[109,0.257,236,0.896]],["body/components/VideoRoomWrapperComponent.html",[1,1.535,3,0.317,4,0.261,5,0.317,7,0.423,11,0.437,22,0.209,23,0.877,24,0.773,25,0.67,26,0.611,27,0.044,34,0.473,35,1.651,36,0.503,37,0.462,38,0.879,40,1.74,48,0.877,58,0.775,60,0.986,63,0.261,68,0.261,69,1.377,70,0.317,78,1.105,91,0.403,95,1.942,103,1.377,109,0.473,119,1.74,121,1.266,122,1.118,131,1.942,132,0.021,133,0.029,134,0.021,135,0.817,136,1.377,137,1.135,138,1.266,139,1.266,140,1.266,147,1.535,148,1.942,150,0.729,151,1.713,152,1.713,153,2.117,154,0.938,155,1.266,157,1.535,159,1.713,161,2.155,163,1.713,165,1.535,168,2.175,170,1.135,171,0.771,172,0.912,175,1.672,185,1.713,186,2.053,189,2.008,190,1.266,191,1.593,193,1.593,195,0.912,200,1.74,205,1.266,207,1.561,221,1.018,222,1.135,223,2.081,224,1.266,225,1.713,226,1.253,227,1.266,228,0.817,229,1.266,230,0.729,231,1.266,232,0.817,233,1.135,234,1.266,235,0.817,236,1.499,237,1.74,238,1.266,239,1.266,241,2.068,258,2.422,261,2.442,271,1.917,314,1.417,329,1.672,344,2.155,345,1.417,347,1.593,348,1.417,351,1.593,358,1.417,371,1.593,372,1.593,373,1.593,374,2.422,382,2.068,400,2.442,690,2.422,696,4.673,698,3.714,699,2.422,716,3.171,747,1.417,805,2.422,831,2.068,836,2.068,1000,4.673,1109,2.959,1110,4.538,1111,4.004,1112,4.538,1113,4.862,1114,4.862,1115,2.959,1116,5.237,1117,2.959,1118,2.959,1119,2.959,1120,2.959,1121,2.959,1122,2.959,1123,2.959,1124,2.959,1125,2.959,1126,2.959,1127,2.959,1128,2.959,1129,4.004,1130,4.004,1131,2.959,1132,2.959,1133,4.004,1134,4.004,1135,4.004,1136,2.959,1137,2.959,1138,4.004,1139,2.959,1140,2.959,1141,2.959,1142,2.959,1143,2.959,1144,2.959,1145,2.959,1146,2.959,1147,4.538,1148,2.959,1149,2.959,1150,2.959,1151,2.959,1152,2.959,1153,2.959,1154,2.959,1155,2.959,1156,2.959]],["title/injectables/WebrtcService.html",[509,1.771,1157,2.03]],["body/injectables/WebrtcService.html",[3,0.166,4,0.137,5,0.166,7,0.336,9,0.315,11,0.23,15,0.528,16,0.572,17,0.596,19,0.96,20,0.459,22,0.11,24,0.459,25,0.524,26,0.266,27,0.044,28,1.698,31,0.301,34,0.383,36,0.264,37,0.365,40,0.596,42,0.535,45,0.341,46,0.612,48,0.544,49,1.19,50,1.175,51,1.2,54,0.745,56,1.98,57,0.264,58,0.943,59,1.064,60,1.019,61,0.837,63,0.421,67,0.837,68,0.22,70,0.558,71,0.703,76,0.813,85,1.409,87,1.857,91,0.364,94,0.988,96,0.837,97,1.665,100,0.23,101,0.745,104,0.544,106,1.19,107,0.873,113,0.857,114,0.686,115,1.19,118,0.528,128,1.191,131,0.665,132,0.011,133,0.018,134,0.018,144,1.273,145,1.273,154,0.659,161,1.338,165,1.36,167,1.087,168,1.665,170,0.953,171,0.528,172,0.766,175,0.535,176,1.094,178,0.665,180,0.948,185,1.93,186,2.223,193,0.837,195,0.766,199,0.383,200,1.901,202,0.665,207,1.988,208,3.034,233,0.953,237,1.36,245,0.383,249,1.19,264,1.087,279,2.479,283,1.273,289,0.686,292,2.541,306,1.338,309,1.087,318,1.087,329,1.493,341,3.249,343,1.087,345,0.745,348,0.745,358,0.745,360,2.541,361,2.159,362,3.384,408,0.745,414,1.087,415,1.273,417,1.087,422,0.948,425,0.596,428,1.273,431,1.892,435,2.903,446,2.084,472,0.837,475,0.535,482,1.273,495,1.737,505,2.541,509,2.162,512,0.665,538,1.892,540,2.521,542,1.087,548,2.541,549,1.273,551,1.273,553,1.273,572,0.665,578,0.953,583,0.953,584,0.745,589,1.98,595,1.422,597,0.596,599,0.855,600,1.66,602,1.064,633,1.068,641,0.665,647,0.665,652,0.953,659,0.665,703,1.273,714,2.17,715,1.515,721,2.541,723,2.479,724,2.034,734,1.087,747,1.19,775,1.273,798,1.273,799,0.948,814,0.948,817,2.17,818,2.034,822,1.087,826,3.174,830,2.034,839,1.273,856,3.18,922,1.737,936,1.273,937,2.034,939,1.273,1007,2.034,1008,1.087,1036,2.034,1040,1.087,1041,1.273,1065,1.273,1073,1.087,1081,1.273,1107,1.087,1157,2.17,1158,1.555,1159,1.555,1160,2.486,1161,3.105,1162,2.486,1163,2.486,1164,3.547,1165,3.878,1166,3.105,1167,3.547,1168,1.555,1169,1.555,1170,2.486,1171,1.555,1172,1.555,1173,1.555,1174,1.555,1175,1.555,1176,1.555,1177,2.903,1178,2.486,1179,1.555,1180,3.174,1181,2.486,1182,2.034,1183,1.555,1184,2.486,1185,2.541,1186,1.555,1187,1.555,1188,1.555,1189,1.555,1190,3.105,1191,1.555,1192,1.273,1193,1.555,1194,1.555,1195,1.555,1196,1.555,1197,2.541,1198,1.555,1199,2.486,1200,1.555,1201,1.555,1202,1.555,1203,1.555,1204,2.486,1205,2.034,1206,1.555,1207,2.486,1208,1.555,1209,1.555,1210,1.555,1211,1.555,1212,1.555,1213,1.555,1214,3.105,1215,1.555,1216,1.555,1217,1.555,1218,1.555,1219,3.105,1220,1.555,1221,2.903,1222,1.555,1223,1.555,1224,4.768,1225,1.555,1226,1.555,1227,1.555,1228,1.555,1229,3.105,1230,2.486,1231,1.555,1232,1.555,1233,1.555,1234,1.555,1235,4.65,1236,1.555,1237,1.555,1238,1.555,1239,2.034,1240,1.555,1241,1.555,1242,5.103,1243,2.486,1244,3.105,1245,3.105,1246,2.486,1247,2.486,1248,1.555,1249,1.555,1250,2.486,1251,1.555,1252,1.555,1253,1.555,1254,2.486,1255,2.486,1256,3.105,1257,2.486,1258,1.555,1259,1.555,1260,1.555,1261,1.555,1262,2.486,1263,2.486,1264,1.555,1265,1.555,1266,2.486,1267,1.555,1268,2.486,1269,1.555,1270,2.486,1271,1.555,1272,3.878,1273,3.547,1274,1.555,1275,1.555,1276,4.87,1277,1.555,1278,1.555,1279,2.486,1280,2.486,1281,1.555,1282,1.555,1283,1.555,1284,2.486,1285,1.555,1286,1.555,1287,2.486,1288,2.486,1289,4.87,1290,1.555,1291,2.486,1292,1.555,1293,2.486,1294,2.486,1295,2.486,1296,1.555,1297,1.555,1298,2.486,1299,2.486,1300,1.555,1301,1.555,1302,2.486,1303,1.555,1304,1.555,1305,3.174,1306,1.555,1307,1.273,1308,1.555,1309,1.555,1310,1.555,1311,1.555,1312,2.486,1313,2.034,1314,2.486,1315,1.555,1316,1.555,1317,1.555,1318,1.555,1319,1.555,1320,2.486,1321,2.486,1322,2.486,1323,1.555,1324,1.555,1325,3.547,1326,2.486,1327,1.555,1328,1.555,1329,1.555,1330,1.555,1331,1.555,1332,1.555,1333,1.555,1334,2.486,1335,2.486,1336,2.486,1337,1.555,1338,1.555,1339,1.555,1340,1.555,1341,1.555,1342,1.555,1343,1.555,1344,1.555,1345,1.555,1346,1.555,1347,2.486,1348,1.273,1349,1.555,1350,1.555,1351,1.555,1352,1.555,1353,2.486,1354,1.555,1355,1.555,1356,2.486,1357,1.555,1358,2.486,1359,2.486,1360,2.486,1361,2.034,1362,2.486,1363,1.555,1364,1.555,1365,1.555,1366,1.555,1367,2.71,1368,1.555,1369,1.555,1370,1.555,1371,1.555,1372,1.555,1373,3.547,1374,3.547,1375,1.555,1376,1.273,1377,1.273,1378,1.555,1379,1.555,1380,1.555,1381,1.555,1382,1.555,1383,1.555,1384,2.034,1385,1.273,1386,1.555,1387,1.555,1388,1.555,1389,1.273,1390,1.273,1391,1.555,1392,1.555,1393,1.555,1394,1.555,1395,3.547,1396,1.555,1397,2.486,1398,2.486,1399,1.555,1400,1.273,1401,1.555,1402,1.555,1403,4.135,1404,2.486,1405,1.555,1406,1.555,1407,1.555,1408,1.555,1409,1.555,1410,1.555,1411,1.555,1412,1.555,1413,1.555,1414,1.555,1415,1.555,1416,1.555,1417,1.555,1418,1.555,1419,2.486,1420,1.555,1421,1.273,1422,1.555,1423,1.555,1424,1.555,1425,1.555,1426,3.878,1427,1.555,1428,2.486,1429,1.555,1430,1.555,1431,1.555,1432,1.555,1433,1.555,1434,2.486,1435,1.555,1436,1.555,1437,3.105,1438,1.273,1439,2.486,1440,1.555,1441,1.555,1442,1.555,1443,1.555,1444,1.555,1445,1.555,1446,1.555,1447,1.555,1448,1.273,1449,1.555,1450,1.555,1451,1.555,1452,1.273,1453,1.087,1454,1.555,1455,1.555,1456,1.555,1457,1.555,1458,1.555,1459,1.555,1460,2.486,1461,1.555,1462,1.555,1463,1.555,1464,1.555,1465,1.555,1466,1.273,1467,1.555,1468,1.555,1469,1.555,1470,1.555,1471,1.555,1472,1.555,1473,1.555,1474,1.555,1475,1.555,1476,1.555,1477,2.486,1478,1.555,1479,1.555,1480,1.555,1481,1.555,1482,1.555,1483,1.555,1484,1.555,1485,1.555,1486,1.555,1487,1.555,1488,1.555,1489,1.555,1490,1.555,1491,1.555,1492,1.555,1493,3.878,1494,2.486,1495,2.486,1496,1.555,1497,1.555,1498,1.555]],["title/dependencies.html",[666,1.879,1499,1.99]],["body/dependencies.html",[27,0.042,36,0.784,132,0.033,133,0.038,134,0.033,568,1.588,666,2.846,680,3.778,1500,4.616,1501,4.616,1502,3.778,1503,5.288,1504,3.778,1505,3.778,1506,4.616,1507,4.616]],["title/miscellaneous/enumerations.html",[1508,1.482,1509,2.857]],["body/miscellaneous/enumerations.html",[7,0.292,15,0.703,19,0.801,20,0.611,22,0.292,27,0.044,31,0.96,38,0.96,45,1.206,46,1.222,100,0.733,118,0.843,132,0.03,133,0.036,134,0.03,174,1.276,287,2.357,289,1.142,331,1.864,349,1.902,350,1.706,566,1.981,569,2.375,571,2.375,572,2.357,573,2.637,574,2.375,575,1.902,577,2.122,578,2.192,579,1.981,580,1.706,581,2.637,582,1.981,598,1.771,646,1.981,651,2.375,1508,2.522,1509,3.386,1510,5.507]],["title/index.html",[22,0.171,709,1.699,1511,2.431]],["body/index.html",[4,0.389,7,0.351,16,0.354,17,1.07,19,0.852,20,0.412,27,0.042,34,0.34,36,0.474,37,0.34,42,1.978,49,2.272,54,1.336,62,1.336,63,0.34,64,1.502,68,0.34,70,0.412,71,0.654,80,1.31,89,1.502,90,0.77,91,0.311,93,1.502,98,1.842,100,0.568,101,1.336,109,0.496,110,1.336,111,1.336,112,2.838,113,0.77,117,1.07,118,0.474,123,1.07,124,0.948,125,1.195,132,0.02,133,0.028,134,0.02,137,1.07,147,1.07,153,1.475,154,0.988,157,1.07,171,0.474,175,0.96,177,2.345,178,1.884,179,1.951,180,1.701,189,1.475,195,1.186,202,1.647,208,1.951,222,1.688,230,0.948,245,0.948,248,3.149,249,2.464,250,2.285,255,1.475,256,2.285,284,1.951,286,4.074,289,0.77,308,2.285,310,1.701,312,3.149,329,0.96,367,2.285,407,1.951,414,2.689,417,1.951,418,3.478,421,2.285,422,1.701,425,1.07,426,1.951,427,1.951,490,2.285,495,2.689,496,2.285,568,0.96,575,1.07,576,1.336,583,1.475,592,2.272,595,0.96,597,1.475,598,1.195,620,1.842,629,2.108,630,1.195,633,0.96,635,1.336,636,1.195,637,1.336,641,1.195,649,1.884,653,1.842,654,1.884,658,1.647,663,2.345,664,2.37,666,2.071,667,1.951,678,2.285,700,3.149,705,2.285,707,3.149,708,2.285,709,1.951,710,2.285,715,2.345,723,1.951,725,2.285,734,3.316,736,2.285,740,2.285,741,3.149,747,2.383,750,2.285,758,4.074,761,2.285,771,3.603,772,2.285,820,2.285,823,2.285,828,2.285,838,2.285,881,2.285,922,3.316,996,1.951,1001,3.149,1008,1.951,1021,2.285,1029,2.285,1032,2.285,1073,2.689,1107,1.951,1177,2.285,1180,2.285,1182,2.285,1185,4.074,1205,2.285,1221,3.603,1239,2.285,1305,2.285,1313,2.285,1361,2.285,1367,3.316,1376,2.285,1377,3.149,1384,2.285,1385,2.285,1389,2.285,1400,2.285,1438,2.285,1448,2.285,1452,3.603,1453,1.951,1466,3.149,1499,2.285,1502,2.285,1504,3.149,1505,3.149,1512,5.372,1513,4.745,1514,3.848,1515,4.745,1516,2.791,1517,2.791,1518,2.791,1519,2.791,1520,4.403,1521,2.791,1522,2.791,1523,2.791,1524,2.791,1525,2.791,1526,2.791,1527,2.791,1528,2.791,1529,2.791,1530,2.791,1531,2.791,1532,4.403,1533,2.791,1534,2.791,1535,2.791,1536,2.791,1537,2.791,1538,2.791,1539,3.848,1540,2.791,1541,2.791,1542,2.791,1543,3.848,1544,2.791,1545,3.848,1546,3.848,1547,2.791,1548,3.848,1549,2.791,1550,4.403,1551,4.403,1552,3.848,1553,2.791,1554,4.978,1555,2.791,1556,2.791,1557,3.848,1558,2.791,1559,2.791,1560,3.848,1561,2.791,1562,2.791,1563,2.791,1564,2.791,1565,2.791,1566,4.745,1567,4.403,1568,4.403,1569,2.791,1570,2.791,1571,2.791,1572,2.791,1573,2.791,1574,2.791,1575,2.791,1576,2.285,1577,2.791,1578,2.791,1579,2.791,1580,2.791,1581,3.848,1582,3.848,1583,2.791,1584,2.285,1585,2.791,1586,2.791,1587,3.848,1588,2.791,1589,2.791,1590,2.791,1591,2.791,1592,2.791,1593,2.791,1594,2.791,1595,3.848,1596,2.791,1597,2.791,1598,3.848,1599,2.791,1600,2.791,1601,2.791,1602,2.791,1603,2.791,1604,2.791,1605,2.791,1606,2.791,1607,2.791,1608,2.791,1609,2.791,1610,2.791,1611,2.791,1612,2.791,1613,2.791,1614,3.848,1615,2.791,1616,3.848,1617,2.791,1618,2.791,1619,2.791,1620,3.848,1621,3.848,1622,2.791,1623,4.745,1624,2.791,1625,2.791,1626,2.791,1627,2.791,1628,2.791,1629,2.791,1630,2.791,1631,2.791,1632,2.791,1633,2.791,1634,2.791,1635,2.791,1636,2.791,1637,2.791,1638,2.791,1639,3.848,1640,2.791,1641,2.791,1642,2.791,1643,2.791,1644,2.791,1645,2.791,1646,2.791,1647,2.791,1648,2.791,1649,3.848,1650,2.791,1651,2.791,1652,2.791,1653,2.791,1654,2.791,1655,2.791,1656,2.791,1657,2.791,1658,2.791,1659,2.791,1660,2.791,1661,2.791,1662,2.791,1663,4.403,1664,2.791,1665,2.285,1666,3.848,1667,2.791,1668,2.791]],["title/modules.html",[665,2.763]],["body/modules.html",[27,0.038,132,0.034,133,0.038,134,0.034,664,2.524,665,3.278,1197,3.839,1665,3.839,1669,4.69,1670,4.69]],["title/overview.html",[1671,3.236]],["body/overview.html",[2,1.291,27,0.043,132,0.03,133,0.036,134,0.03,135,1.599,136,1.44,221,1.44,226,1.599,228,1.599,230,1.427,232,1.599,235,1.599,236,1.646,408,2.392,663,3.045,664,3.26,666,2.254,667,2.927,668,3.428,669,2.927,670,3.428,671,3.428,672,3.428,673,3.428,674,4.089,675,3.428,676,3.428,1157,2.927,1671,3.428,1672,4.188,1673,4.188]],["title/miscellaneous/variables.html",[799,2.128,1508,1.482]],["body/miscellaneous/variables.html",[9,0.584,10,2.198,15,0.932,16,0.67,22,0.215,24,0.45,26,0.634,27,0.044,30,1.459,31,1.023,47,1.006,48,1.304,63,0.269,71,0.783,76,0.869,85,0.841,91,0.215,97,1.168,104,0.667,107,0.59,119,1.168,132,0.022,133,0.029,134,0.022,135,0.841,136,1.692,154,0.694,171,0.518,207,1.404,226,0.841,228,0.841,230,0.751,232,0.841,235,0.841,249,1.955,329,1.048,331,1.836,361,2.205,446,1.971,580,1.404,586,1.955,589,1.566,590,1.955,593,1.955,594,1.955,595,1.584,599,1.048,600,1.304,602,1.304,603,1.459,606,1.304,607,1.459,608,1.459,609,1.459,610,1.459,613,1.304,655,1.748,714,2.129,799,1.857,856,3.342,1040,2.854,1192,2.494,1307,3.342,1348,2.494,1367,2.129,1390,2.494,1421,2.494,1453,2.129,1508,1.857,1576,2.494,1584,2.494,1674,4.084,1675,5.854,1676,5.871,1677,4.084,1678,4.084,1679,4.606,1680,4.084,1681,3.047,1682,4.084,1683,4.084,1684,4.084,1685,4.084,1686,4.084,1687,4.084,1688,4.084,1689,4.084,1690,4.084,1691,4.084,1692,4.084,1693,3.047,1694,4.084,1695,4.084,1696,4.084,1697,4.084,1698,4.084,1699,4.084,1700,4.084,1701,4.084,1702,4.084,1703,4.084,1704,3.047,1705,3.047,1706,3.047,1707,4.084,1708,3.047,1709,4.084,1710,3.047,1711,3.047,1712,3.047,1713,3.047,1714,4.084,1715,4.084,1716,3.047,1717,3.047,1718,4.084,1719,3.047,1720,3.047,1721,3.047,1722,3.047,1723,3.047,1724,4.606,1725,3.047,1726,3.047,1727,4.084,1728,5.611,1729,5.483,1730,3.047,1731,3.047,1732,3.047]]],"invertedIndex":[["",{"_index":27,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":361,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["0.24px",{"_index":989,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["000",{"_index":1340,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["0px",{"_index":967,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["1",{"_index":408,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"overview.html":{}}}],["10.0.1",{"_index":1506,"title":{},"body":{"dependencies.html":{}}}],["10.1.1",{"_index":1503,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":466,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["1000",{"_index":1360,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["1080",{"_index":1210,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["10px",{"_index":1103,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["1234",{"_index":1631,"title":{},"body":{"index.html":{}}}],["127",{"_index":634,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["128000",{"_index":1465,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["13",{"_index":1218,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["14px",{"_index":1105,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["15",{"_index":1263,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["16px",{"_index":981,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["1920",{"_index":1209,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["1px",{"_index":949,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["2",{"_index":435,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["2.0.0",{"_index":1501,"title":{},"body":{"dependencies.html":{}}}],["2.29.1",{"_index":1507,"title":{},"body":{"dependencies.html":{}}}],["24px",{"_index":998,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["255",{"_index":994,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["256000",{"_index":1464,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["25px",{"_index":955,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["2px",{"_index":480,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{}}}],["3",{"_index":414,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["30",{"_index":563,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["3px",{"_index":959,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["3rdparty/janus.es",{"_index":1200,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["4",{"_index":415,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["5",{"_index":391,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["50",{"_index":462,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["5px",{"_index":559,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["6",{"_index":1187,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["60",{"_index":565,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["600",{"_index":983,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["64",{"_index":1730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["64000",{"_index":1467,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["7",{"_index":1672,"title":{},"body":{"overview.html":{}}}],["777",{"_index":999,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["85",{"_index":995,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["8ae010",{"_index":974,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["9",{"_index":1673,"title":{},"body":{"overview.html":{}}}],["9999",{"_index":879,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["_attachmediastream",{"_index":1063,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["_attachvideoroomhelper(subscriber",{"_index":1264,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["_createvideoelement(canvasid",{"_index":1394,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["_get_random_string",{"_index":1261,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["_mutevideo(videoelement",{"_index":1366,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["_publishownfeed(audiodeviceid",{"_index":914,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["_setmuted(muted",{"_index":845,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["_sizecanvaselement(videowidth",{"_index":1372,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["_videoelementsafarihacks(videoelement",{"_index":1383,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["a5adb7",{"_index":477,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["absolute",{"_index":484,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["abstracted",{"_index":252,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["accept",{"_index":1667,"title":{},"body":{"index.html":{}}}],["access",{"_index":1083,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["accessors",{"_index":164,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["actual_component",{"_index":239,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["actually",{"_index":1085,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["adapter",{"_index":1621,"title":{},"body":{"index.html":{}}}],["add",{"_index":1377,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["adding",{"_index":407,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"index.html":{}}}],["addition",{"_index":1001,"title":{},"body":{"components/VideoBoxComponent.html":{},"index.html":{}}}],["additional",{"_index":1648,"title":{},"body":{"index.html":{}}}],["adjust",{"_index":926,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["adopt",{"_index":1553,"title":{},"body":{"index.html":{}}}],["advantage",{"_index":1531,"title":{},"body":{"index.html":{}}}],["affect",{"_index":260,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["afterviewinit",{"_index":149,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["afterviewinitran",{"_index":907,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["ahead",{"_index":628,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["align",{"_index":473,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["alldevices",{"_index":541,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["alldevices.filter((device",{"_index":547,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["allow",{"_index":1081,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["allows",{"_index":1181,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["already",{"_index":814,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["alternatively",{"_index":55,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["always",{"_index":1389,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["and/or",{"_index":1570,"title":{},"body":{"index.html":{}}}],["android",{"_index":180,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["angular",{"_index":418,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["angular/common",{"_index":680,"title":{},"body":{"modules/JanusModule.html":{},"dependencies.html":{}}}],["angular/core",{"_index":36,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"dependencies.html":{},"index.html":{}}}],["angular/forms",{"_index":521,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{}}}],["angularincluding",{"_index":1625,"title":{},"body":{"index.html":{}}}],["another",{"_index":129,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["answerremotefeedjsep(jsep",{"_index":1317,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["anyone",{"_index":1586,"title":{},"body":{"index.html":{}}}],["anything",{"_index":761,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["anytime",{"_index":1025,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["api",{"_index":1634,"title":{},"body":{"index.html":{}}}],["app",{"_index":1515,"title":{},"body":{"index.html":{}}}],["app.component.scss",{"_index":1629,"title":{},"body":{"index.html":{}}}],["appcomponent",{"_index":1630,"title":{},"body":{"index.html":{}}}],["application",{"_index":1554,"title":{},"body":{"index.html":{}}}],["appropriate",{"_index":1590,"title":{},"body":{"index.html":{}}}],["arg1",{"_index":1286,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["arg2",{"_index":1284,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["around",{"_index":1180,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["array",{"_index":1718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["aspect",{"_index":1581,"title":{},"body":{"index.html":{}}}],["aspectratio",{"_index":433,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["assign",{"_index":767,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["assigned",{"_index":585,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["assuming",{"_index":307,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["async",{"_index":538,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{}}}],["attach",{"_index":599,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["attach_failed",{"_index":574,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["attach_success",{"_index":1674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["attached",{"_index":287,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["attaching",{"_index":573,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["attachmediastream(elemid",{"_index":1468,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["attachremotefeed",{"_index":131,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["attachremotefeedevent",{"_index":1,"title":{"interfaces/AttachRemoteFeedEvent.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["attachremotestream",{"_index":282,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["attachvideoroom(url",{"_index":1304,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["attempts",{"_index":184,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["attribute",{"_index":1413,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["audio",{"_index":63,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["audio/video",{"_index":647,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["audio_codec",{"_index":608,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["audio_level_average",{"_index":631,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["audioboxcomponent",{"_index":135,"title":{"components/AudioBoxComponent.html":{}},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["audiocontext",{"_index":1349,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["audiodevice",{"_index":524,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["audiodeviceid",{"_index":50,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["audiodevices",{"_index":1213,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["audiodevices.length",{"_index":1217,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["audioid",{"_index":203,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["audioinput",{"_index":549,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"injectables/WebrtcService.html":{}}}],["audiooutput",{"_index":553,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"injectables/WebrtcService.html":{}}}],["audiorecv",{"_index":1457,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["audiosend",{"_index":1321,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["audiotrack",{"_index":1419,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["authentication",{"_index":1617,"title":{},"body":{"index.html":{}}}],["auto",{"_index":1107,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["automatically",{"_index":284,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["autoplay",{"_index":1084,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["available",{"_index":124,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["availableaudiodevices",{"_index":501,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["availablespeakerdevices",{"_index":502,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["availablevideodevices",{"_index":503,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["average",{"_index":626,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["await",{"_index":542,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["away",{"_index":253,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["back",{"_index":588,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["backend",{"_index":635,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["background",{"_index":475,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["bars",{"_index":1378,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["based",{"_index":1591,"title":{},"body":{"index.html":{}}}],["before",{"_index":817,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{}}}],["begin",{"_index":298,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["being",{"_index":604,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["believe",{"_index":1539,"title":{},"body":{"index.html":{}}}],["belongs",{"_index":33,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["below",{"_index":711,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["better",{"_index":427,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["between",{"_index":938,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["bisect",{"_index":440,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["bit",{"_index":424,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["bitrate",{"_index":1006,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["black",{"_index":482,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["block",{"_index":947,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["blocker",{"_index":992,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["body",{"_index":1325,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["body.appendchild(videoelement",{"_index":1387,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["boolean",{"_index":94,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["bootstrap",{"_index":668,"title":{},"body":{"modules/JanusModule.html":{},"overview.html":{}}}],["border",{"_index":479,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["both",{"_index":889,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["box",{"_index":156,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["box'},{'name",{"_index":225,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["box.component",{"_index":688,"title":{},"body":{"modules/JanusModule.html":{}}}],["box.component.html",{"_index":160,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["box.component.scss",{"_index":158,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["box.component.scss,../../styles/video",{"_index":1009,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts",{"_index":143,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["box.component.ts:133",{"_index":1030,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:166",{"_index":1024,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:197",{"_index":1034,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:20",{"_index":181,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["box.component.ts:206",{"_index":1028,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:211",{"_index":1027,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:26",{"_index":173,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["box.component.ts:29",{"_index":188,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["box.component.ts:41",{"_index":169,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["box.component.ts:45",{"_index":1017,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:48",{"_index":1016,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:54",{"_index":1015,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:57",{"_index":1039,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:64",{"_index":1018,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:68",{"_index":1022,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:71",{"_index":183,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["box.component.ts:80",{"_index":1035,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:89",{"_index":1014,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box/audio",{"_index":142,"title":{},"body":{"components/AudioBoxComponent.html":{},"modules/JanusModule.html":{}}}],["box/video",{"_index":695,"title":{},"body":{"modules/JanusModule.html":{},"components/VideoBoxComponent.html":{}}}],["break",{"_index":463,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{}}}],["broadcast",{"_index":760,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["browse",{"_index":1670,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1197,"title":{},"body":{"injectables/WebrtcService.html":{},"modules.html":{}}}],["browsers",{"_index":1412,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["bug",{"_index":1400,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["build",{"_index":1521,"title":{},"body":{"index.html":{}}}],["builder",{"_index":507,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["building",{"_index":1522,"title":{},"body":{"index.html":{}}}],["burden",{"_index":1605,"title":{},"body":{"index.html":{}}}],["button",{"_index":1029,"title":{},"body":{"components/VideoBoxComponent.html":{},"index.html":{}}}],["buttons",{"_index":1657,"title":{},"body":{"index.html":{}}}],["bytes",{"_index":1717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["calculatedwidth",{"_index":432,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["calculation",{"_index":404,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["call",{"_index":925,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["callback",{"_index":318,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["called",{"_index":17,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["calling",{"_index":292,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["camera",{"_index":77,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{}}}],["camera/microphone",{"_index":1589,"title":{},"body":{"index.html":{}}}],["canvas",{"_index":59,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["canvascontext",{"_index":1357,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.canvas.height",{"_index":1336,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.canvas.width",{"_index":1334,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.drawimage",{"_index":1344,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.drawimage(videoelement",{"_index":1332,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.fillrect(0",{"_index":1341,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.fillstyle",{"_index":1339,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.restore",{"_index":1345,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.save",{"_index":1342,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.translate(centerx",{"_index":1343,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvaselement",{"_index":1397,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvaselement.capturestream",{"_index":1404,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvaselement.getcontext('2d",{"_index":1358,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvaselement.height",{"_index":1418,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvaselement.width",{"_index":1417,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvasheight",{"_index":1374,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvasid",{"_index":87,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["canvasstream",{"_index":1403,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvasstream.addtrack(videostream.getaudiotracks()[0",{"_index":1422,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvaswidth",{"_index":1373,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["capture",{"_index":52,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["captured",{"_index":888,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["capturestream",{"_index":1401,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["case",{"_index":114,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["cases",{"_index":81,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["catch((error",{"_index":1445,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["ccc",{"_index":952,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["center",{"_index":472,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["centerx",{"_index":1333,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["centery",{"_index":1335,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["change",{"_index":178,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["changed",{"_index":1593,"title":{},"body":{"index.html":{}}}],["changedetection",{"_index":151,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["changedetectionstrategy",{"_index":190,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["changedetectionstrategy.onpush",{"_index":152,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["changedetector",{"_index":275,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{}}}],["changedetectorref",{"_index":273,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{}}}],["changes",{"_index":314,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["changes.component.firstchange",{"_index":1136,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["changes.remotefeed.currentvalue.slowlink",{"_index":1057,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["changes.remotefeed.previousvalue",{"_index":1055,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["changes.remotefeed.previousvalue.slowlink",{"_index":1056,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["changes[key].firstchange",{"_index":843,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["changing",{"_index":496,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"index.html":{}}}],["checking",{"_index":1031,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["chrome",{"_index":179,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{},"index.html":{}}}],["class",{"_index":195,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["clean",{"_index":1249,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["cleanup",{"_index":1707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cleanuplocalstream",{"_index":1258,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["clear",{"_index":1172,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["clearmediastream",{"_index":1163,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["clearmediastream(stream",{"_index":1169,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["click",{"_index":1080,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["client",{"_index":1552,"title":{},"body":{"index.html":{}}}],["clients",{"_index":1520,"title":{},"body":{"index.html":{}}}],["cluster_janusmodule",{"_index":671,"title":{},"body":{"modules/JanusModule.html":{},"overview.html":{}}}],["cluster_janusmodule_declarations",{"_index":672,"title":{},"body":{"modules/JanusModule.html":{},"overview.html":{}}}],["cluster_janusmodule_exports",{"_index":673,"title":{},"body":{"modules/JanusModule.html":{},"overview.html":{}}}],["code",{"_index":592,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["collected",{"_index":127,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["color",{"_index":476,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["combinelatest",{"_index":784,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["comes",{"_index":591,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{}}}],["common",{"_index":830,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["commonmodule",{"_index":679,"title":{},"body":{"modules/JanusModule.html":{}}}],["comms",{"_index":851,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["competitive",{"_index":1530,"title":{},"body":{"index.html":{}}}],["complete",{"_index":939,"title":{},"body":{"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{}}}],["component",{"_index":109,"title":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"index.html":{}}}],["component_template",{"_index":224,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["componentclass",{"_index":1137,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["componentfactory",{"_index":1139,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["componentfactoryresolver",{"_index":1116,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["componentref",{"_index":1132,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["components",{"_index":136,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["components/audio",{"_index":687,"title":{},"body":{"modules/JanusModule.html":{}}}],["components/default",{"_index":689,"title":{},"body":{"modules/JanusModule.html":{}}}],["components/self",{"_index":691,"title":{},"body":{"modules/JanusModule.html":{}}}],["components/video",{"_index":694,"title":{},"body":{"modules/JanusModule.html":{}}}],["compute",{"_index":396,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["computes",{"_index":304,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["computespeakermodedimensions(aspectratio",{"_index":430,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["computevideowidth",{"_index":266,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["computevideowidth(numremotevideos",{"_index":302,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["condition",{"_index":936,"title":{},"body":{"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{}}}],["conditions",{"_index":823,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["configuration",{"_index":636,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["configure",{"_index":1460,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["configured",{"_index":1517,"title":{},"body":{"index.html":{}}}],["connect",{"_index":881,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["connection",{"_index":13,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["connections",{"_index":1569,"title":{},"body":{"index.html":{}}}],["consent",{"_index":1705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consent_dialog",{"_index":1678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consentdialog(on",{"_index":1274,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["consider",{"_index":824,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["console.log('error",{"_index":1329,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["console.log('ice",{"_index":1285,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["console.log('is",{"_index":454,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["console.log('searching",{"_index":464,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["console.log('switching",{"_index":1096,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["console.log('warning",{"_index":1231,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["console.log('would",{"_index":1483,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["const",{"_index":207,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["constraints",{"_index":1208,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["constructor",{"_index":165,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["constructor(changedetector",{"_index":272,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{}}}],["constructor(componentfactoryresolver",{"_index":1115,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["constructor(janusservice",{"_index":166,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["constructor(janusstore",{"_index":727,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["container",{"_index":794,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["containers/device",{"_index":685,"title":{},"body":{"modules/JanusModule.html":{}}}],["containers/janus",{"_index":682,"title":{},"body":{"modules/JanusModule.html":{}}}],["content",{"_index":471,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["core",{"_index":1562,"title":{},"body":{"index.html":{}}}],["coupled",{"_index":1641,"title":{},"body":{"index.html":{}}}],["create",{"_index":1305,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["create/edit/delete",{"_index":1611,"title":{},"body":{"index.html":{}}}],["created",{"_index":1175,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["createoffer",{"_index":1455,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["createstreamandoffer",{"_index":1436,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["creating",{"_index":912,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["credential",{"_index":661,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["crop",{"_index":1381,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["cross",{"_index":1722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":289,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["currentdevices",{"_index":905,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["currently",{"_index":512,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{}}}],["currentremotefeeds",{"_index":324,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["currentremotefeeds.filter((x",{"_index":384,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["currentsubstream",{"_index":606,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"miscellaneous/variables.html":{}}}],["cursor",{"_index":956,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["custom",{"_index":111,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["customer",{"_index":108,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["customize",{"_index":1651,"title":{},"body":{"index.html":{}}}],["data",{"_index":10,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"miscellaneous/variables.html":{}}}],["debounce",{"_index":346,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["debug",{"_index":1237,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["declarations",{"_index":667,"title":{},"body":{"modules/JanusModule.html":{},"index.html":{},"overview.html":{}}}],["decorators",{"_index":1128,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["default",{"_index":48,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["defaultvideoroomcomponent",{"_index":226,"title":{"components/DefaultVideoRoomComponent.html":{}},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":168,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["demo",{"_index":1628,"title":{},"body":{"index.html":{}}}],["demos",{"_index":1547,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":666,"title":{"dependencies.html":{}},"body":{"modules/JanusModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["depending",{"_index":285,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["deploy",{"_index":750,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["deploying",{"_index":713,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["deployment",{"_index":1619,"title":{},"body":{"index.html":{}}}],["description",{"_index":9,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["desired",{"_index":279,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"injectables/WebrtcService.html":{}}}],["destroy",{"_index":358,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["destroyed",{"_index":1309,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["detached",{"_index":1679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["details",{"_index":654,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["detection",{"_index":419,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["determines",{"_index":1184,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["determining",{"_index":1038,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["developer",{"_index":1560,"title":{},"body":{"index.html":{}}}],["developers",{"_index":1543,"title":{},"body":{"index.html":{}}}],["development",{"_index":1666,"title":{},"body":{"index.html":{}}}],["device",{"_index":70,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["device.kind",{"_index":548,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"injectables/WebrtcService.html":{}}}],["device.label",{"_index":554,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["deviceid",{"_index":937,"title":{},"body":{"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{}}}],["devices",{"_index":37,"title":{"interfaces/Devices.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["devices(devices",{"_index":197,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["devices.filter((device",{"_index":1214,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["devices.speakerdeviceid",{"_index":218,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["deviceselectorcomponent",{"_index":228,"title":{"components/DeviceSelectorComponent.html":{}},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["devicesform",{"_index":504,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["devicesinitialized",{"_index":906,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["deviceupdate",{"_index":506,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["dialog",{"_index":1706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["different",{"_index":98,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["directive",{"_index":222,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"index.html":{}}}],["directives",{"_index":238,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["directly",{"_index":742,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["directs",{"_index":88,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["display",{"_index":245,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["displayname",{"_index":607,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["displays",{"_index":246,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["div",{"_index":478,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["div.display",{"_index":1101,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["div.filter",{"_index":953,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["div.form",{"_index":556,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["div.interior",{"_index":972,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["div.loading",{"_index":991,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["div.maximize",{"_index":1106,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["div.overlay",{"_index":975,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["div.self",{"_index":973,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["div.speaker",{"_index":483,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["div.video",{"_index":465,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["docs",{"_index":658,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["document.createelement('video",{"_index":1396,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["document.getelementbyid([canvasid",{"_index":84,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["document.getelementbyid(canvasid",{"_index":1398,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["document.getelementbyid(elemid",{"_index":1469,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["document.getelementsbytagname('body')[0",{"_index":1386,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["documentation",{"_index":1546,"title":{},"body":{"index.html":{}}}],["documented",{"_index":1633,"title":{},"body":{"index.html":{}}}],["doesn't",{"_index":115,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["doing",{"_index":1448,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["dom",{"_index":139,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["don't",{"_index":633,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["donations",{"_index":1663,"title":{},"body":{"index.html":{}}}],["done",{"_index":283,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["dragon",{"_index":921,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["draw(canvascontext",{"_index":1331,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["drawing",{"_index":67,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["drawloopactive",{"_index":1227,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["dropping",{"_index":1723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dynamic",{"_index":1195,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["dynamically",{"_index":177,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/VideoBoxComponent.html":{},"index.html":{}}}],["e.g",{"_index":1193,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["each",{"_index":18,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{}}}],["easily",{"_index":704,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["easy",{"_index":1514,"title":{},"body":{"index.html":{}}}],["edit",{"_index":1527,"title":{},"body":{"index.html":{}}}],["element",{"_index":60,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["elementref",{"_index":192,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["elements",{"_index":248,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"index.html":{}}}],["embed",{"_index":705,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["emit",{"_index":258,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["emitremotefeeds(remotefeeds",{"_index":847,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["emits",{"_index":774,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{}}}],["emitted",{"_index":41,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["emitting",{"_index":281,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["enabled",{"_index":1518,"title":{},"body":{"index.html":{}}}],["encountered",{"_index":776,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["engineering",{"_index":1536,"title":{},"body":{"index.html":{}}}],["enlarged",{"_index":1574,"title":{},"body":{"index.html":{}}}],["ensures",{"_index":813,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["entire",{"_index":838,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["enum",{"_index":570,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["enumerations",{"_index":1509,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":578,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{}}}],["error('roominfo.state",{"_index":911,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["error(error",{"_index":1272,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["errorcode",{"_index":593,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["errors",{"_index":775,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["estate",{"_index":1577,"title":{},"body":{"index.html":{}}}],["etc",{"_index":1438,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["even",{"_index":82,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["event",{"_index":11,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["eventemitter",{"_index":35,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["events",{"_index":257,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{}}}],["example",{"_index":117,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["exhaustive",{"_index":1609,"title":{},"body":{"index.html":{}}}],["exist",{"_index":79,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["existing",{"_index":278,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["exists",{"_index":596,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{}}}],["expect",{"_index":1299,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["export",{"_index":68,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["exports",{"_index":670,"title":{},"body":{"modules/JanusModule.html":{},"overview.html":{}}}],["factory.each(i",{"_index":1728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["factory.sync.makefactory",{"_index":1727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fail",{"_index":86,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["fallback",{"_index":1572,"title":{},"body":{"index.html":{}}}],["false",{"_index":446,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["family",{"_index":979,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["fatal",{"_index":777,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{}}}],["features",{"_index":1513,"title":{},"body":{"index.html":{}}}],["feed",{"_index":19,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["feed.id",{"_index":1477,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["feed.state",{"_index":380,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{}}}],["feed.video_codec",{"_index":1476,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["feedid",{"_index":1486,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["feeds",{"_index":125,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["feel",{"_index":1660,"title":{},"body":{"index.html":{}}}],["ffffff",{"_index":990,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["field",{"_index":1541,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["fill",{"_index":968,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["find",{"_index":1453,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["findidealwidth",{"_index":437,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["fire",{"_index":1352,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["firefox",{"_index":1399,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["first",{"_index":780,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["fit",{"_index":443,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["fixing",{"_index":1645,"title":{},"body":{"index.html":{}}}],["flex",{"_index":469,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["following",{"_index":1567,"title":{},"body":{"index.html":{}}}],["font",{"_index":966,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["form",{"_index":489,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["format",{"_index":744,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["formbuilder",{"_index":508,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["found",{"_index":1642,"title":{},"body":{"index.html":{}}}],["framerate",{"_index":1347,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["fromevent",{"_index":340,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["fromevent(window",{"_index":369,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["frommodels",{"_index":1201,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.attach_success",{"_index":1271,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.consent_dialog",{"_index":1275,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.media_state",{"_index":1278,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.on_cleanup",{"_index":1303,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.on_local_stream",{"_index":1296,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.on_message",{"_index":1290,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.on_remote_cleanup",{"_index":1491,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.on_remote_feed_message",{"_index":1480,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.on_remote_remote_stream",{"_index":1490,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.on_remote_stream",{"_index":1301,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.remote_feed_slow_link",{"_index":1485,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.remote_feed_webrtc_state",{"_index":1482,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.webrtc_state",{"_index":1282,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["full",{"_index":65,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["fully",{"_index":1563,"title":{},"body":{"index.html":{}}}],["function",{"_index":1361,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["functional",{"_index":1564,"title":{},"body":{"index.html":{}}}],["functionality",{"_index":1655,"title":{},"body":{"index.html":{}}}],["functions",{"_index":1161,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["fund",{"_index":1668,"title":{},"body":{"index.html":{}}}],["future",{"_index":1452,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["fuzzy",{"_index":1451,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["gateway",{"_index":1566,"title":{},"body":{"index.html":{}}}],["getcontext",{"_index":1402,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["getdefaultdevices",{"_index":1164,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["getdevices",{"_index":539,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["getpublishing",{"_index":337,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["getting",{"_index":1511,"title":{"index.html":{}},"body":{}}],["getusermedia",{"_index":1165,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["getusermedia(audiodeviceid",{"_index":1178,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["give",{"_index":1653,"title":{},"body":{"index.html":{}}}],["given",{"_index":1065,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["gives",{"_index":1529,"title":{},"body":{"index.html":{}}}],["goal",{"_index":1376,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["good",{"_index":639,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["granted",{"_index":815,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["great",{"_index":1548,"title":{},"body":{"index.html":{}}}],["grid",{"_index":330,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["grow",{"_index":561,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["hack",{"_index":1354,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["handle",{"_index":826,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["handle.createanswer",{"_index":1319,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["handle.send({message",{"_index":1327,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["handled",{"_index":1583,"title":{},"body":{"index.html":{}}}],["handleremotejsep(jsep",{"_index":1315,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["handles",{"_index":1223,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["happen",{"_index":1300,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["happy",{"_index":1664,"title":{},"body":{"index.html":{}}}],["haven't",{"_index":928,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["height",{"_index":431,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["help",{"_index":1542,"title":{},"body":{"index.html":{}}}],["helper",{"_index":1036,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["helps",{"_index":1526,"title":{},"body":{"index.html":{}}}],["here",{"_index":747,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["high",{"_index":703,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["higher",{"_index":254,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["higher/lower",{"_index":1005,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["highly",{"_index":748,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["html",{"_index":78,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["http",{"_index":1568,"title":{},"body":{"index.html":{}}}],["http(s",{"_index":735,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["https://developer.mozilla.org/en",{"_index":656,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["https://janus.conf.meetecho.com/docs/videoroom.html|janus",{"_index":789,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["https://janus.conf.meetecho.com/janus",{"_index":737,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["httpurl",{"_index":720,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["i'm",{"_index":1447,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["i.fas",{"_index":1104,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["i.tostring",{"_index":1729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ice",{"_index":1594,"title":{},"body":{"index.html":{}}}],["iceserver",{"_index":652,"title":{"interfaces/IceServer.html":{}},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{}}}],["iceservers",{"_index":721,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["icestate(arg1",{"_index":1283,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["id",{"_index":71,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["ideal",{"_index":305,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["ids",{"_index":1177,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["iff",{"_index":288,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["ignore",{"_index":642,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["ignored",{"_index":120,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["img",{"_index":954,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["img.active",{"_index":948,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["img:hover",{"_index":951,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["implement",{"_index":112,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["implementation",{"_index":244,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["implemented",{"_index":620,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["implementing",{"_index":730,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["implements",{"_index":147,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"index.html":{}}}],["import",{"_index":34,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["important",{"_index":964,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["imports",{"_index":700,"title":{},"body":{"modules/JanusModule.html":{},"index.html":{}}}],["improvement",{"_index":1540,"title":{},"body":{"index.html":{}}}],["include",{"_index":1616,"title":{},"body":{"index.html":{}}}],["included",{"_index":1182,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["includes",{"_index":1519,"title":{},"body":{"index.html":{}}}],["incorporates",{"_index":1523,"title":{},"body":{"index.html":{}}}],["index",{"_index":22,"title":{"index.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["information",{"_index":615,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["init",{"_index":1232,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["init(iceservers",{"_index":1228,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["initial",{"_index":403,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["initialize",{"_index":798,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["initialized",{"_index":572,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{}}}],["initializing",{"_index":571,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["initialstate",{"_index":1680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectable",{"_index":1157,"title":{"injectables/WebrtcService.html":{}},"body":{"injectables/WebrtcService.html":{},"overview.html":{}}}],["injectables",{"_index":1158,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["input",{"_index":189,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"index.html":{}}}],["input/output",{"_index":732,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["inputs",{"_index":163,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["inputs/outputs",{"_index":1632,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1620,"title":{},"body":{"index.html":{}}}],["installed",{"_index":1622,"title":{},"body":{"index.html":{}}}],["instance",{"_index":208,"title":{},"body":{"components/AudioBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["instance._attachvideoroomhelper(subscriber",{"_index":1308,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance._createvideoelement(canvasid",{"_index":1443,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance._get_random_string",{"_index":1294,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.answerremotefeedjsep(jsep",{"_index":1481,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.createstreamandoffer",{"_index":1454,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.draw(canvascontext",{"_index":1363,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.drawloopactive",{"_index":1356,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.handle",{"_index":1269,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.handle.send({message",{"_index":1461,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.handleremotejsep(jsep",{"_index":1292,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.janus",{"_index":1306,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.janus.attach",{"_index":1472,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.localstream",{"_index":1442,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.opaqueid",{"_index":1473,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.publishwebrtcstate",{"_index":1281,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.remotehandles[feed.id",{"_index":1474,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.remotehandles[feed.id].send({message",{"_index":1479,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.remotehandles[feed.id].videocodec",{"_index":1475,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.streams[streamid",{"_index":1295,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.videoelement",{"_index":1444,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.webrtcservice.getusermedia(audiodeviceid",{"_index":1440,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instead",{"_index":92,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["integer",{"_index":105,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["interaction",{"_index":1615,"title":{},"body":{"index.html":{}}}],["interesting",{"_index":1524,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{},"overview.html":{}}}],["intermittent",{"_index":1446,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["internal",{"_index":199,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["internally",{"_index":1661,"title":{},"body":{"index.html":{}}}],["interval",{"_index":343,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["interval(100).pipe",{"_index":1433,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["interval(1000).pipe",{"_index":1061,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["interval(500",{"_index":399,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["intimate",{"_index":1561,"title":{},"body":{"index.html":{}}}],["ios",{"_index":1599,"title":{},"body":{"index.html":{}}}],["iphone",{"_index":1186,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["ismuted",{"_index":722,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["ismuted(muted",{"_index":790,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["isn't",{"_index":632,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["issupporteddevice",{"_index":1166,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["isvalidwidth",{"_index":444,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["isvalidwidth(ptr",{"_index":461,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["it's",{"_index":597,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["item",{"_index":1421,"title":{},"body":{"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["item.tostring(36",{"_index":1725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["items",{"_index":996,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"index.html":{}}}],["iterations",{"_index":457,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["itself",{"_index":1658,"title":{},"body":{"index.html":{}}}],["janus",{"_index":154,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["janus.attachmediastream(element",{"_index":1470,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["janus.attachmediastream(videoelement",{"_index":1408,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["janus.init",{"_index":1236,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["janus.iswebrtcsupported",{"_index":1240,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["janus.models",{"_index":39,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["janus.plugin.videoroom",{"_index":1266,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["januserror",{"_index":726,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["januserrors",{"_index":788,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["januserrors[roominfo.errorcode].message",{"_index":865,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["janusmodule",{"_index":664,"title":{"modules/JanusModule.html":{}},"body":{"modules/JanusModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["janusrole",{"_index":38,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"miscellaneous/enumerations.html":{}}}],["janusrole.publisher",{"_index":756,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["janusserverurl",{"_index":796,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["janusservice",{"_index":167,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["janusservice.attachmediastream",{"_index":293,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["janusstore",{"_index":717,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["janusvideoroomcomponent",{"_index":230,"title":{"components/JanusVideoroomComponent.html":{}},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["janusvideoroomwrapper",{"_index":1112,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["join",{"_index":1313,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["joined",{"_index":577,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"miscellaneous/enumerations.html":{}}}],["joining",{"_index":575,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["jsep",{"_index":1289,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["jsepbody",{"_index":1328,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["justify",{"_index":470,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["keep",{"_index":1002,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["keeping",{"_index":1375,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["key",{"_index":842,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["kick",{"_index":1077,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["know",{"_index":625,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{}}}],["knowing",{"_index":640,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["knowledge",{"_index":1558,"title":{},"body":{"index.html":{}}}],["label",{"_index":562,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["landscape",{"_index":1382,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["largest",{"_index":442,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["last",{"_index":645,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["leave",{"_index":1244,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["led",{"_index":1538,"title":{},"body":{"index.html":{}}}],["left",{"_index":977,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["legend",{"_index":221,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"overview.html":{}}}],["less",{"_index":1545,"title":{},"body":{"index.html":{}}}],["letter",{"_index":987,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["level",{"_index":255,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["li",{"_index":946,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["library",{"_index":1512,"title":{},"body":{"index.html":{}}}],["line",{"_index":986,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["link",{"_index":655,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["list",{"_index":123,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["listdevices",{"_index":1167,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["listen",{"_index":1145,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["listener",{"_index":651,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["lives",{"_index":1639,"title":{},"body":{"index.html":{}}}],["load",{"_index":800,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["loadcomponent",{"_index":1113,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["loaded",{"_index":929,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["loading",{"_index":1100,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["local",{"_index":47,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"miscellaneous/variables.html":{}}}],["localdevices",{"_index":201,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["locally",{"_index":126,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["localstream",{"_index":1225,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["localstreamid",{"_index":594,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["look",{"_index":1659,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1348,"title":{},"body":{"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["lot",{"_index":820,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["love",{"_index":825,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["low",{"_index":1466,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["machine",{"_index":569,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["macos",{"_index":1598,"title":{},"body":{"index.html":{}}}],["majority",{"_index":1535,"title":{},"body":{"index.html":{}}}],["make",{"_index":1239,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["makes",{"_index":637,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["making",{"_index":1646,"title":{},"body":{"index.html":{}}}],["manually",{"_index":83,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["many",{"_index":707,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["margin",{"_index":945,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["match",{"_index":764,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["matches",{"_index":73,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["matching",{"_index":133,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["materialized",{"_index":291,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["math.ceil(numvideos",{"_index":451,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["math.ceil(testwidth",{"_index":453,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["math.floor((maxfits",{"_index":459,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["math.floor(viewportwidth",{"_index":449,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["math.min(numvideos",{"_index":448,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["math.random().tostring(36).substring(2",{"_index":1262,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["maxfits",{"_index":456,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["maximize",{"_index":1013,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["maximum",{"_index":1575,"title":{},"body":{"index.html":{}}}],["mdn",{"_index":662,"title":{},"body":{"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{}}}],["meaningful",{"_index":621,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["media",{"_index":714,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["media_state",{"_index":1682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mediastate(medium",{"_index":1277,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["mediastream",{"_index":1170,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["medium",{"_index":1279,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["message",{"_index":589,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":150,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["methods",{"_index":161,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["microphone",{"_index":72,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{}}}],["minimal",{"_index":710,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["minor",{"_index":920,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["minover",{"_index":460,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["miscellaneous",{"_index":1508,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mismatch",{"_index":1537,"title":{},"body":{"index.html":{}}}],["mode",{"_index":264,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["models",{"_index":351,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["models/janus",{"_index":1202,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["models/janus.models",{"_index":193,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["models/video",{"_index":785,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["module",{"_index":663,"title":{"modules/JanusModule.html":{}},"body":{"modules/JanusModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":665,"title":{"modules.html":{}},"body":{"modules/JanusModule.html":{},"modules.html":{}}}],["moment",{"_index":568,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"dependencies.html":{},"index.html":{}}}],["moment.moment",{"_index":614,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["momentinstalling",{"_index":1624,"title":{},"body":{"index.html":{}}}],["monitor",{"_index":1053,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["monitoring",{"_index":1037,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["monitorvideoquality",{"_index":1011,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["monitorvideoquality(slowlink",{"_index":1023,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["more",{"_index":653,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["mostly",{"_index":251,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["msg",{"_index":1291,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["multicast",{"_index":102,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["multiple",{"_index":1580,"title":{},"body":{"index.html":{}}}],["mute",{"_index":1367,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["mute(event",{"_index":1368,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["muted",{"_index":595,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["muting",{"_index":1604,"title":{},"body":{"index.html":{}}}],["name",{"_index":171,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["names",{"_index":1585,"title":{},"body":{"index.html":{}}}],["navigator.mediadevices.enumeratedevices",{"_index":1190,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["navigator.mediadevices.getusermedia(constraints",{"_index":1211,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["navigator.mediadevics.enumeratedevices",{"_index":75,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["necessary",{"_index":1073,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["need",{"_index":113,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["needs",{"_index":1076,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["negotiate",{"_index":12,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["network",{"_index":1592,"title":{},"body":{"index.html":{}}}],["networks",{"_index":1647,"title":{},"body":{"index.html":{}}}],["never",{"_index":1484,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["new",{"_index":329,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newdevices",{"_index":919,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["newdevices.audiodeviceid",{"_index":933,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["newdevices.videodeviceid",{"_index":931,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["newsubstream",{"_index":1091,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["ngafterviewinit",{"_index":211,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["ngmodule",{"_index":678,"title":{},"body":{"modules/JanusModule.html":{},"index.html":{}}}],["ngonchanges(changes",{"_index":836,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["ngondestroy",{"_index":371,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["ngoninit",{"_index":205,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["ngrx/component",{"_index":1504,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["noise",{"_index":627,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["non",{"_index":1608,"title":{},"body":{"index.html":{}}}],["none",{"_index":1238,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["normal",{"_index":985,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["note",{"_index":616,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["notes",{"_index":644,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["nothing",{"_index":746,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["null",{"_index":856,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":107,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["numcolumns",{"_index":447,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["numeric",{"_index":766,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["numremotevideos",{"_index":315,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["numrows",{"_index":450,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["numvideos",{"_index":409,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["numvideotracks",{"_index":602,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["nvid",{"_index":155,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["object",{"_index":32,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["object.keys(remotefeeds).map(id",{"_index":858,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["objects",{"_index":334,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["observable",{"_index":341,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["of(true",{"_index":1234,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["older",{"_index":1188,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["on_cleanup",{"_index":1683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_data",{"_index":1684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_data_open",{"_index":1685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_local_stream",{"_index":1686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_message",{"_index":1687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_remote_cleanup",{"_index":1688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_remote_feed_message",{"_index":1689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_remote_local_stream",{"_index":1690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_remote_remote_stream",{"_index":1691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_remote_stream",{"_index":1692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onattachremotefeed(event",{"_index":884,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["once",{"_index":576,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["onchanges",{"_index":716,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["oncleanup",{"_index":1302,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["ondestroy",{"_index":261,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["ondevicechange",{"_index":162,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["ondevicechange(devices",{"_index":182,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["ondeviceschange",{"_index":927,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["ondeviceschange(previousdevices",{"_index":918,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["one",{"_index":736,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["oninit",{"_index":148,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["onlocalstream(stream",{"_index":1293,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["onmaximize",{"_index":267,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["onmaximize(remotefeed",{"_index":316,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["onmessage(msg",{"_index":1288,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["onplay",{"_index":1070,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["onpublishownfeed",{"_index":268,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["onpublishownfeed(event",{"_index":321,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{}}}],["onremotefeedschange",{"_index":269,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["onremotefeedschange(previousremotefeeds",{"_index":323,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["onremotestream(stream",{"_index":1298,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["onrequestsubstream",{"_index":270,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["onrequestsubstream(event",{"_index":327,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{}}}],["opaqueid",{"_index":1219,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["open",{"_index":1708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["opensans",{"_index":980,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["operations",{"_index":1612,"title":{},"body":{"index.html":{}}}],["option",{"_index":493,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["optional",{"_index":172,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["options",{"_index":491,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{}}}],["optionsopen",{"_index":1043,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["order",{"_index":259,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["orientation",{"_index":1579,"title":{},"body":{"index.html":{}}}],["oscillator",{"_index":1350,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["otherroomid",{"_index":590,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["otherwise",{"_index":819,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["out",{"_index":676,"title":{},"body":{"modules/JanusModule.html":{},"overview.html":{}}}],["output",{"_index":175,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["outputs",{"_index":271,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["outside",{"_index":417,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["overlays",{"_index":1652,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1671,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":997,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["package",{"_index":1499,"title":{"dependencies.html":{}},"body":{"index.html":{}}}],["padding",{"_index":558,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["page",{"_index":1636,"title":{},"body":{"index.html":{}}}],["pain",{"_index":1721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["param",{"_index":1207,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["parameters",{"_index":170,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["part",{"_index":1525,"title":{},"body":{"index.html":{}}}],["parts",{"_index":1603,"title":{},"body":{"index.html":{}}}],["passed",{"_index":587,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["payload",{"_index":1276,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["peer",{"_index":1502,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["performance",{"_index":1004,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["periodic",{"_index":1072,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["permissions",{"_index":816,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["phones",{"_index":1194,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["pick",{"_index":421,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"index.html":{}}}],["picking",{"_index":492,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["pin",{"_index":723,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["pin_required",{"_index":755,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["pins",{"_index":1573,"title":{},"body":{"index.html":{}}}],["pipe",{"_index":398,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["platform",{"_index":1192,"title":{},"body":{"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["platforms",{"_index":1595,"title":{},"body":{"index.html":{}}}],["play",{"_index":145,"title":{},"body":{"components/AudioBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["playing",{"_index":144,"title":{},"body":{"components/AudioBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["plugin",{"_index":1221,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["pluginhandle",{"_index":1270,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["plus",{"_index":1026,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["pointer",{"_index":957,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["portrait",{"_index":1380,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["position",{"_index":467,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["possible",{"_index":598,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["practical",{"_index":619,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["prefer",{"_index":1571,"title":{},"body":{"index.html":{}}}],["prevents",{"_index":961,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["previousdevices",{"_index":930,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["previousdevices.audiodeviceid",{"_index":934,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["previousdevices.videodeviceid",{"_index":932,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["previously",{"_index":1174,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["previousremotefeeds",{"_index":326,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["private",{"_index":200,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["private_id",{"_index":584,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{}}}],["privateid",{"_index":586,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["privateremotefeeds",{"_index":359,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["probably",{"_index":829,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["product",{"_index":286,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"index.html":{}}}],["promise",{"_index":540,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{}}}],["properly",{"_index":1516,"title":{},"body":{"index.html":{}}}],["properties",{"_index":23,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["provided",{"_index":110,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["providedin",{"_index":1204,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["providers",{"_index":669,"title":{},"body":{"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"overview.html":{}}}],["ptr",{"_index":458,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["ptype",{"_index":1314,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["public",{"_index":202,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["publish",{"_index":118,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["published",{"_index":61,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["publisher",{"_index":100,"title":{"interfaces/Publisher.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["publisher's",{"_index":130,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{}}}],["publishers",{"_index":649,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["publishing",{"_index":46,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{}}}],["publishownfeed",{"_index":40,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["publishownfeedevent",{"_index":69,"title":{"interfaces/PublishOwnFeedEvent.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["publishrequested",{"_index":582,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["publishstate",{"_index":580,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["publishstate.error",{"_index":864,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["publishstate.publishing",{"_index":862,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["publishstate.publishrequested",{"_index":942,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["publishstate.start",{"_index":1715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["publishwebrtcstate",{"_index":1226,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["purposes",{"_index":1045,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["put",{"_index":1606,"title":{},"body":{"index.html":{}}}],["quality",{"_index":1032,"title":{},"body":{"components/VideoBoxComponent.html":{},"index.html":{}}}],["querying",{"_index":1162,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["querylist",{"_index":339,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["race",{"_index":822,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{}}}],["radius",{"_index":958,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["raise",{"_index":897,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["randomstring",{"_index":1040,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["randomstring(16",{"_index":1220,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["ratios",{"_index":1582,"title":{},"body":{"index.html":{}}}],["reactiveformsmodule",{"_index":681,"title":{},"body":{"modules/JanusModule.html":{}}}],["read",{"_index":1587,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":797,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["ready",{"_index":581,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["readyremotefeeds",{"_index":265,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["real",{"_index":1576,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["receive",{"_index":14,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["received",{"_index":605,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{}}}],["recent",{"_index":612,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["recommended",{"_index":749,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["recvonly",{"_index":1323,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["refer",{"_index":712,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["reference",{"_index":243,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["refresh",{"_index":837,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["register",{"_index":1312,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["register(name",{"_index":1311,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["registered",{"_index":940,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["relative",{"_index":468,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["release",{"_index":1662,"title":{},"body":{"index.html":{}}}],["reliability",{"_index":752,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["remote",{"_index":15,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["remote_feed_slow_link",{"_index":1694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remote_feed_webrtc_state",{"_index":1695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remotefeed",{"_index":25,"title":{"interfaces/RemoteFeed.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["remotefeed.displayname",{"_index":1099,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["remotefeed.id",{"_index":387,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["remotefeedfactory",{"_index":1696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remotefeeds",{"_index":119,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"miscellaneous/variables.html":{}}}],["remotefeeds(remotefeeds",{"_index":353,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["remotefeeds.filter((feed",{"_index":848,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["remotefeeds[id",{"_index":859,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["remotefeedsarray",{"_index":857,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["remotefeedstate",{"_index":349,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["remotefeedstate.initialized",{"_index":30,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"miscellaneous/variables.html":{}}}],["remotefeedstate.ready",{"_index":290,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{}}}],["remotehandles",{"_index":1222,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["rendering",{"_index":146,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["renders",{"_index":890,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["repo",{"_index":1638,"title":{},"body":{"index.html":{}}}],["republish",{"_index":1431,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["request",{"_index":97,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["request_substream",{"_index":1698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestanimationframe",{"_index":1351,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["requestanimationframe(step",{"_index":1365,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["requested",{"_index":174,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"miscellaneous/enumerations.html":{}}}],["requestedsubstream",{"_index":603,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["requesting",{"_index":29,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["requestsubstream",{"_index":95,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["requestsubstream(feed",{"_index":1497,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["requestsubstreamevent",{"_index":103,"title":{"interfaces/RequestSubstreamEvent.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["require",{"_index":116,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["required",{"_index":763,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["requires",{"_index":1385,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["requiring",{"_index":1559,"title":{},"body":{"index.html":{}}}],["reset",{"_index":675,"title":{},"body":{"modules/JanusModule.html":{},"overview.html":{}}}],["resetkeys",{"_index":841,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["resize",{"_index":367,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"index.html":{}}}],["resized",{"_index":313,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["resizeobservable",{"_index":357,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["resizing",{"_index":962,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["resources",{"_index":1173,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["response",{"_index":1330,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["responsibility",{"_index":66,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["result",{"_index":132,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":134,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["ret",{"_index":1724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["retry",{"_index":1449,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["retrycount",{"_index":1437,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["return",{"_index":85,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":74,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["returns",{"_index":185,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["rgba(0,0,0,.5",{"_index":971,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["rgba(0,0,0,0",{"_index":960,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["rgba(255",{"_index":993,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["rgba(53,53,53,.7",{"_index":978,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["right",{"_index":1108,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["role",{"_index":122,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["roles",{"_index":646,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["room",{"_index":7,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["room'},{'name",{"_index":227,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["room.component",{"_index":690,"title":{},"body":{"modules/JanusModule.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["room.component.html",{"_index":263,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.scss",{"_index":262,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts",{"_index":242,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:111",{"_index":332,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:114",{"_index":274,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:134",{"_index":338,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:139",{"_index":317,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:149",{"_index":328,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:154",{"_index":322,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:159",{"_index":325,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:216",{"_index":303,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:47",{"_index":296,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:50",{"_index":294,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:53",{"_index":276,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:63",{"_index":277,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:64",{"_index":336,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:70",{"_index":333,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:74",{"_index":301,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:78",{"_index":300,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:82",{"_index":297,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.id",{"_index":1326,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["room.privateid",{"_index":1478,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["room/default",{"_index":241,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"modules/JanusModule.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["room/user",{"_index":801,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["roomid",{"_index":583,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["roominfo",{"_index":24,"title":{"interfaces/RoomInfo.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["roominfo.errorcode",{"_index":867,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["roominfo.muted",{"_index":860,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["roominfo.publishstate",{"_index":861,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["roominfo.state",{"_index":869,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["roominfofactory",{"_index":1700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roominfostate",{"_index":350,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"miscellaneous/enumerations.html":{}}}],["roominfostate.attach_failed",{"_index":877,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["roominfostate.attached",{"_index":872,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["roominfostate.initialized",{"_index":870,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["roominfostate.joined",{"_index":898,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["roominfostate.start",{"_index":1714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rooms",{"_index":1613,"title":{},"body":{"index.html":{}}}],["root",{"_index":1205,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["rough",{"_index":1654,"title":{},"body":{"index.html":{}}}],["row",{"_index":557,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["rtcpeerconnection",{"_index":743,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["run",{"_index":1052,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["rxjs",{"_index":345,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["rxjs/operators",{"_index":348,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["safari",{"_index":1384,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["same",{"_index":309,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{}}}],["sample",{"_index":1551,"title":{},"body":{"index.html":{}}}],["save",{"_index":1487,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["scalex",{"_index":970,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["scratch",{"_index":840,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["screen",{"_index":312,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"index.html":{}}}],["search",{"_index":441,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["second",{"_index":1079,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["see",{"_index":643,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["see/hear",{"_index":648,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["select",{"_index":564,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selected",{"_index":513,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector",{"_index":153,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"index.html":{}}}],["selector'},{'name",{"_index":229,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["selector.component",{"_index":686,"title":{},"body":{"modules/JanusModule.html":{}}}],["selector.component.html",{"_index":500,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.scss",{"_index":499,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts",{"_index":488,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts:36",{"_index":511,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts:42",{"_index":514,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts:44",{"_index":518,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts:45",{"_index":515,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts:46",{"_index":517,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts:47",{"_index":516,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts:48",{"_index":519,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts:49",{"_index":510,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector/device",{"_index":487,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{}}}],["self",{"_index":233,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["selfvideobottom",{"_index":366,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["selfvideocomponent",{"_index":232,"title":{"components/SelfVideoComponent.html":{}},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["selfvideoheight",{"_index":388,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["selfvideoright",{"_index":365,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["selfvideowidth",{"_index":392,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["send",{"_index":1588,"title":{},"body":{"index.html":{}}}],["separate",{"_index":915,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["server",{"_index":715,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["server(s",{"_index":751,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["server.models",{"_index":1203,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["server.models.ts",{"_index":1676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["servers",{"_index":741,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["service",{"_index":89,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["services/janus.service",{"_index":194,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["session",{"_index":839,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["set",{"_index":57,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["setdevices(devices",{"_index":187,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["setismuted(muted",{"_index":779,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["setmute(mute",{"_index":1496,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["setremotefeeds(remotefeeds",{"_index":335,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["setspeaker(devices",{"_index":214,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["settimeout",{"_index":878,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["settimeout(step",{"_index":1364,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["setting",{"_index":818,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["setup",{"_index":90,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["setupjanusroom",{"_index":850,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["setupsubscriptions",{"_index":395,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["shared",{"_index":1041,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["sharereplay",{"_index":782,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["sharereplay(1",{"_index":808,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["show",{"_index":490,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"index.html":{}}}],["showdefaultroom",{"_index":795,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["shown",{"_index":494,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["sides",{"_index":1379,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["signalling",{"_index":250,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"index.html":{}}}],["simple",{"_index":1435,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["simulcast",{"_index":1008,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["simulcastmaxbitrates",{"_index":1463,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["site",{"_index":1635,"title":{},"body":{"index.html":{}}}],["situation",{"_index":827,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["size",{"_index":310,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"index.html":{}}}],["skipvideocapture",{"_index":56,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["slow",{"_index":1709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["slow_link",{"_index":1701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["slowlink",{"_index":613,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"miscellaneous/variables.html":{}}}],["slowlink(msg",{"_index":1287,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["small",{"_index":256,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"index.html":{}}}],["smells",{"_index":423,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["smoothly",{"_index":1584,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["solid",{"_index":481,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["solution",{"_index":428,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["someone",{"_index":1650,"title":{},"body":{"index.html":{}}}],["sometimes",{"_index":1075,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["sound",{"_index":1066,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["spacing",{"_index":988,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["span.flex",{"_index":560,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["span.separator",{"_index":1102,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["speaker",{"_index":176,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["speaker/grid",{"_index":1020,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["speakerdevice",{"_index":529,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["speakerdeviceid",{"_index":535,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["speakerdevices",{"_index":1216,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["speakerheight",{"_index":364,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["speakers",{"_index":555,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["speakerwidth",{"_index":363,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["specifications",{"_index":567,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["specified",{"_index":630,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["specify",{"_index":49,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["specifying",{"_index":1565,"title":{},"body":{"index.html":{}}}],["spend",{"_index":1544,"title":{},"body":{"index.html":{}}}],["spent",{"_index":1533,"title":{},"body":{"index.html":{}}}],["spirit",{"_index":1600,"title":{},"body":{"index.html":{}}}],["src/.../index.ts",{"_index":1677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../janus",{"_index":1675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../janus.actions.ts",{"_index":1699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../janus.factories.ts",{"_index":1697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../janus.models.ts",{"_index":1510,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../janus.reducers.ts",{"_index":1681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../random.ts",{"_index":1693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/components/audio",{"_index":141,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["src/lib/components/default",{"_index":240,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["src/lib/components/index.ts",{"_index":1711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/components/self",{"_index":886,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["src/lib/components/video",{"_index":1000,"title":{},"body":{"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["src/lib/containers/device",{"_index":486,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["src/lib/containers/index.ts",{"_index":1710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/containers/janus",{"_index":701,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["src/lib/factories/janus.factories.ts",{"_index":1726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/janus.module.ts",{"_index":677,"title":{},"body":{"modules/JanusModule.html":{}}}],["src/lib/models/janus",{"_index":1704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/models/janus.models.ts",{"_index":566,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["src/lib/models/video",{"_index":6,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["src/lib/services/janus.service.ts",{"_index":1159,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["src/lib/services/janus.service.ts:20",{"_index":1168,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["src/lib/services/janus.service.ts:31",{"_index":1179,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["src/lib/services/janus.service.ts:42",{"_index":1189,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["src/lib/services/janus.service.ts:49",{"_index":1176,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["src/lib/services/janus.service.ts:66",{"_index":1191,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["src/lib/services/janus.service.ts:76",{"_index":1183,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["src/lib/services/janus.service.ts:83",{"_index":1171,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["src/lib/shared/random.ts",{"_index":1716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/store/actions/janus.actions.ts",{"_index":1731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/store/reducers/janus.reducers.ts",{"_index":1712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["start",{"_index":45,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{}}}],["start/stop",{"_index":638,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["startdrawingloop(canvaselement",{"_index":1346,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["started",{"_index":709,"title":{"index.html":{}},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["startwith",{"_index":781,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["state",{"_index":31,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["static",{"_index":1130,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["status",{"_index":579,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["step",{"_index":1362,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["stepmilliseconds",{"_index":1359,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["still",{"_index":650,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{}}}],["storage",{"_index":1618,"title":{},"body":{"index.html":{}}}],["store",{"_index":1505,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["store/janus.store",{"_index":787,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["stream",{"_index":16,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["stream.getvideotracks",{"_index":1488,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["stream.getvideotracks().length",{"_index":1489,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["stream_id",{"_index":1297,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["streamed",{"_index":280,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["streamid",{"_index":600,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["streaming",{"_index":299,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["streams",{"_index":1007,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["stretch",{"_index":984,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["string",{"_index":76,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["stun",{"_index":745,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["stun/turn",{"_index":740,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["stun:stun2.l.google.com:19302",{"_index":738,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["style",{"_index":498,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["styles",{"_index":138,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["styles.scss",{"_index":892,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["styles/video",{"_index":902,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["styleurls",{"_index":157,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"index.html":{}}}],["subclassed",{"_index":497,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["subject",{"_index":344,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["subscribe",{"_index":128,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["subscribe((event",{"_index":401,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["subscribe((payload",{"_index":1147,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["subscribe(({roominfo",{"_index":854,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["subscriber",{"_index":1235,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["subscriber.complete",{"_index":1243,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["subscriber.error('webrtc",{"_index":1241,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["subscriber.error(error",{"_index":1273,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["subscriber.next",{"_index":1242,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["subscriber.next(true",{"_index":1462,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["subscribers",{"_index":759,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["subscription",{"_index":342,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["substream",{"_index":104,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["substreamid",{"_index":106,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["substreams",{"_index":99,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["success",{"_index":1307,"title":{},"body":{"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["success(jsep",{"_index":1459,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["success(jsepbody",{"_index":1324,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["success(pluginhandle",{"_index":1268,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["support",{"_index":1665,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supported",{"_index":1185,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["supports",{"_index":495,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["supportsspeakerselection",{"_index":505,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"injectables/WebrtcService.html":{}}}],["sure",{"_index":425,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["svg",{"_index":1669,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":319,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["switches",{"_index":1355,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["switching",{"_index":1019,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["switchmap",{"_index":783,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["switchsubstream",{"_index":1012,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["switchsubstream(substreamid",{"_index":1033,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["synccomponentdata",{"_index":1114,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["system",{"_index":44,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{}}}],["tabs",{"_index":1353,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["take",{"_index":64,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["takes",{"_index":1078,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["takeuntil",{"_index":347,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["takeuntil(this.destroy",{"_index":400,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["takewhile",{"_index":1199,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["talking",{"_index":623,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["talking/not",{"_index":622,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["tap",{"_index":1198,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["task",{"_index":1054,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["tell",{"_index":43,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["template",{"_index":137,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"index.html":{}}}],["templateurl",{"_index":159,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["tested",{"_index":1596,"title":{},"body":{"index.html":{}}}],["testheight",{"_index":452,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["testing",{"_index":916,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["testwidth",{"_index":445,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["that's",{"_index":828,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["themselves",{"_index":1556,"title":{},"body":{"index.html":{}}}],["then((videostream",{"_index":1441,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["there's",{"_index":426,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{},"index.html":{}}}],["therefore",{"_index":924,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["thing",{"_index":1601,"title":{},"body":{"index.html":{}}}],["this._attachmediastream",{"_index":1050,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this._mutevideo(videoelement",{"_index":1414,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this._publishownfeed(audiodeviceid",{"_index":913,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["this._publishownfeed(newdevices.audiodeviceid",{"_index":943,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["this._setmuted(muted",{"_index":792,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this._setmuted(this.muted",{"_index":863,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this._sizecanvaselement(videosettings.width",{"_index":1415,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this._videoelementsafarihacks(videoelement",{"_index":1407,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.afterviewinitran",{"_index":908,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["this.attachremotefeed.emit",{"_index":381,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.attachremotefeed.emit(payload",{"_index":1152,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.audio",{"_index":215,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["this.audio.nativeelement",{"_index":216,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["this.audio.nativeelement.setsinkid",{"_index":217,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["this.audio.nativeelement.setsinkid(devices.speakerdeviceid",{"_index":219,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["this.audioid",{"_index":209,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["this.availableaudiodevices",{"_index":546,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.availablespeakerdevices",{"_index":552,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.availablevideodevices",{"_index":550,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.builder.group",{"_index":523,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.changedetector.detectchanges",{"_index":429,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{}}}],["this.cleanuplocalstream",{"_index":1247,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.component",{"_index":1138,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.componentfactoryresolver.resolvecomponentfactory(componentclass",{"_index":1140,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.componentref",{"_index":1134,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.componentref.instance.attachremotefeed.pipe",{"_index":1151,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.componentref.instance.devices",{"_index":1155,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.componentref.instance.publishownfeed.pipe",{"_index":1146,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.componentref.instance.remotefeeds",{"_index":1156,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.componentref.instance.requestsubstream.pipe",{"_index":1149,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.componentref.instance.role",{"_index":1154,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.componentref.instance.roominfo",{"_index":1153,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.computespeakermodedimensions",{"_index":416,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.computevideowidth(0",{"_index":405,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.computevideowidth(currentremotefeeds.length",{"_index":379,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.computevideowidth(this.remotefeeds.length",{"_index":402,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.createoffer(subscriber",{"_index":1439,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.createstreamandoffer(subscriber",{"_index":1434,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.currentdevices",{"_index":903,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["this.destroy$.complete",{"_index":373,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["this.destroy$.next",{"_index":372,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["this.devices",{"_index":831,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["this.devices.audiodeviceid",{"_index":525,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{}}}],["this.devices.speakerdeviceid",{"_index":530,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.devices.videodeviceid",{"_index":528,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{}}}],["this.devicesform",{"_index":522,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.devicesform.get('audiodevice').value",{"_index":533,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.devicesform.get('speakerdevice').value",{"_index":536,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.devicesform.get('videodevice').value",{"_index":534,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.devicesform.valuechanges.pipe",{"_index":532,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.deviceupdate.emit(devices",{"_index":537,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.drawloopactive",{"_index":1257,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.emitremotefeeds(remotefeedsarray",{"_index":868,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.findidealwidth",{"_index":411,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.getdevices",{"_index":531,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.handle",{"_index":1245,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.handle.createoffer",{"_index":1456,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.handle.handleremotejsep({jsep",{"_index":1316,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.handle.isaudiomuted",{"_index":1493,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.handle.muteaudio",{"_index":1495,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.handle.send",{"_index":1427,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.handle.send({message",{"_index":1246,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.handle.unmuteaudio",{"_index":1494,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.httpurl",{"_index":804,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.iceservers",{"_index":1229,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.initialized",{"_index":1230,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.janus",{"_index":1250,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.janus.attach",{"_index":1265,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.janus.destroy({unload",{"_index":1248,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.januserror.emit({code",{"_index":866,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusserverurl",{"_index":802,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusservice.attachmediastream(this.audioid",{"_index":212,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["this.janusservice.attachmediastream(this.videoid",{"_index":1064,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.janusstore",{"_index":812,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.attachremotefeed",{"_index":885,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.attachvideoroom(this.janusserverurl",{"_index":871,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.initialize(this.iceservers",{"_index":852,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.publishownfeed(event",{"_index":882,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.register",{"_index":873,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.remotefeeds$.pipe(sharereplay(1",{"_index":806,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.requestsubstream(event",{"_index":883,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.reset(this.iceservers",{"_index":844,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.roominfo$.pipe",{"_index":807,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.setmute(muted",{"_index":846,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.state$.pipe",{"_index":853,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusvideoroomwrapper.viewcontainerref",{"_index":1142,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.listdevices",{"_index":1212,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.loadcomponent",{"_index":1133,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.localdevices",{"_index":196,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["this.localstream",{"_index":1255,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.maximize.emit(this.remotefeed",{"_index":1098,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.mode",{"_index":375,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["this.monitorvideoquality(false",{"_index":1062,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.monitorvideoquality(slowlink",{"_index":1058,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.muted",{"_index":791,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.ondevicechange(devices",{"_index":198,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["this.ondeviceschange(this.currentdevices",{"_index":904,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["this.onremotefeedschange(this.privateremotefeeds",{"_index":354,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.opaqueid",{"_index":1267,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.pin",{"_index":855,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.privateremotefeeds",{"_index":352,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.publishers.emit(publishers",{"_index":849,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.publishing",{"_index":410,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.publishownfeed.emit",{"_index":917,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["this.publishownfeed.emit(event",{"_index":378,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.publishownfeed.emit(payload",{"_index":1148,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.publishwebrtcstate",{"_index":1256,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.readyremotefeeds",{"_index":383,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.remotefeed",{"_index":1074,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.remotefeed.currentsubstream",{"_index":1087,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.remotefeed.id",{"_index":210,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["this.remotefeed.numvideotracks",{"_index":1088,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.remotefeed.requestedsubstream",{"_index":1095,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.remotefeed.streamid",{"_index":213,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["this.remotefeeds",{"_index":805,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["this.remotehandles",{"_index":1253,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.remotehandles[feed.id",{"_index":1318,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.remotehandles[feed.id].send({message",{"_index":1498,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.requestsubstream.emit(event",{"_index":377,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.requestsubstream.emit(payload",{"_index":1150,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.requestsubstream.emit({feed",{"_index":1097,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.resizeobservable",{"_index":368,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.role",{"_index":374,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["this.roomid",{"_index":876,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.roominfo",{"_index":382,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["this.roominfo.publishstate",{"_index":941,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["this.roominfo.state",{"_index":909,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["this.selfvideobottom",{"_index":434,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.selfvideoright",{"_index":436,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.server",{"_index":1252,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.setspeaker(devices",{"_index":220,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["this.setspeaker(this.devices",{"_index":1051,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.setupjanusroom",{"_index":835,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.setupsubscriptions",{"_index":370,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["this.speaker",{"_index":376,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.speakerheight",{"_index":390,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.speakerwidth",{"_index":394,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.startdrawingloop(canvaselement",{"_index":1423,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.streams",{"_index":1251,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.streams[streamid",{"_index":1471,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.supportsspeakerselection",{"_index":544,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.switchsubstream(currentsubstream",{"_index":1090,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.switchsubstream(newsubstream",{"_index":1094,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.synccomponentdata",{"_index":1135,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.unpublishownfeed",{"_index":1432,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.userid",{"_index":875,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.username",{"_index":874,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.video",{"_index":1059,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.video.nativeelement",{"_index":1067,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.video.nativeelement.pause",{"_index":1060,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.video.nativeelement.play",{"_index":1086,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.video.nativeelement.setsinkid",{"_index":1068,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.video.nativeelement.setsinkid(devices.speakerdeviceid",{"_index":1069,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.videoavailable",{"_index":1071,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.videoelement",{"_index":1254,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.videoelement.remove",{"_index":1259,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.videoheight",{"_index":389,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.videoid",{"_index":1049,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.videoqualityhelper",{"_index":1047,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.videoqualityhelper.ping(currentsubstream",{"_index":1092,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.videoqualityhelper.streamend(currentsubstream",{"_index":1093,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.videoqualityhelper.streamerror(currentsubstream",{"_index":1089,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.videowidth",{"_index":393,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.viewport",{"_index":406,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.viewport.nativeelement.offsetheight",{"_index":413,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.viewport.nativeelement.offsetwidth",{"_index":412,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.webrtc.clearmediastream(stream",{"_index":834,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.webrtc.getdefaultdevices",{"_index":832,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.webrtc.getusermedia",{"_index":833,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.webrtc.listdevices",{"_index":543,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.webrtc.supportsspeakerselection",{"_index":545,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.webrtcservice.clearmediastream(this.localstream",{"_index":1260,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.wsurl",{"_index":803,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["those",{"_index":54,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["through",{"_index":708,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["throw",{"_index":910,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["tightly",{"_index":1640,"title":{},"body":{"index.html":{}}}],["time",{"_index":629,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["times",{"_index":1656,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":611,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["tiny",{"_index":935,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["tireless",{"_index":1644,"title":{},"body":{"index.html":{}}}],["to/from",{"_index":320,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["toggle",{"_index":1732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["toggle_mute_success",{"_index":1702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["togglemute",{"_index":1492,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["top",{"_index":976,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["touchpoints",{"_index":1649,"title":{},"body":{"index.html":{}}}],["track",{"_index":1003,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["trackbyfeedid(index",{"_index":386,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["tracks",{"_index":601,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["transform",{"_index":969,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["transmit",{"_index":93,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["tree",{"_index":140,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["trickle",{"_index":1320,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["true",{"_index":58,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["ts",{"_index":809,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["tslib",{"_index":1500,"title":{},"body":{"dependencies.html":{}}}],["twice",{"_index":1233,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["type",{"_index":26,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["ui",{"_index":1614,"title":{},"body":{"index.html":{}}}],["uint8array(bytes",{"_index":1719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ul.filter",{"_index":944,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["unable",{"_index":880,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["understand",{"_index":1557,"title":{},"body":{"index.html":{}}}],["understanding",{"_index":1549,"title":{},"body":{"index.html":{}}}],["unique",{"_index":206,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["unless",{"_index":923,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["unpublish",{"_index":1426,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["unpublishing",{"_index":1430,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["unpublishownfeed",{"_index":1425,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["until",{"_index":1429,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["up",{"_index":422,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["upon",{"_index":1578,"title":{},"body":{"index.html":{}}}],["url",{"_index":734,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["urls",{"_index":659,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{}}}],["us/docs/web/api/rtciceserver|mdn",{"_index":657,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["use",{"_index":80,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["used",{"_index":96,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["user",{"_index":20,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["user's",{"_index":295,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{}}}],["userid",{"_index":724,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["username",{"_index":660,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["users",{"_index":758,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["using",{"_index":101,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["ux",{"_index":1607,"title":{},"body":{"index.html":{}}}],["valid",{"_index":455,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["validators",{"_index":520,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["validators.required",{"_index":526,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["value",{"_index":331,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":223,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["variables",{"_index":799,"title":{"miscellaneous/variables.html":{}},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":1160,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["vast",{"_index":1534,"title":{},"body":{"index.html":{}}}],["very",{"_index":618,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["video",{"_index":91,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["video'},{'name",{"_index":234,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["video,canvas",{"_index":965,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["video.component",{"_index":693,"title":{},"body":{"modules/JanusModule.html":{}}}],["video.component.html",{"_index":893,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video.component.scss",{"_index":901,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video.component.scss,../../styles/video",{"_index":891,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video.component.ts",{"_index":887,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video.component.ts:37",{"_index":896,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video.component.ts:41",{"_index":895,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video.component.ts:42",{"_index":900,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video.component.ts:49",{"_index":899,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video.component.ts:53",{"_index":894,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video/audio",{"_index":53,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["video/mic",{"_index":1082,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["video/self",{"_index":692,"title":{},"body":{"modules/JanusModule.html":{},"components/SelfVideoComponent.html":{}}}],["video_codec",{"_index":609,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["videoavailable",{"_index":1044,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["videoboxcomponent",{"_index":235,"title":{"components/VideoBoxComponent.html":{}},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["videodevice",{"_index":527,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["videodeviceid",{"_index":51,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["videodevices",{"_index":1215,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement",{"_index":1224,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.addeventlistener('canplay",{"_index":1392,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.addeventlistener('playing",{"_index":1371,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.autoplay",{"_index":1409,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.muted",{"_index":1369,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.play",{"_index":1393,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.removeeventlistener('playing",{"_index":1370,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.setattribute('id",{"_index":1411,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.setattribute('playsinline",{"_index":1410,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.setattribute('style",{"_index":1388,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.videoheight",{"_index":1338,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.videowidth",{"_index":1337,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoheight",{"_index":362,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["videoid",{"_index":1042,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["videoinput",{"_index":551,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"injectables/WebrtcService.html":{}}}],["videoqualityhelper",{"_index":1010,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["videoqualityhelper(3",{"_index":1048,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["videorecv",{"_index":1458,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoroom",{"_index":42,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["videoroom'},{'name",{"_index":231,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["videoroom.component",{"_index":684,"title":{},"body":{"modules/JanusModule.html":{}}}],["videoroom.component.html",{"_index":719,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.scss",{"_index":718,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts",{"_index":702,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:100",{"_index":757,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:107",{"_index":765,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:113",{"_index":731,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:122",{"_index":739,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:128",{"_index":729,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:134",{"_index":753,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:148",{"_index":769,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:154",{"_index":773,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:160",{"_index":778,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:176",{"_index":728,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:63",{"_index":762,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:71",{"_index":770,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:79",{"_index":733,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:85",{"_index":754,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:91",{"_index":768,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom/janus",{"_index":683,"title":{},"body":{"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{}}}],["videoroomcomponent",{"_index":121,"title":{"interfaces/VideoRoomComponent.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["videorooms",{"_index":1528,"title":{},"body":{"index.html":{}}}],["videoroomstate",{"_index":1713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["videoroomwrappercomponent",{"_index":236,"title":{"components/VideoRoomWrapperComponent.html":{}},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"overview.html":{}}}],["videoroomwrapperdirective",{"_index":698,"title":{},"body":{"modules/JanusModule.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["videos",{"_index":308,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"index.html":{}}}],["videosend",{"_index":1322,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videosettings",{"_index":1405,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videosettings.framerate",{"_index":1424,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videosettings.height",{"_index":1416,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videostream",{"_index":1395,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videostream.getaudiotracks().find((item",{"_index":1420,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videostream.getvideotracks()[0].getsettings",{"_index":1406,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videowidth",{"_index":360,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["view",{"_index":1021,"title":{},"body":{"components/VideoBoxComponent.html":{},"index.html":{}}}],["viewchild",{"_index":191,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["viewchild('audioelement",{"_index":204,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["viewchild('container",{"_index":793,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["viewchild('videoelement",{"_index":1046,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["viewchild('viewport",{"_index":355,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["viewchild(videoroomwrapperdirective",{"_index":1129,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["viewcontainerref",{"_index":1141,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["viewcontainerref.clear",{"_index":1143,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["viewcontainerref.createcomponent(componentfactory",{"_index":1144,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["viewport",{"_index":356,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["viewportheight",{"_index":439,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["viewportwidth",{"_index":438,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["visible",{"_index":963,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["visual",{"_index":247,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["void",{"_index":186,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["volume",{"_index":610,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["volume/mute",{"_index":617,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["wait",{"_index":1428,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["want",{"_index":641,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["warm",{"_index":1450,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["way",{"_index":1390,"title":{},"body":{"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["we're",{"_index":28,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["webapp",{"_index":706,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["webapps",{"_index":1610,"title":{},"body":{"index.html":{}}}],["webrtc",{"_index":249,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["webrtc_state",{"_index":1703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webrtcservice",{"_index":509,"title":{"injectables/WebrtcService.html":{}},"body":{"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["webrtcstate(on",{"_index":1280,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["website",{"_index":1643,"title":{},"body":{"index.html":{}}}],["websocket",{"_index":771,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["weight",{"_index":982,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["weird",{"_index":821,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["well",{"_index":1602,"title":{},"body":{"index.html":{}}}],["whenever",{"_index":311,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{}}}],["white",{"_index":950,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["width",{"_index":306,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["window",{"_index":397,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["window.crypto.getrandomvalues(array",{"_index":1720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["window.cypress",{"_index":810,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["window.janusstore",{"_index":811,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["window.location.reload",{"_index":1310,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["windows",{"_index":1597,"title":{},"body":{"index.html":{}}}],["wish",{"_index":1626,"title":{},"body":{"index.html":{}}}],["wishes",{"_index":21,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["within",{"_index":1196,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["without",{"_index":62,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["won't",{"_index":420,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["work",{"_index":922,"title":{},"body":{"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["working",{"_index":1532,"title":{},"body":{"index.html":{}}}],["works",{"_index":1550,"title":{},"body":{"index.html":{}}}],["wrap",{"_index":474,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["wrapper",{"_index":237,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["wrapper.component",{"_index":697,"title":{},"body":{"modules/JanusModule.html":{}}}],["wrapper.component.css",{"_index":1110,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.html",{"_index":1111,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.ts",{"_index":1109,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.ts:110",{"_index":1127,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.ts:37",{"_index":1122,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.ts:38",{"_index":1121,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.ts:39",{"_index":1119,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.ts:40",{"_index":1120,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.ts:42",{"_index":1118,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.ts:45",{"_index":1125,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.ts:48",{"_index":1124,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.ts:51",{"_index":1123,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.ts:53",{"_index":1131,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.ts:56",{"_index":1117,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.ts:80",{"_index":1126,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.directive",{"_index":699,"title":{},"body":{"modules/JanusModule.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.models",{"_index":786,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["wrapper.models.ts",{"_index":8,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["wrapper/video",{"_index":696,"title":{},"body":{"modules/JanusModule.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["wrappers",{"_index":1206,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["write",{"_index":1555,"title":{},"body":{"index.html":{}}}],["written",{"_index":1637,"title":{},"body":{"index.html":{}}}],["wss://janus.conf.meetecho.com/ws",{"_index":772,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["wsurl",{"_index":725,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["x.state",{"_index":385,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["yarn",{"_index":1623,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1391,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["you'll",{"_index":624,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["yourappmodule",{"_index":1627,"title":{},"body":{"index.html":{}}}],["z",{"_index":485,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["zoom",{"_index":674,"title":{},"body":{"modules/JanusModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AttachRemoteFeedEvent.html":{"url":"interfaces/AttachRemoteFeedEvent.html","title":"interface - AttachRemoteFeedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AttachRemoteFeedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/video-room-wrapper.models.ts\n        \n\n            \n                Description\n            \n            \n                Data for the attachRemoteFeedEvent. The event will negotiate a connection to\nreceive the remote stream. This must be called on each remote feed the user wishes\nto receive.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        feed\n                                \n                                \n                                        roomInfo\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        feed\n                                    \n                                \n                                \n                                    \n                                        feed:         RemoteFeed\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RemoteFeed\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Remote feed that we're requesting. The stream must be in the RemoteFeedState.initialized state. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roomInfo\n                                    \n                                \n                                \n                                    \n                                        roomInfo:         RoomInfo\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RoomInfo\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Room info object for the room the remote feed belongs to. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { EventEmitter, } from '@angular/core';\n\nimport {\n  Devices,\n  JanusRole,\n  RemoteFeed,\n  RoomInfo,\n} from './janus.models';\n\n\n/**\n * Data for the publishOwnFeed event emitted by a videoroom. This event will\n * tell the system to start publishing the local feed of the user. By default,\n * you can specify an audioDeviceId and videoDeviceId and the system will capture\n * video/audio from those devices. Alternatively, if skipVideoCapture is set to\n * true, the stream from the canvas element will be published without audio. The\n * videoroom will take full responsibility for drawing to the canvas element\n */\nexport interface PublishOwnFeedEvent {\n\n  /** Device ID for the microphone. ID matches what is returned by `navigator.mediaDevics.enumerateDevices` */\n  audioDeviceId: string;\n\n  /** Device ID for the camera. ID matches what is returned by `navigator.mediaDevics.enumerateDevices` */\n  videoDeviceId: string;\n\n  /** HTML ID of the canvas element. Must exist in all use cases, even not drawing on\n   * the canvas manually. If document.getElementById([canvasId]) does not return a canvas\n   * element, this will fail\n   */\n  canvasId: string;\n\n  /** If true, directs the service to not setup a video element. It will instead transmit\n   * a video stream from the canvas element\n   */\n  skipVideoCapture: boolean;\n}\n\n\n/** Data for the requestSubstream event. The event is used to request different\n * substreams when the publisher is using multicast, which is the default.\n */\nexport interface RequestSubstreamEvent {\n  /** Remote feed that we're requesting a different substream for. */\n  feed: RemoteFeed;\n\n  /** The integer id of the stream to request. */\n  substreamId: number;\n}\n\n/** Data for the attachRemoteFeedEvent. The event will negotiate a connection to\n * receive the remote stream. This must be called on each remote feed the user wishes\n * to receive.\n */\nexport interface AttachRemoteFeedEvent {\n  /** Remote feed that we're requesting. The stream must be in the `RemoteFeedState.initialized` state. */\n  feed: RemoteFeed;\n\n  /** Room info object for the room the remote feed belongs to. */\n  roomInfo: RoomInfo;\n}\n\n/**\n * Interface for customer video room component\n *\n * Any provided custom video room must implement this interface. You need not use all of the\n * data if your use case doesn't require it. For example, a room might be publish only, in which\n * case the remoteFeeds can be ignored\n */\nexport interface VideoRoomComponent {\n\n  /** roomInfo object */\n  roomInfo: RoomInfo;\n\n  /** Role of the user */\n  role: JanusRole;\n\n  /** Which devices to user */\n  devices?: Devices;\n\n  /** List of available feeds */\n  remoteFeeds: RemoteFeed[];\n\n  /** Event to request a different substream */\n  requestSubstream: EventEmitter;\n\n  /** Event to publish a locally collected feed */\n  publishOwnFeed: EventEmitter;\n\n  /** Event to subscribe to another publisher's feed */\n  attachRemoteFeed: EventEmitter;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AudioBoxComponent.html":{"url":"components/AudioBoxComponent.html","title":"component - AudioBoxComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AudioBoxComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/components/audio-box/audio-box.component.ts\n\n\n    \n        Description\n    \n    \n        Component for playing audio from a stream.\nThis will play the audio from a remoteFeed without rendering the video at all.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                janus-nvid-audio-box\n            \n\n            \n                styleUrls\n                ./audio-box.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./audio-box.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onDeviceChange\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                devices\n                            \n                            \n                                remoteFeed\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    devices\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(janusService: JanusService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/components/audio-box/audio-box.component.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        janusService\n                                                  \n                                                        \n                                                                    JanusService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n                \n                    \n                        Type :         Devices\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/audio-box/audio-box.component.ts:26\n                            \n                        \n                \n                    \n                        Requested output device (speaker). If available, this will dynamically change the\nspeaker device. This is not available in chrome on android\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        remoteFeed\n                    \n                \n                \n                    \n                        Type :         RemoteFeed\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/audio-box/audio-box.component.ts:20\n                            \n                        \n                \n                    \n                        RemoteFeed object \n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onDeviceChange\n                        \n                        \n                    \n                \n            \n            \n                \nonDeviceChange(devices: Devices)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/audio-box/audio-box.component.ts:71\n                \n            \n\n\n            \n                \n                    Attempts to change speaker if requested \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    devices\n                                    \n                                                Devices\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n\n\n                \n                    \n                        setdevices(devices)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/components/audio-box/audio-box.component.ts:29\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            devices\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { AfterViewInit, Component, Input, OnInit, ChangeDetectionStrategy, ViewChild, ElementRef } from '@angular/core';\n\nimport { RemoteFeed, Devices } from '../../models/janus.models';\nimport { JanusService } from '../../services/janus.service';\n\n/**\n * Component for playing audio from a stream.\n *\n * This will play the audio from a remoteFeed without rendering the video at all.\n */\n@Component({\n  selector: 'janus-nvid-audio-box',\n  templateUrl: './audio-box.component.html',\n  styleUrls: ['./audio-box.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AudioBoxComponent implements OnInit, AfterViewInit {\n\n  /** `RemoteFeed` object */\n  @Input() remoteFeed: RemoteFeed;\n\n  /** Requested output device (speaker). If available, this will dynamically change the\n   * speaker device. This is not available in chrome on android\n   */\n  @Input()\n  get devices(): Devices {\n    return this.localDevices;\n  }\n  set devices(devices: Devices) {\n    this.onDeviceChange(devices);\n    this.localDevices = devices;\n  }\n\n  /** @internal */\n  private localDevices: Devices;\n\n  /** @internal */\n  public audioId: string;\n\n  /** @internal */\n  @ViewChild('audioElement') audio: ElementRef;\n\n  constructor(\n    private janusService: JanusService,\n  ) { }\n\n  ngOnInit(): void {\n    // Set my unique id for the audio\n    const instance = this;\n    this.audioId = 'audio-' + this.remoteFeed.id;\n  }\n\n  ngAfterViewInit(): void {\n    this.janusService.attachMediaStream(this.audioId, this.remoteFeed.streamId);\n  }\n\n  /** @internal */\n  setSpeaker(devices: Devices): void {\n    if (\n      this.audio\n      && this.audio.nativeElement\n      && this.audio.nativeElement.setSinkId\n      && devices\n      && devices.speakerDeviceId\n    ) {\n      this.audio.nativeElement.setSinkId(devices.speakerDeviceId);\n    }\n  }\n\n  /** Attempts to change speaker if requested */\n  onDeviceChange(devices: Devices): void {\n    this.setSpeaker(devices);\n  }\n}\n\n    \n\n    \n        \n\n    \n\n    \n                \n                    ./audio-box.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AudioBoxComponent', 'selector': 'janus-nvid-audio-box'},{'name': 'DefaultVideoRoomComponent', 'selector': 'janus-default-video-room'},{'name': 'DeviceSelectorComponent', 'selector': 'janus-device-selector'},{'name': 'JanusVideoroomComponent', 'selector': 'janus-videoroom'},{'name': 'SelfVideoComponent', 'selector': 'janus-self-video'},{'name': 'VideoBoxComponent', 'selector': 'janus-video-box'},{'name': 'VideoRoomWrapperComponent', 'selector': 'janus-video-room-wrapper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AudioBoxComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DefaultVideoRoomComponent.html":{"url":"components/DefaultVideoRoomComponent.html","title":"component - DefaultVideoRoomComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DefaultVideoRoomComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/components/default-video-room/default-video-room.component.ts\n\n\n    \n        Description\n    \n    \n        Reference implementation of a video room display component.\nThis component displays the visual elements of a videoroom. The webRTC signalling is\nmostly abstracted away in higher level components. There are a small number of events\nthis component can emit in order to affect the webRTC signalling.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                janus-default-video-room\n            \n\n            \n                styleUrls\n                ./default-video-room.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./default-video-room.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                mode\n                            \n                            \n                                readyRemoteFeeds\n                            \n                            \n                                    Public\n                                speaker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                computeVideoWidth\n                            \n                            \n                                onMaximize\n                            \n                            \n                                onPublishOwnFeed\n                            \n                            \n                                onRemoteFeedsChange\n                            \n                            \n                                onRequestSubstream\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                devices\n                            \n                            \n                                remoteFeeds\n                            \n                            \n                                role\n                            \n                            \n                                roomInfo\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                attachRemoteFeed\n                            \n                            \n                                publishOwnFeed\n                            \n                            \n                                requestSubstream\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    remoteFeeds\n                                \n                                \n                                    publishing\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(changeDetector: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/lib/components/default-video-room/default-video-room.component.ts:114\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n                \n                    \n                        Type :         Devices\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:53\n                            \n                        \n                \n                    \n                        Requested devices \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        remoteFeeds\n                    \n                \n                \n                    \n                        Type :         RemoteFeed[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:63\n                            \n                        \n                \n                    \n                        Existing RemoteFeeds. This component must request any desired RemoteFeed be streamed by\nemitting a attachRemoteStream event. This is not done automatically because it might not be\ndesired to receive all remote feeds, depending on the product. A RemoteFeed can be attached\nto iff its current state is RemoteFeedState.initialized. A RemoteFeed that is in the\nRemoteFeedState.ready state can be streamed materialized by calling\nJanusService.attachMediaStream.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        role\n                    \n                \n                \n                    \n                        Type :         JanusRole\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:50\n                            \n                        \n                \n                    \n                        User's role in this videoroom \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        roomInfo\n                    \n                \n                \n                    \n                        Type :         RoomInfo\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:47\n                            \n                        \n                \n                    \n                        RoomInfo object \n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        attachRemoteFeed\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:82\n                            \n                        \n                \n                    \n                        Event to begin streaming a remote feed \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        publishOwnFeed\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:78\n                            \n                        \n                \n                    \n                        Event to publish a local stream \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        requestSubstream\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:74\n                            \n                        \n                \n                    \n                        Event to request a different substream \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            computeVideoWidth\n                        \n                        \n                    \n                \n            \n            \n                \ncomputeVideoWidth(numRemoteVideos)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:216\n                \n            \n\n\n            \n                \n                    Computes the ideal width of each video assuming all videos are the same size.\nCalled whenever the screen is resized or remoteFeeds changes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    numRemoteVideos\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onMaximize\n                        \n                        \n                    \n                \n            \n            \n                \nonMaximize(remoteFeed: RemoteFeed)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:139\n                \n            \n\n\n            \n                \n                    Event callback to switch to/from speaker mode \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    remoteFeed\n                                    \n                                                RemoteFeed\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onPublishOwnFeed\n                        \n                        \n                    \n                \n            \n            \n                \nonPublishOwnFeed(event: PublishOwnFeedEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:154\n                \n            \n\n\n            \n                \n                    Event callback to publish a local stream \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                PublishOwnFeedEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onRemoteFeedsChange\n                        \n                        \n                    \n                \n            \n            \n                \nonRemoteFeedsChange(previousRemoteFeeds: RemoteFeed[], currentRemoteFeeds: RemoteFeed[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:159\n                \n            \n\n\n            \n                \n                    Called on all changes of remoteFeeds \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    previousRemoteFeeds\n                                    \n                                                RemoteFeed[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentRemoteFeeds\n                                    \n                                                RemoteFeed[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onRequestSubstream\n                        \n                        \n                    \n                \n            \n            \n                \nonRequestSubstream(event: RequestSubstreamEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:149\n                \n            \n\n\n            \n                \n                    Event callback to request a new substream \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                RequestSubstreamEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            mode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     \"grid\" | \"speaker\"\n\n                        \n                    \n                    \n                        \n                            Default value : 'grid'\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:111\n                            \n                        \n\n                \n                    \n                        Current mode of the video room \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            readyRemoteFeeds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         RemoteFeed[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:70\n                            \n                        \n\n                \n                    \n                        List of RemoteFeeds objects that are in the RemoteFeedState.ready state. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            speaker\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         RemoteFeed\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:114\n                            \n                        \n\n                \n                    \n                        Current speaker in the event we're in speaker mode \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        remoteFeeds\n                    \n                \n\n\n                \n                    \n                        setremoteFeeds(remoteFeeds: [])\n                    \n                \n                            \n                                \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:64\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            remoteFeeds\n                                                    \n                                                            \n                                                                        []\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        publishing\n                    \n                \n\n                \n                    \n                        getpublishing()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:134\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n} from '@angular/core';\n\nimport { fromEvent, Observable, Subscription, interval, Subject } from 'rxjs';\nimport { debounce, takeUntil } from 'rxjs/operators';\n\nimport {\n  AttachRemoteFeedEvent,\n  Devices,\n  JanusRole,\n  PublishOwnFeedEvent,\n  RemoteFeed,\n  RemoteFeedState,\n  RequestSubstreamEvent,\n  RoomInfo,\n  RoomInfoState,\n} from '../../models';\n\n/**\n * Reference implementation of a video room display component.\n *\n * This component displays the visual elements of a videoroom. The webRTC signalling is\n * mostly abstracted away in higher level components. There are a small number of events\n * this component can emit in order to affect the webRTC signalling.\n */\n@Component({\n  selector: 'janus-default-video-room',\n  templateUrl: './default-video-room.component.html',\n  styleUrls: ['./default-video-room.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DefaultVideoRoomComponent implements OnInit, OnDestroy, AfterViewInit {\n\n  /** `RoomInfo` object */\n  @Input() roomInfo: RoomInfo;\n\n  /** User's role in this videoroom */\n  @Input() role: JanusRole;\n\n  /** Requested devices */\n  @Input() devices?: Devices;\n\n  /** Existing `RemoteFeeds`. This component must request any desired `RemoteFeed` be streamed by\n   * emitting a attachRemoteStream event. This is not done automatically because it might not be\n   * desired to receive all remote feeds, depending on the product. A `RemoteFeed` can be attached\n   * to iff its current state is `RemoteFeedState.initialized`. A `RemoteFeed` that is in the\n   * `RemoteFeedState.ready` state can be streamed materialized by calling\n   * `JanusService.attachMediaStream`.\n   */\n  @Input()\n  get remoteFeeds(): RemoteFeed[] { return this.privateRemoteFeeds; }\n  set remoteFeeds(remoteFeeds: RemoteFeed[]) {\n    this.onRemoteFeedsChange(this.privateRemoteFeeds, remoteFeeds);\n    this.privateRemoteFeeds = remoteFeeds;\n  }\n\n  /** List of `RemoteFeeds` objects that are in the `RemoteFeedState.ready` state. */\n  readyRemoteFeeds: RemoteFeed[] = [];\n\n  /** Event to request a different substream */\n  @Output()\n  requestSubstream = new EventEmitter();\n\n  /** Event to publish a local stream */\n  @Output()\n  publishOwnFeed = new EventEmitter();\n\n  /** Event to begin streaming a remote feed */\n  @Output()\n  attachRemoteFeed = new EventEmitter();\n\n  /** @internal */\n  @ViewChild('viewport') viewport: ElementRef;\n\n  /** @internal */\n  private resizeObservable$: Observable;\n\n  /** @internal */\n  private destroy$ = new Subject();\n\n  /** @internal */\n  private privateRemoteFeeds: RemoteFeed[] = [];\n\n  /** @internal */\n  public videoWidth = 0;\n  /** @internal */\n  public videoHeight = 0;\n  /** @internal */\n  public speakerWidth = 0;\n  /** @internal */\n  public speakerHeight = 0;\n\n  /** @internal */\n  public selfVideoRight = 0;\n  /** @internal */\n  public selfVideoBottom = 0;\n\n  /** Current mode of the video room */\n  public mode: 'grid' | 'speaker' = 'grid';\n\n  /** Current speaker in the event we're in speaker mode */\n  public speaker: RemoteFeed;\n\n  constructor(\n    private changeDetector: ChangeDetectorRef,\n  ) { }\n\n  ngOnInit(): void {\n    // subscribe to resize events\n    this.resizeObservable$ = fromEvent(window, 'resize');\n  }\n\n  ngAfterViewInit(): void {\n    this.setupSubscriptions();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  get publishing(): boolean {\n    return this.role === 'publisher';\n  }\n\n  /** Event callback to switch to/from speaker mode */\n  onMaximize(remoteFeed: RemoteFeed): void {\n    if (this.mode === 'grid') {\n      this.speaker = remoteFeed;\n      this.mode = 'speaker';\n    } else {\n      this.mode = 'grid';\n    }\n  }\n\n  /** Event callback to request a new substream */\n  onRequestSubstream(event: RequestSubstreamEvent): void {\n    this.requestSubstream.emit(event);\n  }\n\n  /** Event callback to publish a local stream */\n  onPublishOwnFeed(event: PublishOwnFeedEvent): void {\n    this.publishOwnFeed.emit(event);\n  }\n\n  /** Called on all changes of `remoteFeeds` */\n  onRemoteFeedsChange(previousRemoteFeeds: RemoteFeed[], currentRemoteFeeds: RemoteFeed[]): void {\n\n    this.computeVideoWidth(currentRemoteFeeds.length);\n    for (const feed of currentRemoteFeeds) {\n      if (feed.state === RemoteFeedState.initialized) {\n        this.attachRemoteFeed.emit({\n          roomInfo: this.roomInfo,\n          feed,\n        });\n      }\n    }\n\n    this.readyRemoteFeeds = currentRemoteFeeds.filter((x) => x.state === RemoteFeedState.ready);\n  }\n\n  /** @internal */\n  trackByFeedId(index: number, remoteFeed: RemoteFeed): string {\n    return remoteFeed.id;\n  }\n\n  /** @internal */\n  get selfVideoHeight(): number {\n    if (this.mode === 'grid') {\n      return this.videoHeight;\n    } else {\n      return this.speakerHeight / 5;\n    }\n  }\n\n  /** @internal */\n  get selfVideoWidth(): number {\n    if (this.mode === 'grid') {\n      return this.videoWidth;\n    } else {\n      return this.speakerWidth / 5;\n    }\n  }\n\n  /** @internal */\n  setupSubscriptions(): void {\n    // Compute video width whenever the window is resized\n    this.resizeObservable$\n      .pipe(\n        debounce(() => interval(500)),\n        takeUntil(this.destroy$),\n      )\n      .subscribe((event) => {\n        this.computeVideoWidth(this.remoteFeeds.length);\n      });\n\n    // Do an initial calculation\n    this.computeVideoWidth(0);\n  }\n\n  /** Computes the ideal width of each video assuming all videos are the same size.\n   * Called whenever the screen is resized or `remoteFeeds` changes\n   */\n  computeVideoWidth(numRemoteVideos): void {\n    if (!this.viewport) {\n      return;\n    }\n    // Adding 1 for our local video\n    let numVideos = numRemoteVideos;\n    if (this.publishing) {\n      numVideos += 1;\n    }\n\n    this.videoWidth = this.findIdealWidth(\n      this.viewport.nativeElement.offsetWidth,\n      this.viewport.nativeElement.offsetHeight,\n      numVideos);\n\n    this.videoHeight = this.videoWidth * 3 / 4;\n\n    this.computeSpeakerModeDimensions();\n\n    // The window resize event is outside of angular, so change detection won't\n    // automatically pick this up. Smells a bit, but not sure there's a better\n    // solution\n    this.changeDetector.detectChanges();\n  }\n\n  /** @internal */\n  computeSpeakerModeDimensions(aspectRatio: number = 4 / 3): void {\n    const width = this.viewport.nativeElement.offsetWidth;\n    const height = this.viewport.nativeElement.offsetHeight;\n\n    const calculatedWidth = height * aspectRatio;\n\n    if (calculatedWidth > width) {\n      this.speakerWidth = width;\n    } else {\n      this.speakerWidth = calculatedWidth;\n    }\n    this.speakerHeight = this.speakerWidth * 3 / 4;\n\n    this.selfVideoBottom = (height - (this.speakerWidth / aspectRatio)) / 2;\n    this.selfVideoRight = (width - this.speakerWidth) / 2;\n  }\n\n  /** @internal */\n  findIdealWidth(\n    viewportWidth: number,\n    viewportHeight: number,\n    numVideos: number,\n    aspectRatio: number = 4 / 3\n  ): number {\n    // Do a bisect search for the largest width that will fit in our viewport\n\n    const isValidWidth = ((testWidth: number) => {\n      if (testWidth > viewportWidth) {\n        return false;\n      }\n      const numColumns = Math.min(numVideos, Math.floor(viewportWidth / testWidth));\n      const numRows = Math.ceil(numVideos / numColumns);\n      const testHeight = Math.ceil(testWidth / aspectRatio);\n\n      // console.log('is valid: ', testWidth, testHeight, numColumns, numRows, (testHeight * numRows)  maxFits + 1) {\n      iterations += 1;\n      const ptr = Math.floor((maxFits + minOver) / 2);\n      if (isValidWidth(ptr)) {\n        maxFits = ptr;\n      } else {\n        minOver = ptr;\n      }\n\n      if (iterations > 50) {\n        break;\n      }\n    }\n\n    // console.log('searching', viewportWidth, viewportHeight, numVideos, maxFits);\n    return maxFits;\n  }\n}\n\n    \n\n    \n        \n\n  \n    \n  \n\n  \n    \n      \n    \n  \n\n  \n    \n      \n    \n\n    \n      \n\n      \n\n    \n  \n\n\n    \n\n    \n                \n                    ./default-video-room.component.scss\n                \n                div.video-room-viewport {\n    width: 100%;\n    height: 100%;\n\n    position: relative;\n\n    display: flex;\n    justify-content: center;\n    align-content: center;\n    flex-wrap: wrap;\n\n    /* background-color: #a5adb7; */\n\n    div {\n        /* border: 2px solid black; */ \n    }\n}\n\ndiv.speaker {\n    position: absolute;\n    z-index: 1;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                '\n    var COMPONENTS = [{'name': 'AudioBoxComponent', 'selector': 'janus-nvid-audio-box'},{'name': 'DefaultVideoRoomComponent', 'selector': 'janus-default-video-room'},{'name': 'DeviceSelectorComponent', 'selector': 'janus-device-selector'},{'name': 'JanusVideoroomComponent', 'selector': 'janus-videoroom'},{'name': 'SelfVideoComponent', 'selector': 'janus-self-video'},{'name': 'VideoBoxComponent', 'selector': 'janus-video-box'},{'name': 'VideoRoomWrapperComponent', 'selector': 'janus-video-room-wrapper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DefaultVideoRoomComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DeviceSelectorComponent.html":{"url":"components/DeviceSelectorComponent.html","title":"component - DeviceSelectorComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DeviceSelectorComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/containers/device-selector/device-selector.component.ts\n\n\n    \n        Description\n    \n    \n        Device selector form. Implements a form that will show the user options for picking their camera,\nmicrophone, and speaker device. The speaker option is only shown if the device supports dynamically\nchanging the speaker. This class can be subclassed if style changes are desired.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n    \n        Example\n    \n    \n                \n                    \n\n                \n    \n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                janus-device-selector\n            \n\n            \n                styleUrls\n                ./device-selector.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./device-selector.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                availableAudioDevices\n                            \n                            \n                                    Public\n                                availableSpeakerDevices\n                            \n                            \n                                    Public\n                                availableVideoDevices\n                            \n                            \n                                    Public\n                                devicesForm\n                            \n                            \n                                    Public\n                                supportsSpeakerSelection\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                devices\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                deviceUpdate\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(changeDetector: ChangeDetectorRef, builder: FormBuilder, webrtc: WebrtcService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/containers/device-selector/device-selector.component.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        builder\n                                                  \n                                                        \n                                                                        FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        webrtc\n                                                  \n                                                        \n                                                                        WebrtcService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n                \n                    \n                        Type :         Devices\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/device-selector/device-selector.component.ts:36\n                            \n                        \n                \n                    \n                        Currently selected devices\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        deviceUpdate\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/device-selector/device-selector.component.ts:42\n                            \n                        \n                \n                    \n                        Event emitted whenever the user changes the devices in the form\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            availableAudioDevices\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/device-selector/device-selector.component.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            availableSpeakerDevices\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/device-selector/device-selector.component.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            availableVideoDevices\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/device-selector/device-selector.component.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            devicesForm\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/device-selector/device-selector.component.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            supportsSpeakerSelection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/containers/device-selector/device-selector.component.ts:48\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { ChangeDetectorRef, Component, EventEmitter, OnDestroy, OnInit, Output, ChangeDetectionStrategy, Input } from '@angular/core';\n\nimport { FormBuilder, Validators } from '@angular/forms';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { WebrtcService } from '../../services/janus.service';\nimport { Devices } from '../../models/janus.models';\n\n\n/**\n * Device selector form. Implements a form that will show the user options for picking their camera,\n * microphone, and speaker device. The speaker option is only shown if the device supports dynamically\n * changing the speaker. This class can be subclassed if style changes are desired.\n * @example\n * \n * \n */\n@Component({\n  selector: 'janus-device-selector',\n  templateUrl: './device-selector.component.html',\n  styleUrls: [\n    './device-selector.component.scss',\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DeviceSelectorComponent implements OnInit, OnDestroy {\n\n  /**\n   * Currently selected devices\n   */\n  @Input()\n  devices: Devices;\n\n  /**\n   * Event emitted whenever the user changes the devices in the form\n   */\n  @Output()\n  deviceUpdate = new EventEmitter();\n\n  public devicesForm;\n  public availableAudioDevices;\n  public availableVideoDevices;\n  public availableSpeakerDevices;\n  public supportsSpeakerSelection = false;\n  private destroy$ = new Subject();\n\n\n  constructor(\n    private changeDetector: ChangeDetectorRef,\n    private builder: FormBuilder,\n    private webrtc: WebrtcService,\n  ) { }\n\n  ngOnInit(): void {\n\n    this.devicesForm = this.builder.group({\n      audioDevice: [this.devices.audioDeviceId, [Validators.required]],\n      videoDevice: [this.devices.videoDeviceId, [Validators.required]],\n      speakerDevice: [this.devices.speakerDeviceId, [Validators.required]],\n    });\n    this.getDevices();\n\n    this.devicesForm.valueChanges.pipe(\n      takeUntil(this.destroy$)\n    ).subscribe(() => {\n      const devices = {\n        audioDeviceId: this.devicesForm.get('audioDevice').value,\n        videoDeviceId: this.devicesForm.get('videoDevice').value,\n        speakerDeviceId: this.devicesForm.get('speakerDevice').value,\n      };\n      this.deviceUpdate.emit(devices);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  /** @internal */\n  async getDevices(): Promise {\n    const allDevices = await this.webrtc.listDevices();\n    this.supportsSpeakerSelection = this.webrtc.supportsSpeakerSelection();\n    this.availableAudioDevices = allDevices.filter((device) => device.kind === 'audioinput');\n    this.availableVideoDevices = allDevices.filter((device) => device.kind === 'videoinput');\n    this.availableSpeakerDevices = allDevices.filter((device) => device.kind === 'audiooutput');\n    this.changeDetector.detectChanges();\n  }\n}\n\n    \n\n    \n        \n    \n      Microphone\n      \n      \n        {{ device.label }}\n      \n    \n\n    \n      Camera\n      \n      \n        {{ device.label }}\n      \n    \n\n    \n      Speakers\n      \n      \n        {{ device.label }}\n      \n    \n\n\n    \n\n    \n                \n                    ./device-selector.component.scss\n                \n                div.form-row {\n    display: flex;\n    justify-content: center;\n    padding: 5px 0;\n\n    span.flex {\n        flex-grow: 1;\n    }\n\n    label {\n        width: 30%;\n    }\n\n    select {\n        width: 60%;\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '          Microphone                    {{ device.label }}                    Camera                    {{ device.label }}                    Speakers                    {{ device.label }}          '\n    var COMPONENTS = [{'name': 'AudioBoxComponent', 'selector': 'janus-nvid-audio-box'},{'name': 'DefaultVideoRoomComponent', 'selector': 'janus-default-video-room'},{'name': 'DeviceSelectorComponent', 'selector': 'janus-device-selector'},{'name': 'JanusVideoroomComponent', 'selector': 'janus-videoroom'},{'name': 'SelfVideoComponent', 'selector': 'janus-self-video'},{'name': 'VideoBoxComponent', 'selector': 'janus-video-box'},{'name': 'VideoRoomWrapperComponent', 'selector': 'janus-video-room-wrapper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DeviceSelectorComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Devices.html":{"url":"interfaces/Devices.html","title":"interface - Devices","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Devices\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/janus.models.ts\n        \n\n            \n                Description\n            \n            \n                Device specifications\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        audioDeviceId\n                                \n                                \n                                        speakerDeviceId\n                                \n                                \n                                        videoDeviceId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audioDeviceId\n                                    \n                                \n                                \n                                    \n                                        audioDeviceId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Microphone Device ID \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        speakerDeviceId\n                                    \n                                \n                                \n                                    \n                                        speakerDeviceId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Speaker Device ID \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        videoDeviceId\n                                    \n                                \n                                \n                                    \n                                        videoDeviceId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Camera Device ID \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as moment from 'moment';\n\n/**\n * Device specifications\n */\nexport interface Devices {\n  /** Microphone Device ID */\n  audioDeviceId: string;\n\n  /** Camera Device ID */\n  videoDeviceId: string;\n\n  /** Speaker Device ID */\n  speakerDeviceId: string;\n}\n\n/**\n * Room state machine\n */\nexport enum RoomInfoState {\n  start = 'start',\n  initializing = 'initializing',\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  attach_failed = 'attach_failed',\n  joining = 'joining',\n\n  /** Once joined, you can start publishing */\n  joined = 'joined',\n  error = 'error',\n}\n\n/**\n * Current publish status\n */\nexport enum PublishState {\n  start = 'start',\n  ready = 'ready',\n  publishRequested = 'publish requested',\n  publishing = 'publishing',\n  error = 'error',\n}\n\n/**\n * Metadata for a room\n */\nexport interface RoomInfo {\n\n  /** State of the room */\n  state: RoomInfoState;\n\n  /** roomId */\n  id: string;\n\n  /** Description of the room */\n  description: string;\n\n  /** private_id assigned by janus */\n  privateId: number;\n\n  /** Value passed back in \"joined\" message */\n  otherRoomId: number;  // This comes back in the \"joined\" message. Not sure what to use it for\n\n  /** Set to error code if there was an error in the room */\n  errorCode: number;\n\n  /** Local publishing state */\n  publishState: PublishState;\n\n  /** @internal Internal stream id */\n  localStreamId: string;\n\n  /** True iff the audio is muted */\n  muted: boolean;\n}\n\n/**\n * Remote feed state machine\n */\nexport enum RemoteFeedState {\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  ready = 'ready',\n  error = 'error',\n}\n\n/**\n * Current state of a remote feed\n * There exists a remote feed object for each available publisher in the video\n * room. It's possible to attach to these\n */\nexport interface RemoteFeed {\n  /** Current state of the feed */\n  state: RemoteFeedState;\n\n  /** Id of the publisher */\n  id: string;\n\n  /** @internal */\n  streamId: string;\n\n  /** number of video tracks available */\n  numVideoTracks: number;\n\n  /** Substream requested */\n  requestedSubstream: number;\n\n  /** Substream currently being received */\n  currentSubstream: number;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /** @internal */\n  audio_codec: string;\n\n  /** @internal */\n  video_codec: string;\n\n  /** @internal */\n  volume: number;\n\n  /** @internal */\n  muted: boolean;\n\n  /** timestamp of most recent slowLink event on this feed */\n  slowLink: moment.Moment;\n}\n\n/**\n * Information for a publisher. Note that the volume/mute information is not\n * very practical in how it's implemented in janus currently. In order to get\n * meaningful information about talking/not talking, you'll need to know the\n * average background noise level of each publisher ahead of time. This is\n * specified at `audio_level_average` in the room. This isn't practical if you\n * don't know the publisher's system setup ahead of time. We set the\n * `audio_level_average` to 127 in the backend configuration. That makes the\n * start/stop talking events good for knowing if the remote user has muted.\n * You might want to ignore this information depending on your use case.\n */\nexport interface Publisher {\n\n  /** Janus ID of the publisher */\n  id: string;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /**\n   * Current volume of the publisher's audio. See notes in the interface description.\n   */\n  volume: number;\n\n  /** Set to true iff the last volume event had the volume at 127 */\n  muted: boolean;\n}\n\n/**\n * Possible roles for a user.\n */\nexport enum JanusRole {\n  /** A user in this role will publish their audio/video and see/hear all other publishers */\n  publisher = 'publisher',\n\n  /** A user in this role will *not* publish their audio/video. They will still see/hear all other publishers */\n  listener = 'listener',\n}\n\n/**\n * IceServer configuration. More details are in the {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer|MDN Docs}\n */\nexport interface IceServer {\n  urls: string;\n  username?: string;\n  credential?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IceServer.html":{"url":"interfaces/IceServer.html","title":"interface - IceServer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IceServer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/janus.models.ts\n        \n\n            \n                Description\n            \n            \n                IceServer configuration. More details are in the MDN Docs\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        credential\n                                \n                                \n                                        urls\n                                \n                                \n                                            Optional\n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        credential\n                                    \n                                \n                                \n                                    \n                                        credential:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        urls\n                                    \n                                \n                                \n                                    \n                                        urls:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as moment from 'moment';\n\n/**\n * Device specifications\n */\nexport interface Devices {\n  /** Microphone Device ID */\n  audioDeviceId: string;\n\n  /** Camera Device ID */\n  videoDeviceId: string;\n\n  /** Speaker Device ID */\n  speakerDeviceId: string;\n}\n\n/**\n * Room state machine\n */\nexport enum RoomInfoState {\n  start = 'start',\n  initializing = 'initializing',\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  attach_failed = 'attach_failed',\n  joining = 'joining',\n\n  /** Once joined, you can start publishing */\n  joined = 'joined',\n  error = 'error',\n}\n\n/**\n * Current publish status\n */\nexport enum PublishState {\n  start = 'start',\n  ready = 'ready',\n  publishRequested = 'publish requested',\n  publishing = 'publishing',\n  error = 'error',\n}\n\n/**\n * Metadata for a room\n */\nexport interface RoomInfo {\n\n  /** State of the room */\n  state: RoomInfoState;\n\n  /** roomId */\n  id: string;\n\n  /** Description of the room */\n  description: string;\n\n  /** private_id assigned by janus */\n  privateId: number;\n\n  /** Value passed back in \"joined\" message */\n  otherRoomId: number;  // This comes back in the \"joined\" message. Not sure what to use it for\n\n  /** Set to error code if there was an error in the room */\n  errorCode: number;\n\n  /** Local publishing state */\n  publishState: PublishState;\n\n  /** @internal Internal stream id */\n  localStreamId: string;\n\n  /** True iff the audio is muted */\n  muted: boolean;\n}\n\n/**\n * Remote feed state machine\n */\nexport enum RemoteFeedState {\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  ready = 'ready',\n  error = 'error',\n}\n\n/**\n * Current state of a remote feed\n * There exists a remote feed object for each available publisher in the video\n * room. It's possible to attach to these\n */\nexport interface RemoteFeed {\n  /** Current state of the feed */\n  state: RemoteFeedState;\n\n  /** Id of the publisher */\n  id: string;\n\n  /** @internal */\n  streamId: string;\n\n  /** number of video tracks available */\n  numVideoTracks: number;\n\n  /** Substream requested */\n  requestedSubstream: number;\n\n  /** Substream currently being received */\n  currentSubstream: number;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /** @internal */\n  audio_codec: string;\n\n  /** @internal */\n  video_codec: string;\n\n  /** @internal */\n  volume: number;\n\n  /** @internal */\n  muted: boolean;\n\n  /** timestamp of most recent slowLink event on this feed */\n  slowLink: moment.Moment;\n}\n\n/**\n * Information for a publisher. Note that the volume/mute information is not\n * very practical in how it's implemented in janus currently. In order to get\n * meaningful information about talking/not talking, you'll need to know the\n * average background noise level of each publisher ahead of time. This is\n * specified at `audio_level_average` in the room. This isn't practical if you\n * don't know the publisher's system setup ahead of time. We set the\n * `audio_level_average` to 127 in the backend configuration. That makes the\n * start/stop talking events good for knowing if the remote user has muted.\n * You might want to ignore this information depending on your use case.\n */\nexport interface Publisher {\n\n  /** Janus ID of the publisher */\n  id: string;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /**\n   * Current volume of the publisher's audio. See notes in the interface description.\n   */\n  volume: number;\n\n  /** Set to true iff the last volume event had the volume at 127 */\n  muted: boolean;\n}\n\n/**\n * Possible roles for a user.\n */\nexport enum JanusRole {\n  /** A user in this role will publish their audio/video and see/hear all other publishers */\n  publisher = 'publisher',\n\n  /** A user in this role will *not* publish their audio/video. They will still see/hear all other publishers */\n  listener = 'listener',\n}\n\n/**\n * IceServer configuration. More details are in the {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer|MDN Docs}\n */\nexport interface IceServer {\n  urls: string;\n  username?: string;\n  credential?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/JanusModule.html":{"url":"modules/JanusModule.html","title":"module - JanusModule","body":"\n                   \n\n\n\n\n    Modules\n    JanusModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_JanusModule\n\n\n\ncluster_JanusModule_declarations\n\n\n\ncluster_JanusModule_exports\n\n\n\n\nAudioBoxComponent\n\nAudioBoxComponent\n\n\n\nJanusModule\n\nJanusModule\n\nJanusModule -->\n\nAudioBoxComponent->JanusModule\n\n\n\n\n\nDefaultVideoRoomComponent\n\nDefaultVideoRoomComponent\n\nJanusModule -->\n\nDefaultVideoRoomComponent->JanusModule\n\n\n\n\n\nDeviceSelectorComponent\n\nDeviceSelectorComponent\n\nJanusModule -->\n\nDeviceSelectorComponent->JanusModule\n\n\n\n\n\nJanusVideoroomComponent\n\nJanusVideoroomComponent\n\nJanusModule -->\n\nJanusVideoroomComponent->JanusModule\n\n\n\n\n\nSelfVideoComponent\n\nSelfVideoComponent\n\nJanusModule -->\n\nSelfVideoComponent->JanusModule\n\n\n\n\n\nVideoBoxComponent\n\nVideoBoxComponent\n\nJanusModule -->\n\nVideoBoxComponent->JanusModule\n\n\n\n\n\nVideoRoomWrapperComponent\n\nVideoRoomWrapperComponent\n\nJanusModule -->\n\nVideoRoomWrapperComponent->JanusModule\n\n\n\n\n\nAudioBoxComponent \n\nAudioBoxComponent \n\nAudioBoxComponent  -->\n\nJanusModule->AudioBoxComponent \n\n\n\n\n\nDefaultVideoRoomComponent \n\nDefaultVideoRoomComponent \n\nDefaultVideoRoomComponent  -->\n\nJanusModule->DefaultVideoRoomComponent \n\n\n\n\n\nDeviceSelectorComponent \n\nDeviceSelectorComponent \n\nDeviceSelectorComponent  -->\n\nJanusModule->DeviceSelectorComponent \n\n\n\n\n\nJanusVideoroomComponent \n\nJanusVideoroomComponent \n\nJanusVideoroomComponent  -->\n\nJanusModule->JanusVideoroomComponent \n\n\n\n\n\nSelfVideoComponent \n\nSelfVideoComponent \n\nSelfVideoComponent  -->\n\nJanusModule->SelfVideoComponent \n\n\n\n\n\nVideoBoxComponent \n\nVideoBoxComponent \n\nVideoBoxComponent  -->\n\nJanusModule->VideoBoxComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/janus.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AudioBoxComponent\n                        \n                        \n                            DefaultVideoRoomComponent\n                        \n                        \n                            DeviceSelectorComponent\n                        \n                        \n                            JanusVideoroomComponent\n                        \n                        \n                            SelfVideoComponent\n                        \n                        \n                            VideoBoxComponent\n                        \n                        \n                            VideoRoomWrapperComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AudioBoxComponent\n                        \n                        \n                            DefaultVideoRoomComponent\n                        \n                        \n                            DeviceSelectorComponent\n                        \n                        \n                            JanusVideoroomComponent\n                        \n                        \n                            SelfVideoComponent\n                        \n                        \n                            VideoBoxComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\nimport { JanusVideoroomComponent } from './containers/janus-videoroom/janus-videoroom.component';\nimport { DeviceSelectorComponent } from './containers/device-selector/device-selector.component';\nimport { AudioBoxComponent } from './components/audio-box/audio-box.component';\nimport { DefaultVideoRoomComponent } from './components/default-video-room/default-video-room.component';\nimport { SelfVideoComponent } from './components/self-video/self-video.component';\nimport { VideoBoxComponent } from './components/video-box/video-box.component';\nimport { VideoRoomWrapperComponent } from './components/video-room-wrapper/video-room-wrapper.component';\nimport { VideoRoomWrapperDirective } from './components/video-room-wrapper/video-room-wrapper.directive';\n\n\n@NgModule({\n  declarations: [\n    JanusVideoroomComponent,\n    DeviceSelectorComponent,\n    AudioBoxComponent,\n    DefaultVideoRoomComponent,\n    SelfVideoComponent,\n    VideoBoxComponent,\n    VideoRoomWrapperComponent,\n    VideoRoomWrapperDirective,\n  ],\n  imports: [\n    ReactiveFormsModule,\n    CommonModule,\n  ],\n  exports: [\n    JanusVideoroomComponent,\n    DeviceSelectorComponent,\n    SelfVideoComponent,\n    VideoBoxComponent,\n    AudioBoxComponent,\n    DefaultVideoRoomComponent,\n  ]\n})\nexport class JanusModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/JanusVideoroomComponent.html":{"url":"components/JanusVideoroomComponent.html","title":"component - JanusVideoroomComponent","body":"\n                   \n\n\n\n\n\n  Components\n  JanusVideoroomComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/containers/janus-videoroom/janus-videoroom.component.ts\n\n\n    \n        Description\n    \n    \n        Janus videoroom component. This is a high level component to easily embed a janus videoroom in any angular webapp.\nThere are many options that can be set through Inputs. However, you can get started with the minimal example below.\nRefer to the Janus Videoroom Docs for deploying your own\nJanus media server.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n                    OnChanges\n    \n\n    \n        Example\n    \n    \n                \n                    \n\n                \n    \n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n            \n                providers\n                \n                            JanusStore\n                \n            \n\n\n            \n                selector\n                janus-videoroom\n            \n\n            \n                styleUrls\n                ./janus-videoroom.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./janus-videoroom.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                component\n                            \n                            \n                                devices\n                            \n                            \n                                httpUrl\n                            \n                            \n                                iceServers\n                            \n                            \n                                isMuted\n                            \n                            \n                                pin\n                            \n                            \n                                role\n                            \n                            \n                                roomId\n                            \n                            \n                                userId\n                            \n                            \n                                userName\n                            \n                            \n                                videoRoomComponent\n                            \n                            \n                                wsUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                janusError\n                            \n                            \n                                publishers\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isMuted\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(janusStore: JanusStore, webrtc: WebrtcService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:176\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        janusStore\n                                                  \n                                                        \n                                                                    JanusStore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        webrtc\n                                                  \n                                                        \n                                                                        WebrtcService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        component\n                    \n                \n                \n                    \n                        Type :         VideoRoomComponent\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:128\n                            \n                        \n                \n                    \n                        Component to use for implementing the video room\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n                \n                    \n                        Type :         Devices\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:113\n                            \n                        \n                \n                    \n                        Input/output devices to use. If not provided, will use the default system devices\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        httpUrl\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:79\n                            \n                        \n                \n                    \n                        URL for the http(s) interface of the Janus server. At least one of wsUrl or httpUrl must be specified.\nExample: https://janus.conf.meetecho.com/janus\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        iceServers\n                    \n                \n                \n                    \n                        Type :         IceServer[]\n\n                    \n                \n                \n                    \n                        Default value : [{urls: 'stun:stun2.l.google.com:19302'}]\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:122\n                            \n                        \n                \n                    \n                        STUN/TURN servers to use for the connection. These are passed directly to RTCPeerConnection\nRefer to the MDN Docs for details on the format.\nThe component will use a public STUN server if nothing is specified here. However, it's highly recommended that the user\ndeploy and use their own STUN/TURN server(s) for better reliability.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isMuted\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:134\n                            \n                        \n                \n                    \n                        When set to true, the user's audio is muted.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        pin\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:85\n                            \n                        \n                \n                    \n                        PIN for joining room. Must be specified if pin_required is true for the requested roomId.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        role\n                    \n                \n                \n                    \n                        Type :         JanusRole\n\n                    \n                \n                \n                    \n                        Default value : JanusRole.publisher\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:100\n                            \n                        \n                \n                    \n                        Role for the user in the videoroom.\nUsers can either be publishers or subscribers. Publishers will publish their video and audio to the room.\nSubscribers will see/hear all publishers, but won't broadcast anything.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        roomId\n                    \n                \n                \n                    \n                        Type :     string | number\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:63\n                            \n                        \n                \n                    \n                        Required Janus room id. Can be either a string or a number. This must match server configuration.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        userId\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:107\n                            \n                        \n                \n                    \n                        Numeric or string Id of publisher. Type must match server configuration. If not provided,\njanus server will automatically assign an ID to the user.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        userName\n                    \n                \n                \n                    \n                        Default value : 'janus user'\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:91\n                            \n                        \n                \n                    \n                        Display name for the user in the videoroom\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        videoRoomComponent\n                    \n                \n                \n                    \n                        Type :         VideoRoomComponent\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:148\n                            \n                        \n                \n                    \n                        Input/output devices to use. If not provided, will use the default system devices\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        wsUrl\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:71\n                            \n                        \n                \n                    \n                        URL for the websocket interface of the Janus server. At least one of wsUrl or httpUrl must be specified.\nExample: wss://janus.conf.meetecho.com/ws\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        janusError\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:154\n                            \n                        \n                \n                    \n                        Emits errors encountered. These errors are fatal.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        publishers\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:160\n                            \n                        \n                \n                    \n                        Emits list of current publishers whenever there is a change to the publisher list\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isMuted\n                    \n                \n\n\n                \n                    \n                        setisMuted(muted: boolean)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:134\n                                \n                            \n                    \n                        \n                                When set to true, the user's audio is muted.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            muted\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import * as moment from 'moment';\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core';\n\nimport { first, startWith, shareReplay, takeUntil, switchMap } from 'rxjs/operators';\nimport { Observable, Subject, combineLatest } from 'rxjs';\n\nimport {\n  Devices,\n  JanusRole,\n  PublishState,\n  Publisher,\n  RemoteFeed,\n  RemoteFeedState,\n  RoomInfo,\n  RoomInfoState,\n  IceServer,\n} from '../../models/janus.models';\n\nimport { VideoRoomComponent } from '../../models/video-room-wrapper.models';\n\nimport { JanusStore } from '../../store/janus.store';\nimport { JanusErrors, PublishOwnFeedEvent, RequestSubstreamEvent, AttachRemoteFeedEvent } from '../../models';\nimport { WebrtcService } from '../../services/janus.service';\n\n/**\n * Janus videoroom component. This is a high level component to easily embed a janus videoroom in any angular webapp.\n * There are many options that can be set through Inputs. However, you can get started with the minimal example below.\n * Refer to the {@link https://janus.conf.meetecho.com/docs/videoroom.html|Janus Videoroom Docs} for deploying your own\n * Janus media server.\n * @example\n * \n * \n *\n */\n@Component({\n  selector: 'janus-videoroom',\n  templateUrl: './janus-videoroom.component.html',\n  styleUrls: ['./janus-videoroom.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [JanusStore],\n})\nexport class JanusVideoroomComponent implements OnInit, OnDestroy, OnChanges {\n\n  /**\n   * *Required* Janus room id. Can be either a string or a number. This must match server configuration.\n   */\n  @Input()\n  roomId: string | number;\n\n  /**\n   * URL for the websocket interface of the Janus server. At least one of wsUrl or httpUrl must be specified.\n   *\n   * Example: `wss://janus.conf.meetecho.com/ws`\n   */\n  @Input()\n  wsUrl: string;\n\n  /**\n   * URL for the http(s) interface of the Janus server. At least one of wsUrl or httpUrl must be specified.\n   *\n   * Example: `https://janus.conf.meetecho.com/janus`\n   */\n  @Input()\n  httpUrl: string;\n\n  /**\n   * PIN for joining room. Must be specified if `pin_required` is true for the requested roomId.\n   */\n  @Input()\n  pin?: string;\n\n  /**\n   * Display name for the user in the videoroom\n   */\n  @Input()\n  userName = 'janus user';\n\n  /**\n   * Role for the user in the videoroom.\n   *\n   * Users can either be publishers or subscribers. Publishers will publish their video and audio to the room.\n   * Subscribers will see/hear all publishers, but won't broadcast anything.\n   */\n  @Input()\n  role: JanusRole = JanusRole.publisher;\n\n  /**\n   * Numeric or string Id of publisher. Type must match server configuration. If not provided,\n   * janus server will automatically assign an ID to the user.\n   */\n  @Input()\n  userId?: string;\n\n  /**\n   * Input/output devices to use. If not provided, will use the default system devices\n   */\n  @Input()\n  devices?: Devices;\n\n  /**\n   * STUN/TURN servers to use for the connection. These are passed directly to `RTCPeerConnection`\n   * Refer to the {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer|MDN Docs} for details on the format.\n   * The component will use a public STUN server if nothing is specified here. However, it's highly recommended that the user\n   * deploy and use their own STUN/TURN server(s) for better reliability.\n   */\n  @Input()\n  iceServers: IceServer[] = [{urls: 'stun:stun2.l.google.com:19302'}];\n\n  /**\n   * Component to use for implementing the video room\n   */\n  @Input()\n  component: VideoRoomComponent;\n\n  /**\n   * When set to true, the user's audio is muted.\n   */\n  @Input()\n  set isMuted(muted: boolean) {\n    this.muted = muted;\n    this._setMuted(muted);\n  }\n\n  /**\n   * @ignore\n   */\n  get isMuted(): boolean { return this.muted; }\n\n  /**\n   * Input/output devices to use. If not provided, will use the default system devices\n   */\n  @Input()\n  videoRoomComponent?: VideoRoomComponent;\n\n  /**\n   * Emits errors encountered. These errors are fatal.\n   */\n  @Output()\n  janusError = new EventEmitter();\n\n  /**\n   * Emits list of current publishers whenever there is a change to the publisher list\n   */\n  @Output()\n  publishers = new EventEmitter();\n\n  /** @internal */\n  roomInfo$: Observable;\n  /** @internal */\n  remoteFeeds$: Observable;\n\n  /** @internal */\n  @ViewChild('container')\n  container: ElementRef;\n\n  /** @internal */\n  showDefaultRoom = false;\n\n  private muted = false;\n  private destroy$ = new Subject();\n  private janusServerUrl: string;\n\n  constructor(\n    private readonly janusStore: JanusStore,\n    private webrtc: WebrtcService,\n  ) { }\n\n  async ngOnInit(): Promise {\n    // Initialize variables and load the room/user\n\n    this.janusServerUrl = this.wsUrl ? this.wsUrl : this.httpUrl;\n\n    this.remoteFeeds$ = this.janusStore.remoteFeeds$.pipe(shareReplay(1));\n\n    this.roomInfo$ = this.janusStore.roomInfo$.pipe(\n      shareReplay(1)\n    );\n\n    // @ts-ignore\n    if (window.Cypress) {\n      // @ts-ignore\n      window.janusStore = this.janusStore;\n    }\n\n    // This ensures that the user has already granted all permissions before we\n    // start setting up the videoroom. Otherwise there are a lot of weird race\n    // conditions to consider. I don't love this because it doesn't handle the\n    // situation where a custom videoroom doesn't require permissions for any\n    // capture devices. However, that's probably not a common use case.\n    if (!this.devices) {\n      this.devices = await this.webrtc.getDefaultDevices();\n    }\n    const stream = await this.webrtc.getUserMedia('', '');\n    this.webrtc.clearMediaStream(stream);\n    this.setupJanusRoom();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  ngOnChanges(changes): void {\n    // For some changes, we refresh the entire session from scratch\n\n    const resetKeys = [\n      'roomId',\n      'wsUrl',\n      'httpUrl',\n      'iceServers',\n      'pin',\n      'role',\n      'userName',\n      'userId',\n      'component',\n    ];\n\n    for (const key of resetKeys) {\n      if (\n        key in changes\n        && !changes[key].firstChange\n      ) {\n        this.janusServerUrl = this.wsUrl ? this.wsUrl : this.httpUrl;\n        this.janusStore.reset(this.iceServers);\n        break;\n      }\n    }\n  }\n\n  /** @internal */\n  _setMuted(muted: boolean): void {\n    this.janusStore.setMute(muted);\n  }\n\n  /** @internal */\n  emitRemoteFeeds(remoteFeeds: RemoteFeed[]): void {\n    const publishers: Publisher[] = remoteFeeds.filter((feed) => feed.state === RemoteFeedState.ready);\n    this.publishers.emit(publishers);\n  }\n\n  /** @internal */\n  setupJanusRoom(): void {\n    // Setup comms with janus server\n\n    this.janusStore.initialize(this.iceServers);\n\n    this.janusStore.state$.pipe(\n      takeUntil(this.destroy$),\n    ).subscribe(({roomInfo, remoteFeeds}) => {\n\n      const pin = this.pin ? this.pin : null;\n      const remoteFeedsArray = Object.keys(remoteFeeds).map(id => remoteFeeds[id]);\n      if (roomInfo.muted !== this.muted && roomInfo.publishState === PublishState.publishing) {\n        this._setMuted(this.muted);\n      }\n      if (roomInfo.publishState === PublishState.error) {\n        const message = JanusErrors[roomInfo.errorCode].message;\n        this.janusError.emit({code: roomInfo.errorCode, message});\n      }\n\n      this.emitRemoteFeeds(remoteFeedsArray);\n\n      switch (roomInfo.state) {\n        case RoomInfoState.initialized: {\n          this.janusStore.attachVideoRoom(this.janusServerUrl);\n          break;\n        }\n        case RoomInfoState.attached: {\n          this.janusStore.register({\n            name: this.userName,\n            userId: this.userId,\n            roomId: this.roomId,\n            pin,\n          });\n          break;\n        }\n        case RoomInfoState.attach_failed: {\n          if (this.janusServerUrl !== this.httpUrl) {\n            this.janusServerUrl = this.httpUrl;\n            setTimeout(() => {\n              this.janusStore.attachVideoRoom(this.janusServerUrl);\n            }, 100);\n          } else {\n            this.janusError.emit({code: 9999, message: 'Unable to connect to media server'});\n          }\n          break;\n        }\n      }\n    });\n  }\n\n  /** @internal */\n  onPublishOwnFeed(event: PublishOwnFeedEvent): void {\n    this.janusStore.publishOwnFeed(event);\n  }\n\n  /** @internal */\n  onRequestSubstream(event: RequestSubstreamEvent): void {\n    this.janusStore.requestSubstream(event);\n  }\n\n  /** @internal */\n  onAttachRemoteFeed(event: AttachRemoteFeedEvent): void {\n    // Attach remote feeds\n\n    const pin = this.pin ? this.pin : null;\n    const { feed, roomInfo } = event;\n    this.janusStore.attachRemoteFeed({\n      feed,\n      roomInfo,\n      pin,\n    });\n  }\n}\n\n    \n\n    \n        \n\n    \n\n    \n                \n                    ./janus-videoroom.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AudioBoxComponent', 'selector': 'janus-nvid-audio-box'},{'name': 'DefaultVideoRoomComponent', 'selector': 'janus-default-video-room'},{'name': 'DeviceSelectorComponent', 'selector': 'janus-device-selector'},{'name': 'JanusVideoroomComponent', 'selector': 'janus-videoroom'},{'name': 'SelfVideoComponent', 'selector': 'janus-self-video'},{'name': 'VideoBoxComponent', 'selector': 'janus-video-box'},{'name': 'VideoRoomWrapperComponent', 'selector': 'janus-video-room-wrapper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'JanusVideoroomComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PublishOwnFeedEvent.html":{"url":"interfaces/PublishOwnFeedEvent.html","title":"interface - PublishOwnFeedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PublishOwnFeedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/video-room-wrapper.models.ts\n        \n\n            \n                Description\n            \n            \n                Data for the publishOwnFeed event emitted by a videoroom. This event will\ntell the system to start publishing the local feed of the user. By default,\nyou can specify an audioDeviceId and videoDeviceId and the system will capture\nvideo/audio from those devices. Alternatively, if skipVideoCapture is set to\ntrue, the stream from the canvas element will be published without audio. The\nvideoroom will take full responsibility for drawing to the canvas element\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        audioDeviceId\n                                \n                                \n                                        canvasId\n                                \n                                \n                                        skipVideoCapture\n                                \n                                \n                                        videoDeviceId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audioDeviceId\n                                    \n                                \n                                \n                                    \n                                        audioDeviceId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Device ID for the microphone. ID matches what is returned by navigator.mediaDevics.enumerateDevices \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        canvasId\n                                    \n                                \n                                \n                                    \n                                        canvasId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    HTML ID of the canvas element. Must exist in all use cases, even not drawing on\nthe canvas manually. If document.getElementById([canvasId]) does not return a canvas\nelement, this will fail\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        skipVideoCapture\n                                    \n                                \n                                \n                                    \n                                        skipVideoCapture:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    If true, directs the service to not setup a video element. It will instead transmit\na video stream from the canvas element\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        videoDeviceId\n                                    \n                                \n                                \n                                    \n                                        videoDeviceId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Device ID for the camera. ID matches what is returned by navigator.mediaDevics.enumerateDevices \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { EventEmitter, } from '@angular/core';\n\nimport {\n  Devices,\n  JanusRole,\n  RemoteFeed,\n  RoomInfo,\n} from './janus.models';\n\n\n/**\n * Data for the publishOwnFeed event emitted by a videoroom. This event will\n * tell the system to start publishing the local feed of the user. By default,\n * you can specify an audioDeviceId and videoDeviceId and the system will capture\n * video/audio from those devices. Alternatively, if skipVideoCapture is set to\n * true, the stream from the canvas element will be published without audio. The\n * videoroom will take full responsibility for drawing to the canvas element\n */\nexport interface PublishOwnFeedEvent {\n\n  /** Device ID for the microphone. ID matches what is returned by `navigator.mediaDevics.enumerateDevices` */\n  audioDeviceId: string;\n\n  /** Device ID for the camera. ID matches what is returned by `navigator.mediaDevics.enumerateDevices` */\n  videoDeviceId: string;\n\n  /** HTML ID of the canvas element. Must exist in all use cases, even not drawing on\n   * the canvas manually. If document.getElementById([canvasId]) does not return a canvas\n   * element, this will fail\n   */\n  canvasId: string;\n\n  /** If true, directs the service to not setup a video element. It will instead transmit\n   * a video stream from the canvas element\n   */\n  skipVideoCapture: boolean;\n}\n\n\n/** Data for the requestSubstream event. The event is used to request different\n * substreams when the publisher is using multicast, which is the default.\n */\nexport interface RequestSubstreamEvent {\n  /** Remote feed that we're requesting a different substream for. */\n  feed: RemoteFeed;\n\n  /** The integer id of the stream to request. */\n  substreamId: number;\n}\n\n/** Data for the attachRemoteFeedEvent. The event will negotiate a connection to\n * receive the remote stream. This must be called on each remote feed the user wishes\n * to receive.\n */\nexport interface AttachRemoteFeedEvent {\n  /** Remote feed that we're requesting. The stream must be in the `RemoteFeedState.initialized` state. */\n  feed: RemoteFeed;\n\n  /** Room info object for the room the remote feed belongs to. */\n  roomInfo: RoomInfo;\n}\n\n/**\n * Interface for customer video room component\n *\n * Any provided custom video room must implement this interface. You need not use all of the\n * data if your use case doesn't require it. For example, a room might be publish only, in which\n * case the remoteFeeds can be ignored\n */\nexport interface VideoRoomComponent {\n\n  /** roomInfo object */\n  roomInfo: RoomInfo;\n\n  /** Role of the user */\n  role: JanusRole;\n\n  /** Which devices to user */\n  devices?: Devices;\n\n  /** List of available feeds */\n  remoteFeeds: RemoteFeed[];\n\n  /** Event to request a different substream */\n  requestSubstream: EventEmitter;\n\n  /** Event to publish a locally collected feed */\n  publishOwnFeed: EventEmitter;\n\n  /** Event to subscribe to another publisher's feed */\n  attachRemoteFeed: EventEmitter;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Publisher.html":{"url":"interfaces/Publisher.html","title":"interface - Publisher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Publisher\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/janus.models.ts\n        \n\n            \n                Description\n            \n            \n                Information for a publisher. Note that the volume/mute information is not\nvery practical in how it's implemented in janus currently. In order to get\nmeaningful information about talking/not talking, you'll need to know the\naverage background noise level of each publisher ahead of time. This is\nspecified at audio_level_average in the room. This isn't practical if you\ndon't know the publisher's system setup ahead of time. We set the\naudio_level_average to 127 in the backend configuration. That makes the\nstart/stop talking events good for knowing if the remote user has muted.\nYou might want to ignore this information depending on your use case.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        displayName\n                                \n                                \n                                        id\n                                \n                                \n                                        muted\n                                \n                                \n                                        volume\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Display name of the publisher \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Janus ID of the publisher \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        muted\n                                    \n                                \n                                \n                                    \n                                        muted:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Set to true iff the last volume event had the volume at 127 \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        volume\n                                    \n                                \n                                \n                                    \n                                        volume:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current volume of the publisher's audio. See notes in the interface description.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as moment from 'moment';\n\n/**\n * Device specifications\n */\nexport interface Devices {\n  /** Microphone Device ID */\n  audioDeviceId: string;\n\n  /** Camera Device ID */\n  videoDeviceId: string;\n\n  /** Speaker Device ID */\n  speakerDeviceId: string;\n}\n\n/**\n * Room state machine\n */\nexport enum RoomInfoState {\n  start = 'start',\n  initializing = 'initializing',\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  attach_failed = 'attach_failed',\n  joining = 'joining',\n\n  /** Once joined, you can start publishing */\n  joined = 'joined',\n  error = 'error',\n}\n\n/**\n * Current publish status\n */\nexport enum PublishState {\n  start = 'start',\n  ready = 'ready',\n  publishRequested = 'publish requested',\n  publishing = 'publishing',\n  error = 'error',\n}\n\n/**\n * Metadata for a room\n */\nexport interface RoomInfo {\n\n  /** State of the room */\n  state: RoomInfoState;\n\n  /** roomId */\n  id: string;\n\n  /** Description of the room */\n  description: string;\n\n  /** private_id assigned by janus */\n  privateId: number;\n\n  /** Value passed back in \"joined\" message */\n  otherRoomId: number;  // This comes back in the \"joined\" message. Not sure what to use it for\n\n  /** Set to error code if there was an error in the room */\n  errorCode: number;\n\n  /** Local publishing state */\n  publishState: PublishState;\n\n  /** @internal Internal stream id */\n  localStreamId: string;\n\n  /** True iff the audio is muted */\n  muted: boolean;\n}\n\n/**\n * Remote feed state machine\n */\nexport enum RemoteFeedState {\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  ready = 'ready',\n  error = 'error',\n}\n\n/**\n * Current state of a remote feed\n * There exists a remote feed object for each available publisher in the video\n * room. It's possible to attach to these\n */\nexport interface RemoteFeed {\n  /** Current state of the feed */\n  state: RemoteFeedState;\n\n  /** Id of the publisher */\n  id: string;\n\n  /** @internal */\n  streamId: string;\n\n  /** number of video tracks available */\n  numVideoTracks: number;\n\n  /** Substream requested */\n  requestedSubstream: number;\n\n  /** Substream currently being received */\n  currentSubstream: number;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /** @internal */\n  audio_codec: string;\n\n  /** @internal */\n  video_codec: string;\n\n  /** @internal */\n  volume: number;\n\n  /** @internal */\n  muted: boolean;\n\n  /** timestamp of most recent slowLink event on this feed */\n  slowLink: moment.Moment;\n}\n\n/**\n * Information for a publisher. Note that the volume/mute information is not\n * very practical in how it's implemented in janus currently. In order to get\n * meaningful information about talking/not talking, you'll need to know the\n * average background noise level of each publisher ahead of time. This is\n * specified at `audio_level_average` in the room. This isn't practical if you\n * don't know the publisher's system setup ahead of time. We set the\n * `audio_level_average` to 127 in the backend configuration. That makes the\n * start/stop talking events good for knowing if the remote user has muted.\n * You might want to ignore this information depending on your use case.\n */\nexport interface Publisher {\n\n  /** Janus ID of the publisher */\n  id: string;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /**\n   * Current volume of the publisher's audio. See notes in the interface description.\n   */\n  volume: number;\n\n  /** Set to true iff the last volume event had the volume at 127 */\n  muted: boolean;\n}\n\n/**\n * Possible roles for a user.\n */\nexport enum JanusRole {\n  /** A user in this role will publish their audio/video and see/hear all other publishers */\n  publisher = 'publisher',\n\n  /** A user in this role will *not* publish their audio/video. They will still see/hear all other publishers */\n  listener = 'listener',\n}\n\n/**\n * IceServer configuration. More details are in the {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer|MDN Docs}\n */\nexport interface IceServer {\n  urls: string;\n  username?: string;\n  credential?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RemoteFeed.html":{"url":"interfaces/RemoteFeed.html","title":"interface - RemoteFeed","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RemoteFeed\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/janus.models.ts\n        \n\n            \n                Description\n            \n            \n                Current state of a remote feed\nThere exists a remote feed object for each available publisher in the video\nroom. It's possible to attach to these\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        currentSubstream\n                                \n                                \n                                        displayName\n                                \n                                \n                                        id\n                                \n                                \n                                        numVideoTracks\n                                \n                                \n                                        requestedSubstream\n                                \n                                \n                                        slowLink\n                                \n                                \n                                        state\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        currentSubstream\n                                    \n                                \n                                \n                                    \n                                        currentSubstream:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Substream currently being received \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Display name of the publisher \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Id of the publisher \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        numVideoTracks\n                                    \n                                \n                                \n                                    \n                                        numVideoTracks:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    number of video tracks available \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requestedSubstream\n                                    \n                                \n                                \n                                    \n                                        requestedSubstream:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Substream requested \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        slowLink\n                                    \n                                \n                                \n                                    \n                                        slowLink:     moment.Moment\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     moment.Moment\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    timestamp of most recent slowLink event on this feed \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                    \n                                \n                                \n                                    \n                                        state:         RemoteFeedState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RemoteFeedState\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current state of the feed \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as moment from 'moment';\n\n/**\n * Device specifications\n */\nexport interface Devices {\n  /** Microphone Device ID */\n  audioDeviceId: string;\n\n  /** Camera Device ID */\n  videoDeviceId: string;\n\n  /** Speaker Device ID */\n  speakerDeviceId: string;\n}\n\n/**\n * Room state machine\n */\nexport enum RoomInfoState {\n  start = 'start',\n  initializing = 'initializing',\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  attach_failed = 'attach_failed',\n  joining = 'joining',\n\n  /** Once joined, you can start publishing */\n  joined = 'joined',\n  error = 'error',\n}\n\n/**\n * Current publish status\n */\nexport enum PublishState {\n  start = 'start',\n  ready = 'ready',\n  publishRequested = 'publish requested',\n  publishing = 'publishing',\n  error = 'error',\n}\n\n/**\n * Metadata for a room\n */\nexport interface RoomInfo {\n\n  /** State of the room */\n  state: RoomInfoState;\n\n  /** roomId */\n  id: string;\n\n  /** Description of the room */\n  description: string;\n\n  /** private_id assigned by janus */\n  privateId: number;\n\n  /** Value passed back in \"joined\" message */\n  otherRoomId: number;  // This comes back in the \"joined\" message. Not sure what to use it for\n\n  /** Set to error code if there was an error in the room */\n  errorCode: number;\n\n  /** Local publishing state */\n  publishState: PublishState;\n\n  /** @internal Internal stream id */\n  localStreamId: string;\n\n  /** True iff the audio is muted */\n  muted: boolean;\n}\n\n/**\n * Remote feed state machine\n */\nexport enum RemoteFeedState {\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  ready = 'ready',\n  error = 'error',\n}\n\n/**\n * Current state of a remote feed\n * There exists a remote feed object for each available publisher in the video\n * room. It's possible to attach to these\n */\nexport interface RemoteFeed {\n  /** Current state of the feed */\n  state: RemoteFeedState;\n\n  /** Id of the publisher */\n  id: string;\n\n  /** @internal */\n  streamId: string;\n\n  /** number of video tracks available */\n  numVideoTracks: number;\n\n  /** Substream requested */\n  requestedSubstream: number;\n\n  /** Substream currently being received */\n  currentSubstream: number;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /** @internal */\n  audio_codec: string;\n\n  /** @internal */\n  video_codec: string;\n\n  /** @internal */\n  volume: number;\n\n  /** @internal */\n  muted: boolean;\n\n  /** timestamp of most recent slowLink event on this feed */\n  slowLink: moment.Moment;\n}\n\n/**\n * Information for a publisher. Note that the volume/mute information is not\n * very practical in how it's implemented in janus currently. In order to get\n * meaningful information about talking/not talking, you'll need to know the\n * average background noise level of each publisher ahead of time. This is\n * specified at `audio_level_average` in the room. This isn't practical if you\n * don't know the publisher's system setup ahead of time. We set the\n * `audio_level_average` to 127 in the backend configuration. That makes the\n * start/stop talking events good for knowing if the remote user has muted.\n * You might want to ignore this information depending on your use case.\n */\nexport interface Publisher {\n\n  /** Janus ID of the publisher */\n  id: string;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /**\n   * Current volume of the publisher's audio. See notes in the interface description.\n   */\n  volume: number;\n\n  /** Set to true iff the last volume event had the volume at 127 */\n  muted: boolean;\n}\n\n/**\n * Possible roles for a user.\n */\nexport enum JanusRole {\n  /** A user in this role will publish their audio/video and see/hear all other publishers */\n  publisher = 'publisher',\n\n  /** A user in this role will *not* publish their audio/video. They will still see/hear all other publishers */\n  listener = 'listener',\n}\n\n/**\n * IceServer configuration. More details are in the {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer|MDN Docs}\n */\nexport interface IceServer {\n  urls: string;\n  username?: string;\n  credential?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestSubstreamEvent.html":{"url":"interfaces/RequestSubstreamEvent.html","title":"interface - RequestSubstreamEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RequestSubstreamEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/video-room-wrapper.models.ts\n        \n\n            \n                Description\n            \n            \n                Data for the requestSubstream event. The event is used to request different\nsubstreams when the publisher is using multicast, which is the default.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        feed\n                                \n                                \n                                        substreamId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        feed\n                                    \n                                \n                                \n                                    \n                                        feed:         RemoteFeed\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RemoteFeed\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Remote feed that we're requesting a different substream for. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        substreamId\n                                    \n                                \n                                \n                                    \n                                        substreamId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The integer id of the stream to request. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { EventEmitter, } from '@angular/core';\n\nimport {\n  Devices,\n  JanusRole,\n  RemoteFeed,\n  RoomInfo,\n} from './janus.models';\n\n\n/**\n * Data for the publishOwnFeed event emitted by a videoroom. This event will\n * tell the system to start publishing the local feed of the user. By default,\n * you can specify an audioDeviceId and videoDeviceId and the system will capture\n * video/audio from those devices. Alternatively, if skipVideoCapture is set to\n * true, the stream from the canvas element will be published without audio. The\n * videoroom will take full responsibility for drawing to the canvas element\n */\nexport interface PublishOwnFeedEvent {\n\n  /** Device ID for the microphone. ID matches what is returned by `navigator.mediaDevics.enumerateDevices` */\n  audioDeviceId: string;\n\n  /** Device ID for the camera. ID matches what is returned by `navigator.mediaDevics.enumerateDevices` */\n  videoDeviceId: string;\n\n  /** HTML ID of the canvas element. Must exist in all use cases, even not drawing on\n   * the canvas manually. If document.getElementById([canvasId]) does not return a canvas\n   * element, this will fail\n   */\n  canvasId: string;\n\n  /** If true, directs the service to not setup a video element. It will instead transmit\n   * a video stream from the canvas element\n   */\n  skipVideoCapture: boolean;\n}\n\n\n/** Data for the requestSubstream event. The event is used to request different\n * substreams when the publisher is using multicast, which is the default.\n */\nexport interface RequestSubstreamEvent {\n  /** Remote feed that we're requesting a different substream for. */\n  feed: RemoteFeed;\n\n  /** The integer id of the stream to request. */\n  substreamId: number;\n}\n\n/** Data for the attachRemoteFeedEvent. The event will negotiate a connection to\n * receive the remote stream. This must be called on each remote feed the user wishes\n * to receive.\n */\nexport interface AttachRemoteFeedEvent {\n  /** Remote feed that we're requesting. The stream must be in the `RemoteFeedState.initialized` state. */\n  feed: RemoteFeed;\n\n  /** Room info object for the room the remote feed belongs to. */\n  roomInfo: RoomInfo;\n}\n\n/**\n * Interface for customer video room component\n *\n * Any provided custom video room must implement this interface. You need not use all of the\n * data if your use case doesn't require it. For example, a room might be publish only, in which\n * case the remoteFeeds can be ignored\n */\nexport interface VideoRoomComponent {\n\n  /** roomInfo object */\n  roomInfo: RoomInfo;\n\n  /** Role of the user */\n  role: JanusRole;\n\n  /** Which devices to user */\n  devices?: Devices;\n\n  /** List of available feeds */\n  remoteFeeds: RemoteFeed[];\n\n  /** Event to request a different substream */\n  requestSubstream: EventEmitter;\n\n  /** Event to publish a locally collected feed */\n  publishOwnFeed: EventEmitter;\n\n  /** Event to subscribe to another publisher's feed */\n  attachRemoteFeed: EventEmitter;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RoomInfo.html":{"url":"interfaces/RoomInfo.html","title":"interface - RoomInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RoomInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/janus.models.ts\n        \n\n            \n                Description\n            \n            \n                Metadata for a room\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        description\n                                \n                                \n                                        errorCode\n                                \n                                \n                                        id\n                                \n                                \n                                        muted\n                                \n                                \n                                        otherRoomId\n                                \n                                \n                                        privateId\n                                \n                                \n                                        publishState\n                                \n                                \n                                        state\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Description of the room \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorCode\n                                    \n                                \n                                \n                                    \n                                        errorCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Set to error code if there was an error in the room \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    roomId \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        muted\n                                    \n                                \n                                \n                                    \n                                        muted:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    True iff the audio is muted \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        otherRoomId\n                                    \n                                \n                                \n                                    \n                                        otherRoomId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Value passed back in \"joined\" message \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        privateId\n                                    \n                                \n                                \n                                    \n                                        privateId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    private_id assigned by janus \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publishState\n                                    \n                                \n                                \n                                    \n                                        publishState:         PublishState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PublishState\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Local publishing state \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                    \n                                \n                                \n                                    \n                                        state:         RoomInfoState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RoomInfoState\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    State of the room \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as moment from 'moment';\n\n/**\n * Device specifications\n */\nexport interface Devices {\n  /** Microphone Device ID */\n  audioDeviceId: string;\n\n  /** Camera Device ID */\n  videoDeviceId: string;\n\n  /** Speaker Device ID */\n  speakerDeviceId: string;\n}\n\n/**\n * Room state machine\n */\nexport enum RoomInfoState {\n  start = 'start',\n  initializing = 'initializing',\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  attach_failed = 'attach_failed',\n  joining = 'joining',\n\n  /** Once joined, you can start publishing */\n  joined = 'joined',\n  error = 'error',\n}\n\n/**\n * Current publish status\n */\nexport enum PublishState {\n  start = 'start',\n  ready = 'ready',\n  publishRequested = 'publish requested',\n  publishing = 'publishing',\n  error = 'error',\n}\n\n/**\n * Metadata for a room\n */\nexport interface RoomInfo {\n\n  /** State of the room */\n  state: RoomInfoState;\n\n  /** roomId */\n  id: string;\n\n  /** Description of the room */\n  description: string;\n\n  /** private_id assigned by janus */\n  privateId: number;\n\n  /** Value passed back in \"joined\" message */\n  otherRoomId: number;  // This comes back in the \"joined\" message. Not sure what to use it for\n\n  /** Set to error code if there was an error in the room */\n  errorCode: number;\n\n  /** Local publishing state */\n  publishState: PublishState;\n\n  /** @internal Internal stream id */\n  localStreamId: string;\n\n  /** True iff the audio is muted */\n  muted: boolean;\n}\n\n/**\n * Remote feed state machine\n */\nexport enum RemoteFeedState {\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  ready = 'ready',\n  error = 'error',\n}\n\n/**\n * Current state of a remote feed\n * There exists a remote feed object for each available publisher in the video\n * room. It's possible to attach to these\n */\nexport interface RemoteFeed {\n  /** Current state of the feed */\n  state: RemoteFeedState;\n\n  /** Id of the publisher */\n  id: string;\n\n  /** @internal */\n  streamId: string;\n\n  /** number of video tracks available */\n  numVideoTracks: number;\n\n  /** Substream requested */\n  requestedSubstream: number;\n\n  /** Substream currently being received */\n  currentSubstream: number;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /** @internal */\n  audio_codec: string;\n\n  /** @internal */\n  video_codec: string;\n\n  /** @internal */\n  volume: number;\n\n  /** @internal */\n  muted: boolean;\n\n  /** timestamp of most recent slowLink event on this feed */\n  slowLink: moment.Moment;\n}\n\n/**\n * Information for a publisher. Note that the volume/mute information is not\n * very practical in how it's implemented in janus currently. In order to get\n * meaningful information about talking/not talking, you'll need to know the\n * average background noise level of each publisher ahead of time. This is\n * specified at `audio_level_average` in the room. This isn't practical if you\n * don't know the publisher's system setup ahead of time. We set the\n * `audio_level_average` to 127 in the backend configuration. That makes the\n * start/stop talking events good for knowing if the remote user has muted.\n * You might want to ignore this information depending on your use case.\n */\nexport interface Publisher {\n\n  /** Janus ID of the publisher */\n  id: string;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /**\n   * Current volume of the publisher's audio. See notes in the interface description.\n   */\n  volume: number;\n\n  /** Set to true iff the last volume event had the volume at 127 */\n  muted: boolean;\n}\n\n/**\n * Possible roles for a user.\n */\nexport enum JanusRole {\n  /** A user in this role will publish their audio/video and see/hear all other publishers */\n  publisher = 'publisher',\n\n  /** A user in this role will *not* publish their audio/video. They will still see/hear all other publishers */\n  listener = 'listener',\n}\n\n/**\n * IceServer configuration. More details are in the {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer|MDN Docs}\n */\nexport interface IceServer {\n  urls: string;\n  username?: string;\n  credential?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SelfVideoComponent.html":{"url":"components/SelfVideoComponent.html","title":"component - SelfVideoComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SelfVideoComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/components/self-video/self-video.component.ts\n\n\n    \n        Description\n    \n    \n        Component for rendering video captured from a local device. Component both renders\nthe video and emits events to publish it to the janus server\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                janus-self-video\n            \n\n            \n                styleUrls\n                ./self-video.component.scss,../../styles/video-styles.scss\n            \n\n\n\n            \n                templateUrl\n                ./self-video.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                devices\n                            \n                            \n                                roomInfo\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                publishOwnFeed\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    devices\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/lib/components/self-video/self-video.component.ts:53\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n                \n                    \n                        Type :         Devices\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/self-video/self-video.component.ts:41\n                            \n                        \n                \n                    \n                        Devices to capture \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        roomInfo\n                    \n                \n                \n                    \n                        Type :         RoomInfo\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/self-video/self-video.component.ts:37\n                            \n                        \n                \n                    \n                        roomInfo object. Component will raise a fatal error if the state\nis not RoomInfoState.joined\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        publishOwnFeed\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/self-video/self-video.component.ts:49\n                            \n                        \n                \n                    \n                        Event to publish the local stream \n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n\n\n                \n                    \n                        setdevices(devices)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/components/self-video/self-video.component.ts:42\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            devices\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output\n} from '@angular/core';\n\nimport {\n  Devices,\n  PublishOwnFeedEvent,\n  PublishState,\n  RoomInfo,\n  RoomInfoState,\n} from '../../models';\n\n/**\n * Component for rendering video captured from a local device. Component both renders\n * the video and emits events to publish it to the janus server\n */\n@Component({\n  selector: 'janus-self-video',\n  templateUrl: './self-video.component.html',\n  styleUrls: [\n    './self-video.component.scss',\n    '../../styles/video-styles.scss',\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelfVideoComponent implements OnInit, AfterViewInit {\n\n  /** roomInfo object. Component will raise a fatal error if the state\n   * is not `RoomInfoState.joined`\n   */\n  @Input() roomInfo: RoomInfo;\n\n  /** Devices to capture */\n  @Input()\n  get devices(): Devices { return this.currentDevices; }\n  set devices(devices) {\n    this.onDevicesChange(this.currentDevices, devices);\n    this.currentDevices = devices;\n  }\n\n  /** Event to publish the local stream */\n  @Output()\n  publishOwnFeed = new EventEmitter();\n\n  private currentDevices: Devices;\n  private devicesInitialized = false;\n  private afterViewInitRan = false;\n\n  constructor() { }\n\n  ngOnInit(): void { }\n\n  async ngAfterViewInit(): Promise {\n    // Attach the canvas-self element\n    this.afterViewInitRan = true;\n    if (this.roomInfo.state !== RoomInfoState.joined) {\n      throw new Error('RoomInfo.state must be \"joined\" before creating a self-video component');\n    }\n\n    const audioDeviceId = this.devices ? this.devices.audioDeviceId : null;\n    const videoDeviceId = this.devices ? this.devices.videoDeviceId : null;\n    this._publishOwnFeed(audioDeviceId, videoDeviceId);\n  }\n\n  /** @internal */\n  _publishOwnFeed(audioDeviceId: string, videoDeviceId: string): void {\n    // Separate this for testing\n    this.publishOwnFeed.emit({\n      audioDeviceId,\n      videoDeviceId,\n      canvasId: 'canvas-self',\n      skipVideoCapture: false,\n    });\n  }\n\n  /** @internal */\n  onDevicesChange(previousDevices: Devices, newDevices: Devices): void {\n    if (!newDevices) {\n      return;\n    }\n\n    /* Minor dragon:\n     * publishOwnFeed won't work unless we know the devices **and** the canvas element already exists.\n     * Therefore, the first call to publishOwnFeed comes in ngAfterViewInit. After the first publish, we\n     * can adjust the devices in onDevicesChange.\n     */\n    if (!this.afterViewInitRan) {\n      // Haven't loaded yet\n      return;\n    }\n\n    if (\n      newDevices\n      && previousDevices\n      && newDevices.videoDeviceId === previousDevices.videoDeviceId\n      && newDevices.audioDeviceId === previousDevices.audioDeviceId\n    ) {\n      // Same capture devices. nothing to do here\n      return;\n    }\n\n    // There still exists a tiny race condition here. If the user changes the deviceId between a publishOwnFeed\n    // call in ngAfterViewInit and before the publish is complete, that change won't be registered :/\n    if (this.roomInfo.publishState === PublishState.publishRequested) {\n      return;\n    }\n    this._publishOwnFeed(newDevices.audioDeviceId, newDevices.videoDeviceId);\n  }\n}\n\n    \n\n    \n        \n  \n    \n  \n\n\n    \n\n    \n                \n                    ./self-video.component.scss\n                \n                ul.filter-list {\n    padding: 0;\n    margin: 0;\n\n    li {\n        display: block;\n    }\n\n    img.active {\n        border: 1px solid white;\n    }\n\n    img:hover {\n        border: 1px solid #ccc;\n    }\n}\n\ndiv.filter-box {\n    img {\n        width: 25px;\n        height: 25px;\n        cursor: pointer;\n        border-radius: 5px;\n        padding: 3px;\n        border: 1px solid rgba(0,0,0,0);    // Prevents resizing when adding a visible border\n    }\n\n    padding: 2px !important;\n}\n\n                \n                    ../../styles/video-styles.scss\n                \n                div.video-container {\n    height: 100%;\n\n    video,canvas {\n        height: 100%;\n        width: 100%;\n        font-size: 0px;\n        display: block;\n        object-fit: fill;\n    }\n\n    canvas {\n        transform: scaleX(-1);\n    }\n    video {\n        /* border: 1px solid rgba(0,0,0,.5); */\n    }\n\n    div.interior-box {\n        height: 100%;\n        position: relative;\n        border: 1px solid rgba(0,0,0,.5);\n    }\n\n    div.self {\n        border: 1px solid #8ae010;\n    }\n\n    div.overlay {\n        position: absolute;\n        top: 1px;\n        left: 1px;\n        padding: 5px;\n        background-color: rgba(53,53,53,.7);\n\n        font-family: OpenSans;\n        font-size: 16px;\n        font-weight: 600;\n        font-stretch: normal;\n        font-style: normal;\n        line-height: normal;\n        letter-spacing: -0.24px;\n        color: #ffffff;\n    }\n}\n\ndiv.loading-blocker {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(255, 255, 255, .85);\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    p {\n        font-size: 24px;\n        color: #777;\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        '\n    var COMPONENTS = [{'name': 'AudioBoxComponent', 'selector': 'janus-nvid-audio-box'},{'name': 'DefaultVideoRoomComponent', 'selector': 'janus-default-video-room'},{'name': 'DeviceSelectorComponent', 'selector': 'janus-device-selector'},{'name': 'JanusVideoroomComponent', 'selector': 'janus-videoroom'},{'name': 'SelfVideoComponent', 'selector': 'janus-self-video'},{'name': 'VideoBoxComponent', 'selector': 'janus-video-box'},{'name': 'VideoRoomWrapperComponent', 'selector': 'janus-video-room-wrapper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SelfVideoComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/VideoBoxComponent.html":{"url":"components/VideoBoxComponent.html","title":"component - VideoBoxComponent","body":"\n                   \n\n\n\n\n\n  Components\n  VideoBoxComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/components/video-box/video-box.component.ts\n\n\n    \n        Description\n    \n    \n        Component for rendering an audio/video stream received from a remote publisher\nIn addition to rendering the video content, this will keep track of the streaming\nperformance and request higher/lower bitrate streams when simulcast is available.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnChanges\n                    OnDestroy\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                janus-video-box\n            \n\n            \n                styleUrls\n                ./video-box.component.scss,../../styles/video-styles.scss\n            \n\n\n\n            \n                templateUrl\n                ./video-box.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                videoQualityHelper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                monitorVideoQuality\n                            \n                            \n                                onDeviceChange\n                            \n                            \n                                onMaximize\n                            \n                            \n                                setupSubscriptions\n                            \n                            \n                                switchSubstream\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                devices\n                            \n                            \n                                mode\n                            \n                            \n                                remoteFeed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                maximize\n                            \n                            \n                                requestSubstream\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    devices\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(janusService: JanusService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/components/video-box/video-box.component.ts:89\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        janusService\n                                                  \n                                                        \n                                                                    JanusService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n                \n                    \n                        Type :         Devices\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-box/video-box.component.ts:54\n                            \n                        \n                \n                    \n                        Requested output device (speaker). If available, this will dynamically change the\nspeaker device. This is not available in chrome on android\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        mode\n                    \n                \n                \n                    \n                        Type :     \"speaker\" | \"grid\"\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-box/video-box.component.ts:48\n                            \n                        \n                \n                    \n                        Current mode of the videoroom \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        remoteFeed\n                    \n                \n                \n                    \n                        Type :         RemoteFeed\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-box/video-box.component.ts:45\n                            \n                        \n                \n                    \n                        RemoteFeed object \n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        maximize\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-box/video-box.component.ts:64\n                            \n                        \n                \n                    \n                        Event for switching to speaker/grid view \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        requestSubstream\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-box/video-box.component.ts:68\n                            \n                        \n                \n                    \n                        Event for switching to speaker/grid view \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            monitorVideoQuality\n                        \n                        \n                    \n                \n            \n            \n                \nmonitorVideoQuality(slowLink: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/video-box/video-box.component.ts:166\n                \n            \n\n\n            \n                \n                    Called anytime the remoteFeed changes plus on a set interval \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slowLink\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onDeviceChange\n                        \n                        \n                    \n                \n            \n            \n                \nonDeviceChange(devices: Devices)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/video-box/video-box.component.ts:211\n                \n            \n\n\n            \n                \n                    Attempts to change speaker if requested \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    devices\n                                    \n                                                Devices\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onMaximize\n                        \n                        \n                    \n                \n            \n            \n                \nonMaximize()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/video-box/video-box.component.ts:206\n                \n            \n\n\n            \n                \n                    Callback for the maximize button \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setupSubscriptions\n                        \n                        \n                    \n                \n            \n            \n                \nsetupSubscriptions()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/video-box/video-box.component.ts:133\n                \n            \n\n\n            \n                \n                    Interval for checking video quality \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            switchSubstream\n                        \n                        \n                    \n                \n            \n            \n                \nswitchSubstream(substreamId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/video-box/video-box.component.ts:197\n                \n            \n\n\n            \n                \n                    Called to request a new substream \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    substreamId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            videoQualityHelper\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     VideoQualityHelper\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/components/video-box/video-box.component.ts:80\n                            \n                        \n\n                \n                    \n                        Helper class for monitoring video quality and determining when to request a new substream \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n\n\n                \n                    \n                        setdevices(devices)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/components/video-box/video-box.component.ts:57\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            devices\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import * as moment from 'moment';\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  OnChanges,\n  Output,\n  ViewChild,\n} from '@angular/core';\n\nimport { Subject, interval, fromEvent } from 'rxjs';\nimport { first, takeUntil, debounce } from 'rxjs/operators';\n\nimport { RemoteFeed, JanusRole, Devices, RequestSubstreamEvent } from '../../models';\nimport { randomString } from '../../shared';\nimport { JanusService } from '../../services/janus.service';\n\nimport { VideoQualityHelper } from './video-quality-helper';\n\n\n/**\n * Component for rendering an audio/video stream received from a remote publisher\n *\n * In addition to rendering the video content, this will keep track of the streaming\n * performance and request higher/lower bitrate streams when simulcast is available.\n */\n@Component({\n  selector: 'janus-video-box',\n  templateUrl: './video-box.component.html',\n  styleUrls: [\n    './video-box.component.scss',\n    '../../styles/video-styles.scss',\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class VideoBoxComponent implements OnInit, OnChanges, OnDestroy, AfterViewInit {\n\n  /** RemoteFeed object */\n  @Input() remoteFeed: RemoteFeed;\n\n  /** Current mode of the videoroom */\n  @Input() mode: 'speaker' | 'grid';\n\n  /** Requested output device (speaker). If available, this will dynamically change the\n   * speaker device. This is not available in chrome on android\n   */\n  @Input()\n  get devices(): Devices {\n    return this.localDevices;\n  }\n  set devices(devices: Devices) {\n    this.localDevices = devices;\n    this.onDeviceChange(devices);\n  }\n\n  /** Event for switching to speaker/grid view */\n  @Output()\n  maximize = new EventEmitter();\n\n  /** Event for switching to speaker/grid view */\n  @Output()\n  requestSubstream = new EventEmitter();\n\n  /** @internal */\n  public videoId: string;\n\n  /** @internal */\n  public optionsOpen = false;\n\n  /** @internal */\n  public videoAvailable = false;\n\n  /** Helper class for monitoring video quality and determining when to request a new substream */\n  videoQualityHelper: VideoQualityHelper; // public for testing purposes\n\n  /** @internal */\n  private localDevices: Devices;\n\n  /** @internal */\n  private destroy$ = new Subject();\n\n  /** @internal */\n  @ViewChild('videoElement') video: ElementRef;\n\n  constructor(\n    private janusService: JanusService\n  ) {\n    this.videoQualityHelper = new VideoQualityHelper(3);\n  }\n\n  ngOnInit(): void {\n    // Set my unique id for the video\n    this.videoId = 'video-' + this.remoteFeed.id + this.mode;\n    this.setupSubscriptions();\n  }\n\n  ngAfterViewInit(): void {\n    this._attachMediaStream();\n    this.setSpeaker(this.devices);\n  }\n\n  ngOnChanges(changes): void {\n    if ('remoteFeed' in changes) {\n      // If there's a change in the remoteFeed, run the video quality monitor task\n      let slowLink = false;\n\n      if (\n        changes.remoteFeed.previousValue\n        && changes.remoteFeed.previousValue.slowLink !== changes.remoteFeed.currentValue.slowLink\n      ) {\n        slowLink = true;\n      }\n\n      this.monitorVideoQuality(slowLink);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n    if (this.video) {\n      this.video.nativeElement.pause();\n    }\n  }\n\n  /** Interval for checking video quality */\n  setupSubscriptions(): void {\n    interval(1000).pipe(\n      takeUntil(this.destroy$)\n    ).subscribe(() => {\n      this.monitorVideoQuality(false);\n    });\n  }\n\n  /** @internal */\n  _attachMediaStream(): void {\n    this.janusService.attachMediaStream(this.videoId, this.remoteFeed.streamId);\n  }\n\n  /** @internal */\n  private setSpeaker(devices: Devices): void {\n    // Given the devices, set the output sound device\n    if (\n      this.video\n      && this.video.nativeElement\n      && this.video.nativeElement.setSinkId\n      && devices\n      && devices.speakerDeviceId\n    ) {\n      this.video.nativeElement.setSinkId(devices.speakerDeviceId);\n    }\n  }\n\n  /** @internal */\n  onPlay(): void {\n    this.videoAvailable = true;\n  }\n\n  /** Called anytime the `remoteFeed` changes plus on a set interval */\n  monitorVideoQuality(slowLink: boolean): void {\n    // Periodic task to monitor the video quality and change substream if necessary\n\n    if (!this.remoteFeed) {\n      // If we don't have a remoteFeed, nothing we can do here\n      return;\n    }\n\n    if (!this.videoAvailable && this.video) {\n      // Sometimes this needs a kick start. For example, if the user takes a second to click\n      // the \"allow\" button for video/mic access, the autoplay on the video element won't\n      // actually autoplay\n      this.video.nativeElement.play();\n    }\n\n    const currentSubstream = this.remoteFeed.currentSubstream;\n    if (this.remoteFeed.numVideoTracks === 0 || slowLink) {\n      this.videoQualityHelper.streamError(currentSubstream);\n      if (currentSubstream > 0) {\n        this.switchSubstream(currentSubstream - 1);\n      }\n    } else {\n      const newSubstream = this.videoQualityHelper.ping(currentSubstream);\n      if (newSubstream > currentSubstream) {\n        this.videoQualityHelper.streamEnd(currentSubstream);\n        this.switchSubstream(newSubstream);\n      }\n    }\n  }\n\n  /** Called to request a new substream */\n  switchSubstream(substreamId: number): void {\n    // Switch the substream if we haven't already requested this substream\n    if (this.remoteFeed.requestedSubstream !== substreamId) {\n      console.log('switching substream', substreamId, this.videoId);\n      this.requestSubstream.emit({feed: this.remoteFeed, substreamId});\n    }\n  }\n\n  /** Callback for the maximize button */\n  onMaximize(): void {\n    this.maximize.emit(this.remoteFeed);\n  }\n\n  /** Attempts to change speaker if requested */\n  onDeviceChange(devices: Devices): void {\n    this.setSpeaker(devices);\n  }\n}\n\n    \n\n    \n        \n  \n    \n\n    \n      {{ remoteFeed.displayName }}\n    \n\n    \n\n      \n      \n\n      \n      \n    \n\n    \n       Loading... \n    \n  \n\n\n    \n\n    \n                \n                    ./video-box.component.scss\n                \n                div.display-name {\n    display: flex;\n    z-index: 1;\n\n    span.separator {\n        margin: 0 5px 0 10px;\n    }\n\n    i.fas {\n        font-size: 14px;\n        margin: 0 5px 0 5px;\n        cursor: pointer;\n    }\n}\n\ndiv.maximize {\n   left: auto !important;\n   right: 1px;\n   cursor: pointer;\n   z-index: 1;\n}\n\n                \n                    ../../styles/video-styles.scss\n                \n                div.video-container {\n    height: 100%;\n\n    video,canvas {\n        height: 100%;\n        width: 100%;\n        font-size: 0px;\n        display: block;\n        object-fit: fill;\n    }\n\n    canvas {\n        transform: scaleX(-1);\n    }\n    video {\n        /* border: 1px solid rgba(0,0,0,.5); */\n    }\n\n    div.interior-box {\n        height: 100%;\n        position: relative;\n        border: 1px solid rgba(0,0,0,.5);\n    }\n\n    div.self {\n        border: 1px solid #8ae010;\n    }\n\n    div.overlay {\n        position: absolute;\n        top: 1px;\n        left: 1px;\n        padding: 5px;\n        background-color: rgba(53,53,53,.7);\n\n        font-family: OpenSans;\n        font-size: 16px;\n        font-weight: 600;\n        font-stretch: normal;\n        font-style: normal;\n        line-height: normal;\n        letter-spacing: -0.24px;\n        color: #ffffff;\n    }\n}\n\ndiv.loading-blocker {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(255, 255, 255, .85);\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    p {\n        font-size: 24px;\n        color: #777;\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                {{ remoteFeed.displayName }}                                               Loading...       '\n    var COMPONENTS = [{'name': 'AudioBoxComponent', 'selector': 'janus-nvid-audio-box'},{'name': 'DefaultVideoRoomComponent', 'selector': 'janus-default-video-room'},{'name': 'DeviceSelectorComponent', 'selector': 'janus-device-selector'},{'name': 'JanusVideoroomComponent', 'selector': 'janus-videoroom'},{'name': 'SelfVideoComponent', 'selector': 'janus-self-video'},{'name': 'VideoBoxComponent', 'selector': 'janus-video-box'},{'name': 'VideoRoomWrapperComponent', 'selector': 'janus-video-room-wrapper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'VideoBoxComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VideoRoomComponent.html":{"url":"interfaces/VideoRoomComponent.html","title":"interface - VideoRoomComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  VideoRoomComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/video-room-wrapper.models.ts\n        \n\n            \n                Description\n            \n            \n                Interface for customer video room component\nAny provided custom video room must implement this interface. You need not use all of the\ndata if your use case doesn't require it. For example, a room might be publish only, in which\ncase the remoteFeeds can be ignored\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        attachRemoteFeed\n                                \n                                \n                                            Optional\n                                        devices\n                                \n                                \n                                        publishOwnFeed\n                                \n                                \n                                        remoteFeeds\n                                \n                                \n                                        requestSubstream\n                                \n                                \n                                        role\n                                \n                                \n                                        roomInfo\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        attachRemoteFeed\n                                    \n                                \n                                \n                                    \n                                        attachRemoteFeed:     EventEmitter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     EventEmitter\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Event to subscribe to another publisher's feed \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        devices\n                                    \n                                \n                                \n                                    \n                                        devices:         Devices\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Devices\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Which devices to user \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publishOwnFeed\n                                    \n                                \n                                \n                                    \n                                        publishOwnFeed:         EventEmitter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EventEmitter\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Event to publish a locally collected feed \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        remoteFeeds\n                                    \n                                \n                                \n                                    \n                                        remoteFeeds:         RemoteFeed[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RemoteFeed[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    List of available feeds \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requestSubstream\n                                    \n                                \n                                \n                                    \n                                        requestSubstream:         EventEmitter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EventEmitter\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Event to request a different substream \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                    \n                                \n                                \n                                    \n                                        role:         JanusRole\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         JanusRole\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Role of the user \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roomInfo\n                                    \n                                \n                                \n                                    \n                                        roomInfo:         RoomInfo\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RoomInfo\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    roomInfo object \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { EventEmitter, } from '@angular/core';\n\nimport {\n  Devices,\n  JanusRole,\n  RemoteFeed,\n  RoomInfo,\n} from './janus.models';\n\n\n/**\n * Data for the publishOwnFeed event emitted by a videoroom. This event will\n * tell the system to start publishing the local feed of the user. By default,\n * you can specify an audioDeviceId and videoDeviceId and the system will capture\n * video/audio from those devices. Alternatively, if skipVideoCapture is set to\n * true, the stream from the canvas element will be published without audio. The\n * videoroom will take full responsibility for drawing to the canvas element\n */\nexport interface PublishOwnFeedEvent {\n\n  /** Device ID for the microphone. ID matches what is returned by `navigator.mediaDevics.enumerateDevices` */\n  audioDeviceId: string;\n\n  /** Device ID for the camera. ID matches what is returned by `navigator.mediaDevics.enumerateDevices` */\n  videoDeviceId: string;\n\n  /** HTML ID of the canvas element. Must exist in all use cases, even not drawing on\n   * the canvas manually. If document.getElementById([canvasId]) does not return a canvas\n   * element, this will fail\n   */\n  canvasId: string;\n\n  /** If true, directs the service to not setup a video element. It will instead transmit\n   * a video stream from the canvas element\n   */\n  skipVideoCapture: boolean;\n}\n\n\n/** Data for the requestSubstream event. The event is used to request different\n * substreams when the publisher is using multicast, which is the default.\n */\nexport interface RequestSubstreamEvent {\n  /** Remote feed that we're requesting a different substream for. */\n  feed: RemoteFeed;\n\n  /** The integer id of the stream to request. */\n  substreamId: number;\n}\n\n/** Data for the attachRemoteFeedEvent. The event will negotiate a connection to\n * receive the remote stream. This must be called on each remote feed the user wishes\n * to receive.\n */\nexport interface AttachRemoteFeedEvent {\n  /** Remote feed that we're requesting. The stream must be in the `RemoteFeedState.initialized` state. */\n  feed: RemoteFeed;\n\n  /** Room info object for the room the remote feed belongs to. */\n  roomInfo: RoomInfo;\n}\n\n/**\n * Interface for customer video room component\n *\n * Any provided custom video room must implement this interface. You need not use all of the\n * data if your use case doesn't require it. For example, a room might be publish only, in which\n * case the remoteFeeds can be ignored\n */\nexport interface VideoRoomComponent {\n\n  /** roomInfo object */\n  roomInfo: RoomInfo;\n\n  /** Role of the user */\n  role: JanusRole;\n\n  /** Which devices to user */\n  devices?: Devices;\n\n  /** List of available feeds */\n  remoteFeeds: RemoteFeed[];\n\n  /** Event to request a different substream */\n  requestSubstream: EventEmitter;\n\n  /** Event to publish a locally collected feed */\n  publishOwnFeed: EventEmitter;\n\n  /** Event to subscribe to another publisher's feed */\n  attachRemoteFeed: EventEmitter;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/VideoRoomWrapperComponent.html":{"url":"components/VideoRoomWrapperComponent.html","title":"component - VideoRoomWrapperComponent","body":"\n                   \n\n\n\n\n\n  Components\n  VideoRoomWrapperComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/components/video-room-wrapper/video-room-wrapper.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                janus-video-room-wrapper\n            \n\n            \n                styleUrls\n                ./video-room-wrapper.component.css\n            \n\n\n\n            \n                templateUrl\n                ./video-room-wrapper.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                janusVideoRoomWrapper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                loadComponent\n                            \n                            \n                                syncComponentData\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                component\n                            \n                            \n                                devices\n                            \n                            \n                                remoteFeeds\n                            \n                            \n                                role\n                            \n                            \n                                roomInfo\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                attachRemoteFeed\n                            \n                            \n                                publishOwnFeed\n                            \n                            \n                                requestSubstream\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(componentFactoryResolver: ComponentFactoryResolver)\n                    \n                \n                        \n                            \n                                Defined in src/lib/components/video-room-wrapper/video-room-wrapper.component.ts:56\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        componentFactoryResolver\n                                                  \n                                                        \n                                                                        ComponentFactoryResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        component\n                    \n                \n                \n                    \n                        Type :         Type\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-room-wrapper/video-room-wrapper.component.ts:42\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n                \n                    \n                        Type :         Devices\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-room-wrapper/video-room-wrapper.component.ts:39\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        remoteFeeds\n                    \n                \n                \n                    \n                        Type :         RemoteFeed[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-room-wrapper/video-room-wrapper.component.ts:40\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        role\n                    \n                \n                \n                    \n                        Type :         JanusRole\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-room-wrapper/video-room-wrapper.component.ts:38\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        roomInfo\n                    \n                \n                \n                    \n                        Type :         RoomInfo\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-room-wrapper/video-room-wrapper.component.ts:37\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        attachRemoteFeed\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-room-wrapper/video-room-wrapper.component.ts:51\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        publishOwnFeed\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-room-wrapper/video-room-wrapper.component.ts:48\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        requestSubstream\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-room-wrapper/video-room-wrapper.component.ts:45\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadComponent\n                        \n                        \n                    \n                \n            \n            \n                \nloadComponent()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/video-room-wrapper/video-room-wrapper.component.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            syncComponentData\n                        \n                        \n                    \n                \n            \n            \n                \nsyncComponentData()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/video-room-wrapper/video-room-wrapper.component.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            janusVideoRoomWrapper\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     VideoRoomWrapperDirective\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild(VideoRoomWrapperDirective, {static: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/lib/components/video-room-wrapper/video-room-wrapper.component.ts:53\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  Type,\n  ViewChild,\n} from '@angular/core';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { DefaultVideoRoomComponent } from '../default-video-room/default-video-room.component';\nimport { PublishOwnFeedEvent, RequestSubstreamEvent, AttachRemoteFeedEvent, VideoRoomComponent } from '../../models';\nimport { VideoRoomWrapperDirective } from './video-room-wrapper.directive';\n\nimport {\n  Devices,\n  JanusRole,\n  RemoteFeed,\n  RoomInfo,\n} from '../../models/janus.models';\n\n@Component({\n  selector: 'janus-video-room-wrapper',\n  templateUrl: './video-room-wrapper.component.html',\n  styleUrls: ['./video-room-wrapper.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VideoRoomWrapperComponent implements OnInit, OnDestroy, OnChanges {\n\n  @Input() roomInfo: RoomInfo;\n  @Input() role: JanusRole;\n  @Input() devices?: Devices;\n  @Input() remoteFeeds: RemoteFeed[];\n\n  @Input() component?: Type;\n\n  @Output()\n  requestSubstream = new EventEmitter();\n\n  @Output()\n  publishOwnFeed = new EventEmitter();\n\n  @Output()\n  attachRemoteFeed = new EventEmitter();\n\n  @ViewChild(VideoRoomWrapperDirective, {static: true}) janusVideoRoomWrapper: VideoRoomWrapperDirective;\n\n  private destroy$ = new Subject();\n  private componentRef: any;\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) { }\n\n  ngOnInit(): void {\n    this.loadComponent();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  ngOnChanges(changes): void {\n    if (this.componentRef) {\n      this.syncComponentData();\n    }\n\n    if ('component' in changes && !changes.component.firstChange) {\n      this.loadComponent();\n    }\n  }\n\n  loadComponent(): void {\n    const componentClass = this.component ? this.component : DefaultVideoRoomComponent;\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentClass);\n    const viewContainerRef = this.janusVideoRoomWrapper.viewContainerRef;\n    viewContainerRef.clear();\n\n    this.componentRef = viewContainerRef.createComponent(componentFactory);\n\n    // Listen to the event and emit them here\n    this.componentRef.instance.publishOwnFeed.pipe(\n      takeUntil(this.destroy$),\n    ).subscribe((payload: PublishOwnFeedEvent) => {\n      this.publishOwnFeed.emit(payload);\n    });\n\n    this.componentRef.instance.requestSubstream.pipe(\n      takeUntil(this.destroy$),\n    ).subscribe((payload: RequestSubstreamEvent) => {\n      this.requestSubstream.emit(payload);\n    });\n\n    this.componentRef.instance.attachRemoteFeed.pipe(\n      takeUntil(this.destroy$),\n    ).subscribe((payload: AttachRemoteFeedEvent) => {\n      this.attachRemoteFeed.emit(payload);\n    });\n\n    this.syncComponentData();\n  }\n\n  syncComponentData(): void {\n    this.componentRef.instance.roomInfo = this.roomInfo;\n    this.componentRef.instance.role = this.role;\n    this.componentRef.instance.devices = this.devices;\n    this.componentRef.instance.remoteFeeds = this.remoteFeeds;\n  }\n}\n\n    \n\n    \n        \n\n    \n\n    \n                \n                    ./video-room-wrapper.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AudioBoxComponent', 'selector': 'janus-nvid-audio-box'},{'name': 'DefaultVideoRoomComponent', 'selector': 'janus-default-video-room'},{'name': 'DeviceSelectorComponent', 'selector': 'janus-device-selector'},{'name': 'JanusVideoroomComponent', 'selector': 'janus-videoroom'},{'name': 'SelfVideoComponent', 'selector': 'janus-self-video'},{'name': 'VideoBoxComponent', 'selector': 'janus-video-box'},{'name': 'VideoRoomWrapperComponent', 'selector': 'janus-video-room-wrapper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'VideoRoomWrapperComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WebrtcService.html":{"url":"injectables/WebrtcService.html","title":"injectable - WebrtcService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  WebrtcService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/services/janus.service.ts\n        \n\n            \n                Description\n            \n            \n                Various helper functions for querying devices\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearMediaStream\n                            \n                            \n                                    Async\n                                getDefaultDevices\n                            \n                            \n                                getUserMedia\n                            \n                            \n                                isSupportedDevice\n                            \n                            \n                                listDevices\n                            \n                            \n                                supportsSpeakerSelection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/lib/services/janus.service.ts:20\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearMediaStream\n                        \n                        \n                    \n                \n            \n            \n                \nclearMediaStream(stream: MediaStream)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/services/janus.service.ts:83\n                \n            \n\n\n            \n                \n                    Clear all resources for a previously created media stream\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stream\n                                    \n                                            MediaStream\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getDefaultDevices\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDefaultDevices()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/services/janus.service.ts:49\n                \n            \n\n\n            \n                \n                    Returns the device IDs for the default audio, video, and speaker device\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUserMedia\n                        \n                        \n                    \n                \n            \n            \n                \ngetUserMedia(audioDeviceId: string | null, videoDeviceId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/services/janus.service.ts:31\n                \n            \n\n\n            \n                \n                    Wrapper around getUserMedia that allows the user to specify the audio and video device ids\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    audioDeviceId\n                                    \n                                            string | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Device ID of the desired audio device. If null, audio will not be included\n\n                                    \n                                \n                                \n                                    videoDeviceId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Device ID of the desired video device.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isSupportedDevice\n                        \n                        \n                    \n                \n            \n            \n                \nisSupportedDevice()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/services/janus.service.ts:76\n                \n            \n\n\n            \n                \n                    Determines if the current device is supported. Currently, iPhone 6 and older are not supported.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            listDevices\n                        \n                        \n                    \n                \n            \n            \n                \nlistDevices()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/services/janus.service.ts:42\n                \n            \n\n\n            \n                \n                    Wrapper around navigator.mediaDevices.enumerateDevices\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            supportsSpeakerSelection\n                        \n                        \n                    \n                \n            \n            \n                \nsupportsSpeakerSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/services/janus.service.ts:66\n                \n            \n\n\n            \n                \n                    Determines if the current platform supports setting the speaker. Some devices, e.g., most android\nphones, do not allow the dynamic setting of the speaker from within the browser. For those devices,\nit's necessary to change the output device outside of the browser.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nimport { Observable, of, interval } from 'rxjs';\nimport { tap, takeWhile } from 'rxjs/operators';\n\nimport Janus from '../3rdparty/janus.es';\n\nimport * as fromModels from '../models/janus-server.models';\nimport { RemoteFeed, RoomInfo, IceServer } from '../models/janus.models';\n\n\nimport { randomString } from '../shared';\n\n/**\n * Various helper functions for querying devices\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebrtcService {\n  // Wrappers around some common webrtc functions\n\n  constructor() { }\n\n  /**\n   * Wrapper around getUserMedia that allows the user to specify the audio and video device ids\n   *\n   * @param audioDeviceId Device ID of the desired audio device. If null, audio will not be included\n   * @param videoDeviceId Device ID of the desired video device.\n   */\n  getUserMedia(audioDeviceId: string | null, videoDeviceId: string): Promise {\n    const constraints = {\n      audio: audioDeviceId !== null ? {deviceId: audioDeviceId} : false,\n      video: {deviceId: videoDeviceId, width: 1920, height: 1080},\n    };\n    return navigator.mediaDevices.getUserMedia(constraints);\n  }\n\n  /**\n   * Wrapper around `navigator.mediaDevices.enumerateDevices`\n   */\n  listDevices(): Promise {\n    return navigator.mediaDevices.enumerateDevices();\n  }\n\n  /**\n   * Returns the device IDs for the default audio, video, and speaker device\n   */\n  async getDefaultDevices(): Promise {\n    const devices = await this.listDevices();\n    const audioDevices = devices.filter((device) => device.kind === 'audioinput');\n    const videoDevices = devices.filter((device) => device.kind === 'videoinput');\n    const speakerDevices = devices.filter((device) => device.kind === 'audiooutput');\n    const audioDeviceId = audioDevices.length = 13;\n  }\n}\n\n/** @internal */\n@Injectable({\n  providedIn: 'root'\n})\nexport class JanusService {\n  private streams = {};\n  private initialized = false;\n  private janus: any;\n  private server: string;\n  private opaqueId: string = randomString(16);\n  public handle;   // Handle to the videoroom plugin\n  private remoteHandles: { [id: number]: any } = {};   // Handles to remote streams\n\n  private videoElement: any;\n  private localStream: any;\n  private publishWebrtcState = false;\n\n  private drawLoopActive: boolean;\n  private iceServers: {urls: string}[];\n\n  constructor(\n    private webrtcService: WebrtcService,\n  ) {}\n\n  init(iceServers: IceServer[]): Observable {\n    // Initialize Janus\n    this.iceServers = iceServers;\n\n    if (this.initialized) {\n      console.log('Warning: called janus init twice');\n      return of(true);\n    }\n\n    return new Observable(\n      subscriber => {\n        Janus.init({\n          debug: 'none',\n          callback(): void {\n            // Make sure the browser supports WebRTC\n            if (!Janus.isWebrtcSupported()) {\n              subscriber.error('WebRTC is not supported');\n            }\n            subscriber.next();\n            subscriber.complete();\n          }\n        });\n      }\n    );\n  }\n\n  destroy(): void {\n    const leave = { request: 'leave' };\n\n    if (this.handle) {\n      this.handle.send({message: leave});\n    }\n    this.cleanupLocalStream();\n    this.janus.destroy({unload: true});\n\n    // Clean up all variables used\n    this.janus = null;\n    this.handle = null;\n    this.streams = {};\n    this.initialized = false;\n    this.janus = null;\n    this.server = null;\n    this.handle = null;\n    this.remoteHandles = {};\n    this.videoElement = null;\n    this.localStream = null;\n    this.publishWebrtcState = false;\n    this.drawLoopActive = null;\n    this.iceServers = [];\n  }\n\n  cleanupLocalStream(): void {\n    if (this.videoElement) {\n      this.videoElement.remove();\n    }\n    if (this.localStream) {\n      this.webrtcService.clearMediaStream(this.localStream);\n    }\n    this.drawLoopActive = false;\n  }\n\n  _get_random_string(): string {\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n  }\n\n  _attachVideoRoomHelper(subscriber): void {\n    const instance = this;\n    this.janus.attach({\n      plugin: 'janus.plugin.videoroom',\n      opaqueId: this.opaqueId,\n      success(pluginHandle): void {\n        instance.handle = pluginHandle;\n        subscriber.next({\n          message: fromModels.ATTACH_SUCCESS\n        });\n      },\n      error(error): void {\n        subscriber.error(error);\n      },\n      consentDialog(on): void {\n        subscriber.next({\n          message: fromModels.CONSENT_DIALOG,\n          payload: {on},\n        });\n      },\n      mediaState(medium, on): void {\n        subscriber.next({\n          message: fromModels.MEDIA_STATE,\n          payload: {medium, on},\n        });\n      },\n      webrtcState(on): void {\n        instance.publishWebrtcState = on;\n        subscriber.next({\n          message: fromModels.WEBRTC_STATE,\n          payload: {on},\n        });\n      },\n      iceState(arg1, arg2): void {\n        // console.log('ICE STATE', arg1, arg2);\n      },\n      slowLink(msg): void {\n      },\n      onmessage(msg, jsep): void {\n        subscriber.next({\n          message: fromModels.ON_MESSAGE,\n          payload: {msg, jsep},\n        });\n        if (!!jsep) {\n          instance.handleRemoteJsep(jsep);\n        }\n      },\n      onlocalstream(stream): void {\n        const streamId = instance._get_random_string();\n        instance.streams[streamId] = stream;\n        subscriber.next({\n          message: fromModels.ON_LOCAL_STREAM,\n          payload: {stream_id: streamId},\n        });\n      },\n      onremotestream(stream): void {\n        // Don't expect this to ever happen\n        subscriber.next({\n          message: fromModels.ON_REMOTE_STREAM,\n          payload: {stream},\n        });\n      },\n      oncleanup(): void {\n        subscriber.next({\n          message: fromModels.ON_CLEANUP,\n        });\n      }\n    });\n  }\n\n  attachVideoRoom(url): Observable {\n    // Create session\n    const instance = this;\n    return new Observable(\n      subscriber => {\n        instance.janus = new Janus({\n          server: url,\n          iceServers: this.iceServers,\n          success: () => {\n            instance._attachVideoRoomHelper(subscriber);\n          },\n          error(error): void {\n            subscriber.error(error);\n          },\n          destroyed(): void {\n            // window.location.reload();\n          }\n        });\n      }\n    );\n  }\n\n  register(name: string, userId: string, roomId: string | number, pin: string): void {\n    const register = {\n      request: 'join',\n      room: roomId,\n      ptype: 'publisher',\n      display: name,\n      id: userId,\n      pin,\n    };\n    this.handle.send({message: register});\n  }\n\n  handleRemoteJsep(jsep): void {\n    this.handle.handleRemoteJsep({jsep});\n  }\n\n  answerRemoteFeedJsep(jsep, feed: RemoteFeed, room: RoomInfo): void {\n    // Handle a jsep message for a remote feed\n\n    const handle = this.remoteHandles[feed.id];\n    handle.createAnswer({\n      jsep,\n      trickle: true,\n      media: { audioSend: false, videoSend: false },  // We want recvonly audio/video\n      success(jsepBody): void {\n        const body = { request: 'start', room: room.id };\n        handle.send({message: body, jsep: jsepBody});\n      },\n      error(error): void {\n        console.log('ERROR in JSEP RESPONSE', error);\n      }\n    });\n  }\n\n  draw(canvasContext, videoElement): void {\n    canvasContext.drawImage(videoElement, 0, 0);\n    const centerX = canvasContext.canvas.width / 2;\n    const centerY = canvasContext.canvas.height / 2;\n    const videoWidth = videoElement.videoWidth;\n    const videoHeight = videoElement.videoHeight;\n\n    canvasContext.fillStyle = '#000';\n    canvasContext.fillRect(0, 0, canvasContext.canvas.width, canvasContext.canvas.height);\n\n    canvasContext.save();\n    canvasContext.translate(centerX, centerY);\n    canvasContext.drawImage(\n      videoElement,\n      -videoWidth / 2,\n      -videoHeight / 2,\n      videoWidth,\n      videoHeight,\n    );\n    canvasContext.restore();\n  }\n\n  startDrawingLoop(canvasElement, videoElement, frameRate: number): void {\n    // Drawing loop using AudioContext oscillator. requestAnimationFrame doesn't fire\n    // on background tabs, so this is a hack to make this work when the user switches tabs\n\n    const instance = this;\n    instance.drawLoopActive = true;\n    const canvasContext = canvasElement.getContext('2d');\n\n    const stepMilliSeconds = 1000 / frameRate;\n\n    function step(): void {\n      if (instance.drawLoopActive) {\n        instance.draw(canvasContext, videoElement);\n        setTimeout(step, stepMilliSeconds);\n        // requestAnimationFrame(step);\n      }\n    }\n    step();\n  }\n\n  _muteVideo(videoElement): void {\n    // Mute a given video element\n\n    const instance = this;\n    function mute(event): void {\n      videoElement.muted = 'muted';\n      videoElement.removeEventListener('playing', mute);\n    }\n\n    videoElement.addEventListener('playing', mute);\n  }\n\n  _sizeCanvasElement(videoWidth: number, videoHeight: number): {canvasWidth: number, canvasHeight: number} {\n    // We're keeping the height the same. Goal is to add black bars to the sides\n    // if we're in portrait mode and crop to the center if we're in landscape.\n    return {\n      canvasWidth: videoHeight * 4 / 3,\n      canvasHeight: videoHeight,\n    };\n  }\n\n  _videoElementSafariHacks(videoElement): void {\n    // safari requires that the video element be in the body\n    const body = document.getElementsByTagName('body')[0];\n    body.appendChild(videoElement);\n    videoElement.setAttribute('style', 'width: 0; height: 0;');\n\n    // safari doesn't always auto-play the way you'd like it to\n    videoElement.addEventListener('canplay', () => videoElement.play());\n  }\n\n  _createVideoElement(canvasId: string, videoStream: any): any {\n    // Create the video element and attach it to the canvas\n\n    const videoElement = document.createElement('video');\n    const canvasElement: any = document.getElementById(canvasId);\n\n    // Firefox has a bug where calling captureStream before calling getContext results in an error.\n    canvasElement.getContext('2d');\n\n    const canvasStream = canvasElement.captureStream();\n    const videoSettings = videoStream.getVideoTracks()[0].getSettings();\n\n    this._videoElementSafariHacks(videoElement);\n\n    Janus.attachMediaStream(videoElement, videoStream);\n    videoElement.autoplay = true;\n    videoElement.setAttribute('playsinline', 'true');\n    videoElement.setAttribute('id', 'self-video');\n\n    // Some browsers don't like it if we set the muted attribute before the video is playing\n    this._muteVideo(videoElement);\n\n    const { canvasWidth, canvasHeight } = this._sizeCanvasElement(videoSettings.width, videoSettings.height);\n    canvasElement.width = canvasWidth;\n    canvasElement.height = canvasHeight;\n\n    const audioTrack = videoStream.getAudioTracks().find((item) => item);\n    if (!!audioTrack) {\n        canvasStream.addTrack(videoStream.getAudioTracks()[0]);\n    }\n\n    this.startDrawingLoop(canvasElement, videoElement, videoSettings.frameRate);\n\n    return {\n      videoElement,\n      canvasStream,\n    };\n  }\n\n  unPublishOwnFeed(): void {\n    // Unpublish your own feed\n    const unpublish = { request: 'unpublish' };\n    this.handle.send({ message: unpublish });\n    this.cleanupLocalStream();\n  }\n\n  publishOwnFeed(\n    audioDeviceId: string | null,\n    videoDeviceId: string,\n    canvasId: string = 'canvas-self',\n    skipVideoCapture: boolean = false,\n  ): Observable {\n    // Publish our own feed\n\n    return new Observable(\n      subscriber => {\n        if (this.publishWebrtcState) {\n          // Already publishing. Need to unpublish, wait until we're done unpublishing, and then republish\n          this.unPublishOwnFeed();\n          interval(100).pipe(\n            takeWhile(() => this.publishWebrtcState)\n          ).subscribe({\n            complete: () => {\n              this.createStreamAndOffer(subscriber, audioDeviceId, videoDeviceId, canvasId, skipVideoCapture);\n            }\n          });\n        } else {\n          // Simple case. Not publishing yet\n          this.createStreamAndOffer(subscriber, audioDeviceId, videoDeviceId, canvasId, skipVideoCapture);\n        }\n      }\n    );\n  }\n\n  createStreamAndOffer(\n    subscriber,\n    audioDeviceId: string | null,\n    videoDeviceId: string,\n    canvasId: string,\n    skipVideoCapture: boolean,\n    retryCount = 0,\n  ): void {\n    const instance = this;\n    if (skipVideoCapture) {\n      // We don't create any video element, etc.\n      const canvasElement: any = document.getElementById(canvasId);\n      const canvasStream = canvasElement.captureStream();\n      return this.createOffer(subscriber, canvasStream);\n    } else {\n      // Common case. We need to create a video element\n      instance.webrtcService.getUserMedia(audioDeviceId, videoDeviceId)\n        .then((videoStream) => {\n          instance.localStream = videoStream;\n          const {videoElement, canvasStream} = instance._createVideoElement(canvasId, videoStream);\n          instance.videoElement = videoElement;\n          this.createOffer(subscriber, canvasStream);\n        }\n      ).catch((error) => {\n        // Some devices get intermittent errors. I'm doing a retry here. Not a warm-fuzzy solution. Future work might\n        // find a race condition where we need to wait for an event before calling getUserMedia\n        if (retryCount  {\n            instance.createStreamAndOffer(\n              subscriber,\n              audioDeviceId,\n              videoDeviceId,\n              canvasId,\n              skipVideoCapture,\n              retryCount + 1,\n            );\n          }, 1000);\n        }\n      });\n    }\n  }\n\n  createOffer(\n    subscriber,\n    stream,\n  ): void {\n    const instance = this;\n    this.handle.createOffer({\n      media: { audioRecv: false, videoRecv: false, audioSend: true, videoSend: true },\n      success(jsep): void {\n        const publish = { request: 'configure', audio: true, video: true };\n        instance.handle.send({message: publish, jsep});\n        subscriber.next(true);\n        subscriber.complete();\n      },\n      error(error): void {\n        subscriber.error(error);\n      },\n      simulcast: true,\n      simulcastMaxBitrates: {\n        high: 256000,\n        medium: 128000,\n        low: 64000,\n      },\n      trickle: true,\n      stream,\n    });\n  }\n\n  attachMediaStream(elemId: string, streamId: string): void {\n    const element: any = document.getElementById(elemId);\n    Janus.attachMediaStream(element, this.streams[streamId]);\n  }\n\n  attachRemoteFeed(\n    feed: RemoteFeed,\n    room: RoomInfo,\n    pin: string,\n  ): Observable {\n    // A new feed has been published, create a new plugin handle and attach to it as a subscriber\n\n    const instance = this;\n\n    return new Observable(\n      subscriber => {\n        instance.janus.attach({\n          plugin: 'janus.plugin.videoroom',\n          opaqueId: instance.opaqueId,\n          success(pluginHandle): void {\n            instance.remoteHandles[feed.id] = pluginHandle;\n            instance.remoteHandles[feed.id].videoCodec = feed.video_codec;\n\n            const subscribe = {\n              request: 'join',\n              room: room.id,\n              ptype: 'subscriber',\n              feed: feed.id,\n              private_id: room.privateId,\n              substream: 0,\n              pin,\n            };\n            instance.remoteHandles[feed.id].send({message: subscribe});\n          },\n\n          error(error): void {\n            subscriber.error(error);\n          },\n\n          onmessage(msg, jsep): void {\n            subscriber.next({\n              message: fromModels.ON_REMOTE_FEED_MESSAGE,\n              payload: {\n                msg,\n                jsep,\n                feed,\n                room,\n              },\n            });\n            if (!!jsep) {\n              instance.answerRemoteFeedJsep(jsep, feed, room);\n            }\n          },\n\n          webrtcState(on): void {\n            subscriber.next({\n              message: fromModels.REMOTE_FEED_WEBRTC_STATE,\n              payload: {\n                on,\n                feed,\n                room,\n              },\n            });\n          },\n\n          onlocalstream(stream): void {\n            console.log('Would never expect to get here');\n          },\n\n          slowLink(msg): void {\n            subscriber.next({\n              message: fromModels.REMOTE_FEED_SLOW_LINK,\n              payload: {\n                feedId: feed.id,\n              },\n            });\n          },\n\n          onremotestream(stream): void {\n            // Save off remote stream\n\n            const streamId = instance._get_random_string();\n            instance.streams[streamId] = stream;\n\n            const numVideoTracks = stream.getVideoTracks() ? stream.getVideoTracks().length : 0;\n            subscriber.next({\n              message: fromModels.ON_REMOTE_REMOTE_STREAM,\n              payload: {\n                streamId,\n                numVideoTracks,\n                feed,\n                room,\n              },\n            });\n          },\n          oncleanup(): void {\n            subscriber.next({\n              message: fromModels.ON_REMOTE_CLEANUP,\n              payload: {\n                feed,\n                room,\n              },\n            });\n          }\n        });\n      }\n    );\n  }\n\n  toggleMute(): boolean {\n    const muted = this.handle.isAudioMuted();\n    if (muted) {\n        this.handle.unmuteAudio();\n    } else {\n        this.handle.muteAudio();\n    }\n    return this.handle.isAudioMuted();\n  }\n\n  setMute(mute: boolean): boolean {\n    const muted = this.handle.isAudioMuted();\n    if (muted === mute) {\n      return this.handle.isAudioMuted();\n    }\n\n    if (mute) {\n        this.handle.muteAudio();\n    } else {\n        this.handle.unmuteAudio();\n    }\n    return this.handle.isAudioMuted();\n  }\n\n  requestSubstream(feed: RemoteFeed, substreamId: number): void {\n    this.remoteHandles[feed.id].send({message: {request: 'configure', substream: substreamId}});\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.0.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^10.1.1\n        \n            @angular/core : ^10.1.1\n        \n            @ngrx/component-store : ^10.0.1\n        \n            moment : ^2.29.1\n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            JanusRole   (src/.../janus.models.ts)\n                        \n                        \n                            PublishState   (src/.../janus.models.ts)\n                        \n                        \n                            RemoteFeedState   (src/.../janus.models.ts)\n                        \n                        \n                            RoomInfoState   (src/.../janus.models.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/models/janus.models.ts\n    \n        \n            \n                \n                    \n                        \n                        JanusRole\n                    \n                \n                    \n                        \n                            Possible roles for a user.\n\n                        \n                    \n                        \n                            \n                                 publisher\n                            \n                        \n                        \n                            \n                                Value : publisher\n                            \n                        \n                        \n                            \n                                 listener\n                            \n                        \n                        \n                            \n                                Value : listener\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PublishState\n                    \n                \n                    \n                        \n                            Current publish status\n\n                        \n                    \n                        \n                            \n                                 start\n                            \n                        \n                        \n                            \n                                Value : start\n                            \n                        \n                        \n                            \n                                 ready\n                            \n                        \n                        \n                            \n                                Value : ready\n                            \n                        \n                        \n                            \n                                 publishRequested\n                            \n                        \n                        \n                            \n                                Value : publish requested\n                            \n                        \n                        \n                            \n                                 publishing\n                            \n                        \n                        \n                            \n                                Value : publishing\n                            \n                        \n                        \n                            \n                                 error\n                            \n                        \n                        \n                            \n                                Value : error\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RemoteFeedState\n                    \n                \n                    \n                        \n                            Remote feed state machine\n\n                        \n                    \n                        \n                            \n                                 initialized\n                            \n                        \n                        \n                            \n                                Value : initialized\n                            \n                        \n                        \n                            \n                                 attaching\n                            \n                        \n                        \n                            \n                                Value : attaching\n                            \n                        \n                        \n                            \n                                 attached\n                            \n                        \n                        \n                            \n                                Value : attached\n                            \n                        \n                        \n                            \n                                 ready\n                            \n                        \n                        \n                            \n                                Value : ready\n                            \n                        \n                        \n                            \n                                 error\n                            \n                        \n                        \n                            \n                                Value : error\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RoomInfoState\n                    \n                \n                    \n                        \n                            Room state machine\n\n                        \n                    \n                        \n                            \n                                 start\n                            \n                        \n                        \n                            \n                                Value : start\n                            \n                        \n                        \n                            \n                                 initializing\n                            \n                        \n                        \n                            \n                                Value : initializing\n                            \n                        \n                        \n                            \n                                 initialized\n                            \n                        \n                        \n                            \n                                Value : initialized\n                            \n                        \n                        \n                            \n                                 attaching\n                            \n                        \n                        \n                            \n                                Value : attaching\n                            \n                        \n                        \n                            \n                                 attached\n                            \n                        \n                        \n                            \n                                Value : attached\n                            \n                        \n                        \n                            \n                                 attach_failed\n                            \n                        \n                        \n                            \n                                Value : attach_failed\n                            \n                        \n                        \n                            \n                                 joining\n                            \n                        \n                        \n                            \n                                Value : joining\n                            \n                        \n                        \n                            \n                                 joined\n                            \n                        \n                        \n                            \n                                Value : joined\n                            \n                        \n                        \n                            \n                                 error\n                            \n                        \n                        \n                            \n                                Value : error\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nJanus Videoroom Component\nThis is an angular library with features to make it easy to embed a videoroom\ninto any angular app. Once you have a properly configured, public instance of a\njanus server with the videoroom plugin enabled, this library includes a\ndirective that will connect clients in a videoroom.\nWhy build this?\nWhen building a product that incorporates a videoroom, the interesting part of\nthe product is how it helps users find, create, edit, join, and view\nvideorooms. That's what gives the product it's competitive advantage. However,\nwhen we started working on our own product, we spent the vast majority of our\nengineering time working with low level webrtc signalling. This mismatch led us\nto believe there's room for improvement in this field. Our goal is to help\nother developers spend more time on their app and less time on webrtc details.\nThe Janus documentation and demos are great for understanding how the service\nworks. However, the sample client code is not easy to adopt into your own\napplication. This makes it so that developers need to write a lot of the low\nlevel code themselves and understand many of the details of the videoroom\nplugin. While more knowledge is always better than less, we believe it's\npossible to implement a videoroom without requiring the developer to understand\nintimate details of webrtc.\nWhat does this implement?\nThe core function provided by this library is a component called JanusVideoroomComponent that implements a videoroom. The selector for the component is janus-videoroom. You can have a fully functional videoroom only specifying the URL of the janus gateway and the room ID. The videoroom supports the following features:\n\nRoom ID You can specify any roomId that is available on the janus gateway.\nhttp and websocket connections You can specify an http and/or websocket URL. The component will prefer the websocket URL and fallback to the http URL.\nPINs You can specify a PIN for any room that requires it.\nAuto Resize Videos are automatically enlarged to take up the maximum screen real estate upon changing the size or orientation of the screen.\nMultiple Aspect Ratios Different source video aspect ratios are handled smoothly.\nDisplay Names You can specify the display name for anyone joining a videoroom.\nPublishers or Read Only Users Users can be publishers, who will send a feed from their camera/microphone, or they can be read only users that don't transmit anything.\nSimulcast Supported clients will publish 3 different quality video feeds and clients will dynamically pick the appropriate stream based on current network conditions\nDevices Device IDs can be input and dynamically changed so that users can change which input or output devices to use.\nICE Servers In addition the the janus gateway, custom STUN/TURN servers can be specified.\nMute Audio Audio can be muted for publishers.\nSupported Platforms Tested and works on Chrome (Windows, macOS, and android) and Safari (macOS and iOS).\n\nWhat does this not implement?\nIn the spirit of doing one thing well, the janus-videoroom component does not\nimplement many necessary parts of an application. For example, the component\nsupports muting the feed of a publisher. However, it does not implement a mute\nbutton. The burden is put on the developer to implement the UX around how to\nmute a feed.\nThe following is a non-exhaustive list of necessary items for most webapps that\nare not implemented by JanusVideoroomComponent. These will have to be\nimplemented by the application outside of this library.\n\nJanus room configuration Create/edit/delete operations on janus rooms are not supported\nUI elements for interaction Mute, change device, etc. are supported by the component, but it does not include UI elements for these.\nUser Authentication\nBackend Storage\nJanus gateway deployment\n\nHow to use\nInstallation\nDependencies\njanus-angular has 3 peer dependencies: webrtc-adapter, @ngrx/component-store, and moment. These can be installed by yarn\nyarn add webrtc-adapter @ngrx/component-store momentInstalling janus-angular\nInstallation is available through yarn\nyarn add janus-angularIncluding the module\nThe JanusModule must be included in your imports for the module in which you wish to use the directive\nimport { JanusModule } from 'janus-angular';\n...\n@NgModule({\n  declarations: [\n    ...\n  ],\n  imports: [\n    ...\n    JanusModule,\n  ],\n})\nexport class YourAppModule { }Using the directive\nThe following minimal component will work with the demo deploy of janus.\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  styleUrls: ['./app.component.scss'],\n  template: `\n    \n    \n  `\n})\nexport class AppComponent {\n  roomId = 1234;\n  wsUrl = 'wss://janus.conf.meetecho.com/ws';\n}Inputs/Outputs for the component are documented in the API docs on this site. Page for the\ncomponent docs is here\nSample Application\nWe have written a small, sample application to show how to use the library. The\nrepo lives here.\nJanus setup\nThis is a client library tightly coupled with a Janus webrtc Server with the\nvideoroom plugin.  The documentation for that can be found on that Janus\nwebsite here.\nFuture Work\nIn addition to tireless bug fixing and making sure it works on all platforms\nand networks, future work will include adding additional touchpoints in which\nsomeone can customize the videoroom. Overlays work great to give rough\nfunctionality to all supported features. However, there are often times when an\napp wants to implement buttons on a publisher video itself, or change the\nentire look and feel of the videoroom. We do this internally, and are working\nto release those touchpoints to the public package.\nDonations\nAre you happy with the product and want to support future development? We\naccept donations\nhere. Donations\nfund development of new features on the library.\nSource Code\nSource code for this library lives here\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        JanusModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_JanusModule\n\n\n\ncluster_JanusModule_declarations\n\n\n\ncluster_JanusModule_exports\n\n\n\n\nAudioBoxComponent\n\nAudioBoxComponent\n\n\n\nJanusModule\n\nJanusModule\n\nJanusModule -->\n\nAudioBoxComponent->JanusModule\n\n\n\n\n\nDefaultVideoRoomComponent\n\nDefaultVideoRoomComponent\n\nJanusModule -->\n\nDefaultVideoRoomComponent->JanusModule\n\n\n\n\n\nDeviceSelectorComponent\n\nDeviceSelectorComponent\n\nJanusModule -->\n\nDeviceSelectorComponent->JanusModule\n\n\n\n\n\nJanusVideoroomComponent\n\nJanusVideoroomComponent\n\nJanusModule -->\n\nJanusVideoroomComponent->JanusModule\n\n\n\n\n\nSelfVideoComponent\n\nSelfVideoComponent\n\nJanusModule -->\n\nSelfVideoComponent->JanusModule\n\n\n\n\n\nVideoBoxComponent\n\nVideoBoxComponent\n\nJanusModule -->\n\nVideoBoxComponent->JanusModule\n\n\n\n\n\nVideoRoomWrapperComponent\n\nVideoRoomWrapperComponent\n\nJanusModule -->\n\nVideoRoomWrapperComponent->JanusModule\n\n\n\n\n\nAudioBoxComponent \n\nAudioBoxComponent \n\nAudioBoxComponent  -->\n\nJanusModule->AudioBoxComponent \n\n\n\n\n\nDefaultVideoRoomComponent \n\nDefaultVideoRoomComponent \n\nDefaultVideoRoomComponent  -->\n\nJanusModule->DefaultVideoRoomComponent \n\n\n\n\n\nDeviceSelectorComponent \n\nDeviceSelectorComponent \n\nDeviceSelectorComponent  -->\n\nJanusModule->DeviceSelectorComponent \n\n\n\n\n\nJanusVideoroomComponent \n\nJanusVideoroomComponent \n\nJanusVideoroomComponent  -->\n\nJanusModule->JanusVideoroomComponent \n\n\n\n\n\nSelfVideoComponent \n\nSelfVideoComponent \n\nSelfVideoComponent  -->\n\nJanusModule->SelfVideoComponent \n\n\n\n\n\nVideoBoxComponent \n\nVideoBoxComponent \n\nVideoBoxComponent  -->\n\nJanusModule->VideoBoxComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    9 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ATTACH_SUCCESS   (src/.../janus-server.models.ts)\n                        \n                        \n                            components   (src/.../index.ts)\n                        \n                        \n                            components   (src/.../index.ts)\n                        \n                        \n                            CONSENT_DIALOG   (src/.../janus-server.models.ts)\n                        \n                        \n                            DETACHED   (src/.../janus-server.models.ts)\n                        \n                        \n                            initialState   (src/.../janus.reducers.ts)\n                        \n                        \n                            MEDIA_STATE   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_CLEANUP   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_DATA   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_DATA_OPEN   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_LOCAL_STREAM   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_MESSAGE   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_REMOTE_CLEANUP   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_REMOTE_FEED_MESSAGE   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_REMOTE_LOCAL_STREAM   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_REMOTE_REMOTE_STREAM   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_REMOTE_STREAM   (src/.../janus-server.models.ts)\n                        \n                        \n                            randomString   (src/.../random.ts)\n                        \n                        \n                            REMOTE_FEED_SLOW_LINK   (src/.../janus-server.models.ts)\n                        \n                        \n                            REMOTE_FEED_WEBRTC_STATE   (src/.../janus-server.models.ts)\n                        \n                        \n                            RemoteFeedFactory   (src/.../janus.factories.ts)\n                        \n                        \n                            REQUEST_SUBSTREAM   (src/.../janus.actions.ts)\n                        \n                        \n                            RoomInfoFactory   (src/.../janus.factories.ts)\n                        \n                        \n                            SLOW_LINK   (src/.../janus-server.models.ts)\n                        \n                        \n                            TOGGLE_MUTE_SUCCESS   (src/.../janus.actions.ts)\n                        \n                        \n                            WEBRTC_STATE   (src/.../janus-server.models.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/models/janus-server.models.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ATTACH_SUCCESS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'attach success'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CONSENT_DIALOG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'consent dialog'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DETACHED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'detached'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MEDIA_STATE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'media state'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_CLEANUP\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'cleanup'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_DATA\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'data'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_DATA_OPEN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'data open'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_LOCAL_STREAM\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'local stream'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_MESSAGE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'message'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_REMOTE_CLEANUP\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[remote] cleanup'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_REMOTE_FEED_MESSAGE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[remote] message'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_REMOTE_LOCAL_STREAM\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[remote] local stream'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_REMOTE_REMOTE_STREAM\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[remote] remote stream'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_REMOTE_STREAM\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'remote stream'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            REMOTE_FEED_SLOW_LINK\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[remote] slow link'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            REMOTE_FEED_WEBRTC_STATE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[remote] webrtc state'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SLOW_LINK\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'slow link'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            WEBRTC_STATE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'webrtc state'\n                        \n                    \n\n\n            \n        \n\n    src/lib/containers/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            components\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  JanusVideoroomComponent,\n  DeviceSelectorComponent,\n]\n                        \n                    \n\n\n            \n        \n\n    src/lib/components/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            components\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  AudioBoxComponent,\n  VideoBoxComponent,\n  DefaultVideoRoomComponent,\n  SelfVideoComponent,\n]\n                        \n                    \n\n\n            \n        \n\n    src/lib/store/reducers/janus.reducers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            initialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     VideoroomState\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  roomInfo: {\n    state: RoomInfoState.start,\n    id: null,\n    description: null,\n    privateId: null,\n    otherRoomId: null,\n\n    errorCode: null,\n\n    publishState: PublishState.start,\n    localStreamId: null,\n    muted: false,\n  },\n  remoteFeeds: {},\n}\n                        \n                    \n\n\n            \n        \n\n    src/lib/shared/random.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            randomString\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ((bytes: number) => {\n  const array = new Uint8Array(bytes);\n  window.crypto.getRandomValues(array);\n\n  // Real pain to find a cross platform way to do this smoothly. Dropping into a for loop\n  let ret = '';\n  for (const item of array) {\n    ret += item.toString(36);\n  }\n\n  return ret;\n})\n                        \n                    \n\n\n            \n        \n\n    src/lib/factories/janus.factories.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            RemoteFeedFactory\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Factory.Sync.makeFactory({\n  state: RemoteFeedState.initialized,\n  id: Factory.each(i => i.toString()),\n  streamId: Factory.each(i => 'stream' + i.toString()),\n  numVideoTracks: 0,\n  requestedSubstream: 0,\n  currentSubstream: 0,\n  displayName: Factory.each(i => 'name' + i.toString()),\n  audio_codec: Factory.each(i => 'audio' + i.toString()),\n  video_codec: Factory.each(i => 'video' + i.toString()),\n  muted: false,\n  volume: 64,\n  slowLink: null,\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RoomInfoFactory\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Factory.Sync.makeFactory({\n  state: RoomInfoState.start,\n  id: Factory.each(i => i.toString()),\n  description: Factory.each(i => 'description' + i.toString()),\n  privateId: Factory.each(i => i),\n  otherRoomId: Factory.each(i => i),\n  errorCode: null,\n  publishState: PublishState.start,\n  localStreamId: Factory.each(i => 'stream' + i.toString()),\n  muted: false,\n})\n                        \n                    \n\n\n            \n        \n\n    src/lib/store/actions/janus.actions.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            REQUEST_SUBSTREAM\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[Janus] Request Substream'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TOGGLE_MUTE_SUCCESS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[Janus] Toggle Mute Success'\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
