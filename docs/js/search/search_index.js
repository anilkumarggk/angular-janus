var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AttachRemoteFeedEvent.html",[0,0.297,1,1.153]],["body/interfaces/AttachRemoteFeedEvent.html",[0,0.55,1,2.006,2,1.048,3,0.486,4,0.275,5,0.332,6,2.027,7,0.376,8,2.027,9,0.457,10,2.894,11,0.909,12,2.658,13,2.354,14,2.787,15,1.034,16,0.771,17,1.694,18,1.374,19,1.212,20,0.847,21,2.658,22,0.22,23,0.885,24,0.924,25,0.869,26,0.436,27,0.042,28,2.344,29,2.965,30,2.101,31,0.885,32,1.108,33,2.658,34,0.36,35,1.627,36,0.525,37,0.536,38,0.885,39,2.027,40,1.694,41,1.795,42,1.526,43,2.027,44,1.374,45,0.757,46,0.846,47,0.846,48,0.993,49,1.602,50,1.11,51,1.11,52,1.602,53,2.027,54,1.602,55,2.027,56,2.101,57,0.598,58,0.885,59,2.377,60,1.4,61,1.795,62,1.602,63,0.332,64,1.795,65,2.027,66,2.027,67,2.354,68,0.427,69,1.163,70,0.516,71,0.989,72,1.048,73,2.658,74,2.658,75,2.658,76,0.769,77,1.048,78,0.943,79,2.027,80,1.379,81,2.027,82,2.027,83,2.027,84,2.027,85,0.943,86,2.027,87,1.602,88,2.027,89,1.795,90,0.943,91,0.427,92,2.027,93,1.795,94,0.757,95,1.884,96,1.795,97,1.89,98,2.344,99,2.027,100,0.525,101,1.602,102,2.027,103,1.163,104,0.993,105,2.027,106,1.602,107,0.675,108,2.027,109,0.332,110,1.602,111,1.602,112,1.795,113,0.943,114,1.236,115,1.602,116,1.795,117,1.292,118,0.784,119,1.694,120,2.027,121,1.437,122,1.11,123,1.292,124,0.846,125,1.437,126,2.027,127,2.027,128,1.292,129,2.027,130,1.163,131,1.437,132,0.022,133,0.029,134,0.022]],["title/components/AudioBoxComponent.html",[109,0.297,135,0.841]],["body/components/AudioBoxComponent.html",[3,0.325,4,0.269,5,0.325,7,0.215,9,0.448,16,0.591,22,0.215,25,0.914,26,0.512,27,0.042,32,0.979,34,0.398,36,0.514,37,0.601,48,0.741,57,0.773,60,1.094,62,2.07,63,0.595,68,0.269,70,0.63,71,0.585,76,0.514,78,1.218,85,0.922,91,0.44,109,0.532,124,1.303,132,0.022,133,0.029,134,0.022,135,1.451,136,1.504,137,1.264,138,1.405,139,1.405,140,1.405,141,5.421,142,4.45,143,2.647,144,3.498,145,3.498,146,2.995,147,1.67,148,2.079,149,2.934,150,0.741,151,1.857,152,1.857,153,2.024,154,1.03,155,2.079,156,2.995,157,1.67,158,3.917,159,1.857,160,3.498,161,2.32,162,3.498,163,1.857,164,2.32,165,1.504,166,2.647,167,3.811,168,1.863,169,3.225,170,1.684,171,0.864,172,1.364,173,3.225,174,1.613,175,1.504,176,1.723,177,2.62,178,2.212,179,2.995,180,2.62,181,3.225,182,3.498,183,3.225,184,3.498,185,1.857,186,2.125,187,2.267,188,3.225,189,1.87,190,1.405,191,1.756,192,2.62,193,1.756,194,1.983,195,0.922,196,3.498,197,2.267,198,2.647,199,1.303,200,1.67,201,2.647,202,1.264,203,3.225,204,3.225,205,1.405,206,2.647,207,1.138,208,2.267,209,3.225,210,2.647,211,1.983,212,3.225,213,2.647,214,2.647,215,3.225,216,3.225,217,3.225,218,2.647,219,3.225,220,2.647,221,1.138,222,0.922,223,2.212,224,1.405,225,1.857,226,0.922,227,1.405,228,0.922,229,1.405,230,0.828,231,1.405,232,0.922,233,1.264,234,1.405,235,0.922,236,1.025,237,1.264,238,1.264,239,0.922,240,1.264,241,1.405]],["title/components/DefaultVideoRoomComponent.html",[109,0.297,226,0.841]],["body/components/DefaultVideoRoomComponent.html",[1,0.691,3,0.178,4,0.147,5,0.178,7,0.317,9,0.245,11,0.882,14,1.499,15,0.694,16,0.531,17,1.5,18,0.875,19,0.783,22,0.183,23,0.563,24,0.779,25,0.917,26,0.546,27,0.042,28,1.338,30,1.646,31,0.9,32,0.632,34,0.319,35,1.461,36,0.281,37,0.479,38,0.693,40,1.327,42,1.351,46,0.869,47,1.066,48,1.148,57,0.32,60,0.707,63,0.178,68,0.147,69,1.351,70,0.21,76,0.281,78,0.787,85,1.429,91,0.5,94,0.405,95,1.476,97,1.724,98,1.338,100,0.281,103,1.351,104,0.879,107,1.059,109,0.513,118,0.694,119,2.12,122,1.066,123,1.079,125,1.199,128,0.691,131,1.476,132,0.012,133,0.019,134,0.012,135,0.504,136,1.351,137,0.691,138,0.768,139,0.768,140,0.768,147,1.079,148,1.476,149,2.082,150,0.405,151,1.199,152,1.199,153,1.763,154,0.886,155,0.768,157,1.079,159,1.199,161,1.499,163,1.199,164,1.499,165,0.971,168,1.939,170,1.622,171,0.796,172,1.314,174,0.875,175,1.351,176,1.644,178,0.768,185,1.917,186,2.12,189,1.627,190,0.768,191,0.96,192,1.692,195,0.504,199,1.389,200,1.5,202,2.027,205,0.768,207,1.724,211,1.084,221,0.622,222,0.504,223,1.668,224,0.768,225,1.199,226,1.094,227,0.768,228,0.504,229,0.768,230,0.453,231,0.768,232,0.504,233,0.691,234,0.768,235,0.504,236,0.56,237,0.691,238,0.691,239,0.504,240,0.691,241,0.768,242,5.531,243,3.888,244,1.763,245,2.752,246,2.752,247,0.869,248,2.752,249,2.752,250,2.259,251,1.86,252,3.141,253,2.752,254,2.752,255,2.752,256,2.752,257,1.079,258,2.259,259,1.476,260,2.259,261,1.338,262,2.752,263,1.844,264,3.386,265,2.752,266,3.435,267,3.386,268,2.752,269,2.259,270,2.752,271,2.752,272,2.752,273,1.338,274,1.447,275,3.141,276,2.752,277,2.259,278,1.763,279,1.763,280,2.752,281,2.69,282,3.827,283,2.752,284,2.752,285,2.259,286,2.38,287,1.338,288,2.259,289,1.199,290,1.338,291,1.258,292,3.407,293,2.752,294,2.259,295,2.752,296,1.763,297,2.259,298,1.763,299,1.763,300,2.752,301,2.259,302,1.763,303,1.763,304,2.752,305,1.763,306,2.752,307,2.752,308,2.661,309,2.752,310,2.259,311,1.935,312,1.692,313,2.38,314,2.259,315,3.386,316,1.86,317,2.752,318,2.752,319,1.763,320,3.092,321,1.935,322,2.752,323,2.259,324,1.763,325,2.752,326,3.827,327,1.763,328,1.763,329,2.259,330,1.763,331,1.552,332,3.903,333,0.875,334,1.763,335,1.763,336,2.752,337,1.763,338,1.763,339,1.763,340,1.763,341,1.763,342,1.447,343,1.935,344,1.763,345,1.239,346,1.499,347,0.857,348,2.259,349,0.96,350,0.857,351,0.691,352,0.622,353,0.96,354,2.752,355,1.763,356,1.763,357,1.763,358,3.386,359,1.763,360,0.857,361,1.763,362,1.447,363,2.138,364,1.447,365,1.763,366,1.763,367,1.763,368,1.763,369,2.78,370,2.752,371,1.763,372,1.447,373,0.96,374,0.96,375,0.96,376,1.447,377,3.407,378,1.763,379,1.763,380,1.763,381,1.763,382,1.447,383,1.763,384,1.239,385,1.763,386,1.763,387,1.763,388,1.763,389,1.763,390,1.763,391,2.752,392,2.752,393,2.752,394,1.763,395,3.386,396,4.399,397,1.447,398,1.763,399,2.752,400,1.763,401,1.763,402,0.96,403,1.763,404,1.763,405,1.763,406,1.763,407,1.763,408,1.763,409,1.239,410,2.017,411,4.15,412,1.763,413,1.763,414,2.752,415,2.752,416,2.69,417,3.141,418,1.763,419,1.239,420,1.239,421,1.763,422,1.084,423,1.447,424,1.084,425,1.763,426,1.763,427,0.691,428,1.239,429,1.239,430,1.447,431,1.447,432,1.763,433,2.353,434,3.386,435,3.827,436,1.763,437,2.78,438,1.763,439,1.763,440,3.386,441,2.752,442,1.763,443,1.763,444,1.763,445,1.239,446,1.763,447,3.827,448,0.768,449,3.386,450,1.763,451,1.763,452,3.386,453,1.763,454,3.386,455,1.763,456,1.763,457,1.763,458,3.827,459,2.752,460,3.386,461,1.763,462,2.752,463,1.763,464,1.763,465,1.447,466,1.763,467,1.239,468,1.692,469,1.935,470,1.239,471,1.692,472,1.084,473,1.692,474,1.499,475,1.239,476,2.752,477,0.622,478,1.239,479,1.763,480,1.763,481,1.239,482,1.447,483,1.239,484,1.447,485,1.763,486,1.239,487,1.447]],["title/components/DeviceSelectorComponent.html",[109,0.297,228,0.841]],["body/components/DeviceSelectorComponent.html",[3,0.292,4,0.241,5,0.292,7,0.193,9,0.402,11,0.632,20,0.775,22,0.193,23,0.812,26,0.456,27,0.042,34,0.438,35,1.437,36,0.462,37,0.572,41,2.159,48,0.911,50,0.744,51,0.744,60,1.018,63,0.292,68,0.241,70,0.691,72,1.545,77,1.545,78,1.134,91,0.377,109,0.456,117,1.554,128,1.136,132,0.02,133,0.027,134,0.02,135,0.829,136,1.4,137,1.136,138,1.263,139,1.263,140,1.263,147,1.905,148,1.97,150,0.666,151,1.728,152,1.728,153,2.045,154,1.008,155,1.263,157,1.554,159,1.728,163,1.728,165,1.4,168,1.933,170,1.023,171,0.775,172,0.829,175,1.4,176,1.67,177,2.438,186,1.554,189,1.554,190,1.263,193,1.578,194,1.782,195,1.293,199,0.744,200,1.905,202,2.282,205,1.263,207,1.4,221,1.023,222,0.829,223,2.118,224,1.263,225,1.728,226,0.829,227,1.263,228,1.39,229,1.263,230,0.744,231,1.263,232,0.829,233,1.136,234,1.263,235,0.829,236,0.921,237,1.136,238,1.136,239,0.829,240,1.136,241,1.263,247,0.744,251,2.197,263,2.461,273,1.927,274,2.379,275,3.99,277,3.255,281,2.788,308,2.159,313,2.788,316,2.362,331,1.4,333,0.921,346,2.159,347,1.408,349,1.578,350,1.408,360,1.408,363,1.408,373,1.578,374,1.578,375,1.578,402,1.578,410,1.408,431,2.379,448,1.728,471,2.438,472,1.782,473,1.782,474,1.578,488,5.556,489,4.561,490,2.898,491,5.255,492,3.255,493,3.255,494,3.965,495,3.965,496,3.965,497,2.788,498,3.255,499,3.965,500,2.788,501,4.52,502,3.965,503,4.52,504,4.52,505,4.52,506,4.52,507,3.711,508,4.52,509,4.52,510,4.86,511,2.988,512,2.898,513,2.898,514,1.728,515,3.965,516,2.898,517,2.898,518,2.898,519,2.898,520,2.898,521,2.898,522,2.898,523,2.379,524,2.898,525,2.898,526,2.898,527,2.379,528,4.52,529,2.898,530,2.379,531,2.898,532,2.898,533,2.898,534,2.898,535,2.898,536,2.898,537,1.408,538,2.898,539,2.898,540,1.782,541,2.898,542,1.782,543,2.898,544,2.037,545,2.898,546,2.898,547,2.898,548,2.898,549,4.52,550,3.711,551,2.379,552,2.898,553,2.379,554,2.898,555,2.379,556,5.255,557,3.965,558,2.898,559,2.898,560,2.037,561,2.037,562,2.898,563,2.898,564,2.898,565,2.898,566,2.898,567,2.898]],["title/interfaces/Devices.html",[0,0.297,37,0.297]],["body/interfaces/Devices.html",[0,0.527,2,0.906,3,0.287,4,0.237,5,0.287,7,0.357,9,0.67,11,0.625,15,0.875,16,0.395,18,1.246,19,1.036,20,0.769,22,0.19,23,0.802,24,0.454,25,0.454,26,0.452,27,0.042,31,1.117,32,0.655,34,0.237,37,0.395,38,0.583,44,0.906,45,1.162,46,1.239,47,0.732,50,1.239,51,1.239,57,0.812,58,0.802,63,0.395,68,0.461,70,0.651,71,1.034,72,1.246,76,0.949,77,1.246,80,1.121,90,0.815,91,0.327,94,1.029,100,0.893,104,0.901,107,1.133,113,0.815,114,0.815,118,0.875,122,1.006,124,1.006,130,1.383,132,0.019,133,0.027,134,0.019,150,0.655,154,0.812,171,0.625,174,1.246,176,1.246,199,1.375,247,1.006,257,1.117,259,1.242,261,1.385,287,1.385,289,2.103,290,1.905,291,1.38,333,0.906,351,1.536,352,1.383,427,1.117,477,1.006,514,1.708,537,2.345,568,1.385,569,2.134,570,1.383,571,1.905,572,2.628,573,1.905,574,2.103,575,2.345,576,1.905,577,1.536,578,1.385,579,2.205,580,2.138,581,1.385,582,1.581,583,2.345,584,1.385,585,1.117,586,1.385,587,1.552,588,1.385,589,1.385,590,2.134,591,1.536,592,1.385,593,1.385,594,1.385,595,1.385,596,1.385,597,1.786,598,1.385,599,1.536,600,1.708,601,1.006,602,1.242,603,1.552,604,1.242,605,1.385,606,1.552,607,1.385,608,1.242,609,1.905,610,1.385,611,1.385,612,2.459,613,1.552,614,1.552,615,1.708,616,1.552,617,2.628,618,1.552,619,1.552,620,1.552,621,2.134,622,1.385,623,1.552,624,1.552,625,2.134,626,1.552,627,1.905,628,1.552,629,1.552,630,2.134,631,1.905,632,1.242,633,2.134,634,1.552,635,1.006,636,2.134,637,1.385,638,1.708,639,1.385,640,1.552,641,1.552,642,1.552,643,1.242,644,1.385,645,1.552,646,1.552,647,1.552,648,1.385,649,1.708,650,1.905,651,1.708,652,1.385,653,1.905,654,1.536,655,1.385,656,1.242,657,1.242,658,1.385,659,1.385,660,1.242,661,1.242,662,1.385,663,1.552]],["title/interfaces/IceServer.html",[0,0.297,654,1.153]],["body/interfaces/IceServer.html",[0,0.527,2,0.906,3,0.288,4,0.238,5,0.288,7,0.357,9,0.67,11,0.625,15,0.875,16,0.396,18,1.246,19,1.036,20,0.769,22,0.19,23,0.803,24,0.455,25,0.455,26,0.452,27,0.042,31,1.117,32,0.655,34,0.238,37,0.288,38,0.584,44,0.906,45,1.163,46,1.239,47,0.732,50,0.732,51,0.732,57,0.813,58,0.803,63,0.395,68,0.461,70,0.576,71,1.004,72,0.906,76,0.949,77,0.906,80,1.121,90,0.815,91,0.327,94,1.03,100,0.893,104,0.901,107,1.133,113,0.815,114,0.815,118,0.875,122,1.007,124,1.007,130,1.384,132,0.019,133,0.027,134,0.019,150,0.655,154,0.813,171,0.625,172,1.38,174,1.246,176,0.906,199,1.375,247,1.007,257,1.118,259,1.243,261,1.386,287,1.386,289,2.104,290,1.906,291,1.38,333,0.906,351,1.537,352,1.384,427,1.118,477,1.006,514,1.709,537,1.386,568,1.386,569,1.553,570,1.384,571,1.906,572,2.628,573,1.906,574,2.104,575,2.346,576,1.906,577,1.537,578,1.386,579,2.205,580,2.139,581,1.386,582,1.582,583,2.346,584,1.386,585,1.118,586,1.386,587,1.553,588,1.386,589,1.386,590,2.135,591,1.537,592,1.386,593,1.386,594,1.386,595,1.386,596,1.386,597,1.786,598,1.386,599,1.537,600,1.709,601,1.006,602,1.243,603,1.553,604,1.243,605,1.386,606,1.553,607,1.386,608,1.243,609,1.906,610,1.386,611,1.386,612,2.459,613,1.553,614,1.553,615,1.709,616,1.553,617,2.628,618,1.553,619,1.553,620,1.553,621,2.135,622,1.386,623,1.553,624,1.553,625,2.135,626,1.553,627,1.906,628,1.553,629,1.553,630,2.135,631,1.906,632,1.243,633,2.135,634,1.553,635,1.006,636,2.135,637,1.386,638,1.953,639,1.386,640,1.553,641,1.553,642,1.553,643,1.243,644,1.386,645,1.553,646,1.553,647,1.553,648,1.386,649,1.709,650,1.906,651,1.709,652,1.386,653,1.906,654,1.892,655,1.906,656,1.709,657,1.243,658,1.386,659,1.386,660,1.709,661,2.104,662,2.346,663,2.628,664,2.341]],["title/modules/JanusModule.html",[665,1.809,666,1.602]],["body/modules/JanusModule.html",[3,0.372,4,0.308,5,0.372,7,0.356,27,0.042,34,0.492,36,0.589,68,0.308,91,0.387,132,0.025,133,0.032,134,0.025,135,1.696,142,3.031,195,1.056,221,1.303,226,1.696,228,1.696,230,1.522,232,1.696,235,1.696,236,1.786,239,1.607,243,2.595,489,3.031,523,3.031,665,2.27,666,3.328,667,2.595,668,2.01,669,3.577,670,3.031,671,2.595,672,4.178,673,3.031,674,3.031,675,3.031,676,3.817,677,3.031,678,3.031,679,3.692,680,3.817,681,4.649,682,3.031,683,4.649,684,3.692,685,3.031,686,3.692,687,3.692,688,3.692,689,3.692,690,4.649,691,3.692,692,3.031,693,3.692,694,3.031,695,3.692,696,5.089,697,3.031,698,3.268,699,3.692,700,3.031,701,3.031]],["title/components/JanusVideoroomComponent.html",[109,0.297,230,0.755]],["body/components/JanusVideoroomComponent.html",[0,0.396,1,1.118,3,0.186,4,0.154,5,0.186,7,0.337,9,0.256,11,0.294,13,1.553,15,0.335,16,0.256,19,0.584,20,0.821,22,0.123,24,0.625,25,0.455,26,0.555,27,0.042,34,0.413,35,1.348,36,0.294,37,0.546,38,0.714,42,1.891,44,1.247,45,0.424,48,1.109,52,0.897,57,0.813,58,0.868,60,0.732,63,0.452,68,0.154,69,1.007,70,0.22,71,0.813,76,0.862,78,0.816,80,1.573,85,0.528,90,0.528,91,0.389,94,1.03,100,0.715,103,1.007,107,0.803,109,0.546,110,2.178,111,0.897,114,1.122,115,1.386,116,1.005,117,1.892,118,0.517,119,1.118,121,2.104,122,1.151,123,1.537,125,0.804,132,0.013,133,0.019,134,0.013,135,0.528,136,1.007,137,0.723,138,0.804,139,0.804,140,0.804,147,1.118,148,1.519,150,0.424,151,1.243,152,1.243,153,1.786,154,1.059,155,0.804,157,1.118,159,1.243,163,1.709,164,1.553,165,1.007,168,1.926,170,1.007,171,0.77,172,0.816,174,0.907,175,1.231,178,1.243,185,0.804,186,1.942,189,2.076,190,0.804,191,1.005,192,1.754,193,1.005,194,1.135,195,0.528,199,1.299,200,1.662,202,1.118,205,0.804,207,1.749,221,0.651,222,0.528,223,1.709,224,0.804,225,1.243,226,0.528,227,0.804,228,0.528,229,0.804,230,1.007,231,0.804,232,0.528,233,0.723,234,0.804,235,0.528,236,0.587,237,0.723,238,0.723,239,0.528,240,0.723,241,0.804,247,0.732,251,1.694,257,1.118,263,1.899,273,1.386,286,2.005,291,0.816,292,1.515,297,2.862,313,2.005,316,1.386,321,1.298,323,1.515,329,1.515,331,1.231,333,1.108,343,2.451,346,1.553,347,0.897,349,1.005,350,0.897,351,0.723,352,0.651,353,1.005,360,0.897,373,1.005,374,1.005,375,1.005,382,1.515,384,1.298,402,1.005,420,2.005,422,1.754,424,1.135,429,2.005,448,1.243,465,3.22,468,1.135,493,2.342,511,2.412,540,1.135,542,1.135,544,2.005,570,1.007,577,1.118,582,0.651,585,1.832,589,1.386,591,1.366,597,1.582,599,1.118,601,0.651,632,2.104,635,0.651,638,1.709,644,1.694,650,1.386,651,2.279,654,1.366,656,1.243,657,1.243,658,0.897,659,0.897,660,1.709,661,1.243,662,1.906,664,1.515,671,2.005,685,4.515,702,5.499,703,1.846,704,2.342,705,2.853,706,2.342,707,2.853,708,2.342,709,2.342,710,2.005,711,2.342,712,2.853,713,3.922,714,2.853,715,2.451,716,3.356,717,2.451,718,4.828,719,3.487,720,2.853,721,4.828,722,3.22,723,4.24,724,3.558,725,3.481,726,3.963,727,3.487,728,1.846,729,1.846,730,1.846,731,2.853,732,1.846,733,3.922,734,1.846,735,2.757,736,2.853,737,3.22,738,2.853,739,2.853,740,1.846,741,3.22,742,2.342,743,2.853,744,2.853,745,2.853,746,2.853,747,2.005,748,1.386,749,2.853,750,2.853,751,2.342,752,2.853,753,2.853,754,2.853,755,1.846,756,2.853,757,2.853,758,1.846,759,2.342,760,3.922,761,2.853,762,2.342,763,1.846,764,2.853,765,3.922,766,1.846,767,2.853,768,2.853,769,1.846,770,1.846,771,1.846,772,2.342,773,2.342,774,1.846,775,3.22,776,3.22,777,2.853,778,2.342,779,1.846,780,1.846,781,1.298,782,1.846,783,1.846,784,1.846,785,1.846,786,1.846,787,1.846,788,1.846,789,1.846,790,1.846,791,1.846,792,3.487,793,1.846,794,1.846,795,1.298,796,1.846,797,1.846,798,1.846,799,1.515,800,1.135,801,1.846,802,1.846,803,3.922,804,3.922,805,3.922,806,1.515,807,1.846,808,1.846,809,1.846,810,2.853,811,1.846,812,1.846,813,1.846,814,1.846,815,1.135,816,1.846,817,2.853,818,1.298,819,1.515,820,1.846,821,1.515,822,1.846,823,1.298,824,1.515,825,1.846,826,1.846,827,1.515,828,1.846,829,1.515,830,1.846,831,1.515,832,2.005,833,1.846,834,1.846,835,1.846,836,1.846,837,1.298,838,1.846,839,1.515,840,1.515,841,1.846,842,2.853,843,2.853,844,1.846,845,1.846,846,1.846,847,1.846,848,1.846,849,1.846,850,1.846,851,1.846,852,1.846,853,1.846,854,1.846,855,1.846,856,3.922,857,1.754,858,1.846,859,1.846,860,1.846,861,1.846,862,2.853,863,1.846,864,1.846,865,1.846,866,1.846,867,2.853,868,1.846,869,1.846,870,1.846,871,1.846,872,2.853,873,1.846,874,1.846,875,1.846,876,1.846,877,1.846,878,1.846,879,1.846,880,1.846,881,1.846,882,1.515,883,1.846,884,1.846,885,1.846,886,1.846]],["title/interfaces/PublishOwnFeedEvent.html",[0,0.297,69,1.038]],["body/interfaces/PublishOwnFeedEvent.html",[0,0.541,1,1.632,2,0.99,3,0.42,4,0.259,5,0.314,6,1.915,7,0.358,8,1.915,9,0.432,10,2.841,11,0.908,12,1.915,13,1.696,14,2.267,15,0.946,16,0.761,17,1.221,18,0.99,19,1.166,20,0.832,21,1.915,22,0.207,23,0.852,24,0.856,25,0.798,26,0.505,27,0.042,28,2.023,29,2.56,30,1.513,31,0.637,32,0.956,33,1.915,34,0.347,35,1.591,36,0.496,37,0.541,38,0.852,39,1.915,40,1.838,41,2.267,42,1.767,43,2.56,44,1.591,45,0.956,46,1.069,47,1.069,48,1.077,49,2.023,50,1.378,51,1.378,52,2.023,53,2.56,54,2.023,55,2.56,56,2.608,57,0.755,58,1.025,59,2.522,60,1.486,61,2.267,62,2.023,63,0.42,64,2.267,65,2.56,66,2.56,67,2.726,68,0.417,69,1.469,70,0.597,71,1.042,72,1.323,73,3.078,74,3.078,75,3.078,76,0.899,77,1.323,78,1.19,79,2.56,80,1.431,81,2.56,82,2.56,83,2.56,84,2.56,85,1.19,86,2.56,87,2.432,88,2.56,89,2.267,90,1.19,91,0.447,92,2.56,93,2.267,94,1.077,95,1.814,96,1.696,97,1.838,98,2.279,99,1.915,100,0.496,101,1.513,102,1.915,103,1.099,104,0.956,105,1.915,106,1.513,107,0.637,108,1.915,109,0.314,110,1.513,111,1.513,112,1.696,113,0.891,114,1.19,115,1.513,116,1.696,117,1.221,118,0.755,119,1.632,120,1.915,121,1.357,122,1.069,123,1.221,124,0.8,125,1.357,126,1.915,127,1.915,128,1.221,129,1.915,130,1.099,131,1.357,132,0.021,133,0.028,134,0.021]],["title/interfaces/Publisher.html",[0,0.297,100,0.469]],["body/interfaces/Publisher.html",[0,0.532,2,0.855,3,0.271,4,0.224,5,0.271,7,0.358,9,0.688,11,0.693,15,0.899,16,0.373,18,1.381,19,1.014,20,0.79,22,0.179,23,0.771,24,0.429,25,0.429,26,0.475,27,0.042,31,1.101,32,0.618,34,0.224,37,0.271,38,0.551,44,1.197,45,1.139,46,1.209,47,0.691,50,0.691,51,0.691,57,0.899,58,0.89,63,0.438,68,0.455,70,0.562,71,1.032,72,0.855,76,0.938,77,0.855,80,1.243,90,1.077,91,0.314,94,1.139,100,0.919,104,0.865,107,1.146,113,1.077,114,1.077,118,0.854,122,0.967,124,0.967,130,1.662,132,0.018,133,0.026,134,0.018,150,0.618,154,0.899,171,0.693,174,1.197,176,0.855,199,1.354,247,1.116,257,1.476,259,1.642,261,1.83,287,1.83,289,2.052,290,2.112,291,1.417,333,0.855,351,1.476,352,1.329,427,1.055,477,1.329,514,1.894,537,1.308,568,1.308,569,1.465,570,1.329,571,1.83,572,2.564,573,1.83,574,2.052,575,2.288,576,1.83,577,1.476,578,1.308,579,2.16,580,2.109,581,1.308,582,1.534,583,2.288,584,1.308,585,1.055,586,1.308,587,1.465,588,1.308,589,1.308,590,2.051,591,1.476,592,1.308,593,1.308,594,1.308,595,1.308,596,1.308,597,1.929,598,1.308,599,1.703,600,1.642,601,0.95,602,1.173,603,1.465,604,1.173,605,1.308,606,1.465,607,1.308,608,1.173,609,2.408,610,1.308,611,1.308,612,2.72,613,1.465,614,1.465,615,1.642,616,1.465,617,2.929,618,2.051,619,2.051,620,2.051,621,2.564,622,1.83,623,2.051,624,2.051,625,2.564,626,2.051,627,2.288,628,2.051,629,2.051,630,2.564,631,2.288,632,1.642,633,2.564,634,2.051,635,1.329,636,2.564,637,1.83,638,1.894,639,1.83,640,2.051,641,2.051,642,2.051,643,1.642,644,1.83,645,2.051,646,2.051,647,2.051,648,1.308,649,1.642,650,1.83,651,1.642,652,1.308,653,1.83,654,1.476,655,1.308,656,1.173,657,1.173,658,1.308,659,1.308,660,1.173,661,1.173,662,1.308,663,1.465]],["title/interfaces/RemoteFeed.html",[0,0.297,25,0.469]],["body/interfaces/RemoteFeed.html",[0,0.52,2,0.868,3,0.276,4,0.228,5,0.276,7,0.36,9,0.658,11,0.698,15,0.936,16,0.379,18,1.393,19,1.123,20,0.755,22,0.182,23,0.779,24,0.436,25,0.607,26,0.534,27,0.042,31,1.168,32,0.875,34,0.228,37,0.276,38,0.559,44,0.868,45,1.145,46,1.217,47,0.701,50,0.701,51,0.701,57,0.795,58,0.779,63,0.384,68,0.457,70,0.565,71,1.035,72,0.868,76,0.939,77,0.868,80,1.089,90,0.781,91,0.395,94,1.007,100,0.91,104,1.089,107,1.188,113,0.781,114,0.781,118,0.859,122,0.977,124,1.217,130,1.344,132,0.019,133,0.026,134,0.019,150,0.628,154,0.795,171,0.698,174,1.393,176,0.868,199,1.359,247,1.125,257,1.071,259,1.191,261,1.328,287,1.328,289,2.065,290,1.85,291,1.476,333,0.868,351,1.857,352,1.344,427,1.071,477,0.964,514,1.91,537,1.328,568,1.328,569,1.488,570,1.344,571,1.85,572,2.581,573,1.85,574,2.065,575,2.303,576,1.85,577,1.492,578,1.328,579,2.172,580,2.117,581,1.328,582,1.546,583,2.303,584,1.328,585,1.071,586,1.328,587,1.488,588,1.328,589,1.328,590,2.073,591,1.492,592,1.328,593,1.328,594,1.328,595,1.328,596,1.328,597,1.759,598,1.85,599,1.717,600,1.91,601,1.344,602,1.191,603,2.073,604,2.065,605,2.303,606,2.073,607,1.85,608,2.065,609,2.422,610,1.328,611,1.328,612,2.422,613,2.073,614,2.073,615,2.249,616,2.386,617,2.581,618,1.488,619,1.488,620,1.488,621,2.073,622,1.328,623,1.488,624,1.488,625,2.073,626,1.488,627,1.85,628,1.488,629,1.488,630,2.073,631,1.85,632,1.191,633,2.073,634,1.488,635,0.964,636,2.073,637,1.328,638,1.659,639,1.328,640,1.488,641,1.488,642,1.488,643,1.191,644,1.328,645,1.488,646,1.488,647,1.488,648,1.328,649,1.659,650,1.85,651,1.659,652,1.328,653,1.85,654,1.492,655,1.328,656,1.191,657,1.191,658,1.328,659,1.328,660,1.191,661,1.191,662,1.328,663,1.488]],["title/interfaces/RequestSubstreamEvent.html",[0,0.297,103,1.038]],["body/interfaces/RequestSubstreamEvent.html",[0,0.551,1,1.701,2,1.054,3,0.438,4,0.276,5,0.335,6,2.039,7,0.364,8,2.039,9,0.46,10,2.9,11,0.918,12,2.039,13,1.806,14,2.363,15,0.991,16,0.758,17,1.3,18,1.054,19,1.202,20,0.818,21,2.039,22,0.221,23,0.888,24,0.871,25,0.871,26,0.438,27,0.042,28,2.351,29,2.974,30,1.612,31,0.679,32,0.997,33,2.039,34,0.362,35,1.631,36,0.529,37,0.537,38,0.888,39,2.039,40,1.701,41,1.806,42,1.532,43,2.039,44,1.379,45,0.762,46,0.852,47,0.852,48,1.111,49,1.612,50,1.114,51,1.114,52,1.612,53,2.039,54,1.612,55,2.039,56,2.109,57,0.601,58,0.888,59,2.381,60,1.403,61,1.806,62,1.612,63,0.335,64,1.806,65,2.039,66,2.039,67,2.363,68,0.428,69,1.171,70,0.518,71,1.009,72,1.054,73,2.669,74,2.669,75,2.669,76,0.771,77,1.054,78,0.949,79,2.039,80,1.383,81,2.039,82,2.039,83,2.039,84,2.039,85,0.949,86,2.039,87,1.612,88,2.039,89,1.806,90,0.949,91,0.428,92,2.039,93,1.806,94,0.762,95,2.108,96,2.363,97,2.087,98,2.588,99,2.669,100,0.692,101,2.109,102,2.669,103,1.532,104,1.111,105,2.669,106,2.494,107,0.99,108,2.039,109,0.335,110,1.612,111,1.612,112,1.806,113,0.949,114,1.241,115,1.612,116,1.806,117,1.3,118,0.787,119,1.701,120,2.039,121,1.446,122,1.114,123,1.3,124,0.852,125,1.446,126,2.039,127,2.039,128,1.3,129,2.039,130,1.171,131,1.446,132,0.023,133,0.03,134,0.023]],["title/interfaces/RoomInfo.html",[0,0.297,24,0.469]],["body/interfaces/RoomInfo.html",[0,0.521,2,0.872,3,0.277,4,0.228,5,0.277,7,0.374,9,0.75,11,0.608,15,0.861,16,0.381,18,1.213,19,1.021,20,0.757,22,0.183,23,0.781,24,0.608,25,0.437,26,0.545,27,0.042,31,1.169,32,0.63,34,0.228,37,0.277,38,0.561,44,0.872,45,1.146,46,1.281,47,0.98,50,0.704,51,0.704,57,0.861,58,0.899,63,0.443,68,0.457,70,0.566,71,1.028,72,0.872,76,0.94,77,0.872,80,1.091,90,0.784,91,0.318,94,1.146,100,0.886,104,0.877,107,1.183,113,0.784,114,0.784,118,0.861,122,0.98,124,0.98,130,1.347,132,0.019,133,0.026,134,0.019,150,0.877,154,0.861,171,0.608,174,1.213,176,0.872,199,1.361,247,0.98,257,1.075,259,1.195,261,1.333,287,1.333,289,2.069,290,2.134,291,1.357,333,1.213,351,1.496,352,1.675,427,1.075,477,0.968,514,1.663,537,1.333,568,1.333,569,1.493,570,1.347,571,1.855,572,2.585,573,1.855,574,2.069,575,2.307,576,1.855,577,1.496,578,1.333,579,2.252,580,2.179,581,1.333,582,1.908,583,2.307,584,1.333,585,1.496,586,1.855,587,2.078,588,2.307,589,1.855,590,2.391,591,1.721,592,2.307,593,1.333,594,1.855,595,2.307,596,1.333,597,1.938,598,1.333,599,1.496,600,1.663,601,0.968,602,1.195,603,1.493,604,1.195,605,1.333,606,1.493,607,1.333,608,1.195,609,1.855,610,1.333,611,1.333,612,2.425,613,1.493,614,1.493,615,1.663,616,1.493,617,2.585,618,1.493,619,1.493,620,1.493,621,2.078,622,1.333,623,1.493,624,1.493,625,2.078,626,1.493,627,1.855,628,1.493,629,1.493,630,2.078,631,1.855,632,1.195,633,2.078,634,1.493,635,0.968,636,2.078,637,1.333,638,1.663,639,1.333,640,1.493,641,1.493,642,1.493,643,1.195,644,1.333,645,1.493,646,1.493,647,1.493,648,1.333,649,1.663,650,1.855,651,1.663,652,1.333,653,1.855,654,1.496,655,1.333,656,1.195,657,1.195,658,1.333,659,1.333,660,1.195,661,1.195,662,1.333,663,1.493]],["title/components/SelfVideoComponent.html",[109,0.297,232,0.841]],["body/components/SelfVideoComponent.html",[3,0.26,4,0.215,5,0.26,7,0.172,9,0.358,11,0.583,16,0.508,20,0.411,22,0.172,24,0.849,26,0.428,27,0.042,31,0.749,32,0.976,34,0.305,35,1.35,36,0.411,37,0.589,40,1.986,47,1.186,48,0.593,50,0.939,51,1.186,52,2.065,56,1.254,57,0.468,58,0.528,59,2.014,60,1.186,63,0.26,68,0.215,69,0.911,70,0.507,76,0.583,78,1.046,85,1.395,87,1.254,91,0.463,109,0.554,118,0.919,123,1.011,132,0.018,133,0.025,134,0.018,135,0.738,136,1.291,137,1.011,138,1.125,139,1.125,140,1.125,146,2.571,147,1.433,148,1.851,149,2.612,150,0.593,151,1.594,152,1.594,153,1.938,154,1.007,155,1.125,156,2.571,157,1.433,159,1.594,163,1.594,164,1.992,165,1.499,168,1.722,170,0.911,171,0.737,172,0.738,175,1.291,178,1.125,185,1.125,186,1.811,187,1.814,189,1.665,190,1.125,195,0.738,197,1.814,199,0.939,200,1.665,205,1.125,207,1.291,211,2.612,221,0.911,222,0.738,223,2.014,224,1.125,225,1.594,226,0.738,227,1.125,228,0.738,229,1.125,230,0.663,231,1.125,232,1.322,233,2.176,234,1.125,235,0.738,236,0.82,237,1.011,238,1.011,239,0.738,240,1.011,241,1.125,247,1.091,259,1.594,273,1.777,308,2.313,311,1.814,312,2.612,316,1.254,331,1.291,352,0.911,353,1.405,363,2.246,409,1.814,410,1.254,422,2.249,433,3.115,445,1.814,448,1.851,467,1.814,468,3.115,469,2.986,470,1.814,471,1.587,472,1.587,473,1.587,474,1.992,475,1.814,477,1.291,478,3.249,481,3.742,482,2.119,483,3.562,486,2.571,500,1.814,527,2.119,530,2.119,540,1.587,542,1.587,560,3.249,561,2.571,579,1.125,580,1.433,582,0.911,593,1.254,598,1.777,601,0.911,627,1.254,652,1.254,694,4.159,716,2.249,747,1.814,748,1.777,775,3.002,778,3.002,781,2.571,795,1.814,815,1.587,818,2.571,823,1.814,832,2.571,857,2.249,887,5.067,888,2.581,889,3.657,890,3.657,891,3.657,892,2.581,893,3.487,894,3.657,895,2.581,896,2.581,897,2.581,898,3.657,899,4.248,900,2.581,901,2.581,902,3.657,903,3.002,904,3.657,905,2.581,906,2.581,907,2.581,908,2.581,909,3.657,910,2.581,911,2.581,912,2.581,913,2.581,914,2.581,915,2.581,916,2.581,917,2.119,918,2.581,919,2.581,920,4.248,921,2.581,922,2.581,923,1.814,924,2.581,925,2.581,926,3.657,927,2.581,928,2.581,929,2.119,930,2.581,931,2.581,932,3.657,933,2.581,934,2.581,935,2.581,936,2.581,937,2.119,938,2.119,939,2.581,940,2.119,941,2.581,942,2.581,943,2.581,944,2.581,945,2.581,946,2.119,947,2.581,948,3.002,949,2.581,950,4.37,951,2.581,952,2.581,953,2.581,954,2.581,955,2.581,956,3.657,957,2.119,958,2.119,959,2.581,960,2.581,961,2.581,962,2.581,963,2.581,964,2.581,965,2.119,966,2.119,967,4.277,968,2.119,969,2.119,970,2.119,971,2.119,972,3.002,973,2.119,974,2.119,975,2.119,976,2.119,977,3.002,978,3.002,979,2.119,980,2.119,981,2.119,982,2.119,983,2.119,984,2.119,985,2.119,986,3.487,987,2.119,988,2.119,989,2.119,990,2.119,991,2.119,992,2.119,993,2.119,994,2.119,995,3.002,996,2.119,997,1.814,998,2.119,999,2.119,1000,2.119]],["title/components/VideoBoxComponent.html",[109,0.297,235,0.841]],["body/components/VideoBoxComponent.html",[3,0.205,4,0.169,5,0.205,7,0.135,9,0.282,11,0.657,15,0.557,16,0.426,17,1.616,20,0.324,22,0.246,23,0.628,25,0.862,26,0.524,27,0.042,32,0.85,34,0.415,35,1.407,36,0.324,37,0.57,38,0.416,42,1.083,45,0.467,48,0.467,57,0.803,58,0.628,59,0.885,60,0.95,63,0.205,68,0.169,70,0.555,71,0.368,76,0.324,78,0.878,85,0.878,91,0.481,94,0.85,95,1.612,97,1.824,100,0.489,103,0.717,104,1.143,106,2.003,107,0.757,109,0.446,117,0.796,124,1.195,128,0.796,132,0.014,133,0.021,134,0.014,135,0.581,136,1.083,137,0.796,138,0.885,139,0.885,140,0.885,143,1.667,146,2.898,147,1.203,148,1.612,149,2.275,150,0.467,151,1.338,152,1.338,153,1.832,154,0.924,155,0.885,156,2.6,157,1.203,158,2.52,159,1.338,160,2.52,161,1.671,162,2.52,163,1.338,164,1.671,165,1.083,166,1.667,167,3.272,168,1.908,170,1.562,171,0.812,172,1.266,174,1.407,175,1.643,176,1.582,177,1.887,178,2.029,179,2.157,180,1.887,182,2.52,184,2.52,185,2.029,186,2.204,187,1.428,189,1.616,190,0.885,191,1.106,192,1.887,194,1.249,195,1.058,196,2.52,197,1.428,198,1.667,199,1.308,200,1.616,201,1.667,202,1.616,205,0.885,206,1.667,207,1.083,210,1.667,211,1.249,213,1.667,214,1.667,218,1.667,220,1.667,221,0.717,222,0.581,223,1.796,224,0.885,225,1.338,226,0.581,227,0.885,228,0.581,229,0.885,230,0.521,231,0.885,232,0.581,233,0.796,234,0.885,235,1.179,236,0.646,237,0.796,238,0.796,239,0.581,240,0.796,241,0.885,247,0.95,263,2.014,266,3.111,269,3.384,273,1.491,291,0.878,301,2.52,308,1.671,312,2.535,316,1.798,320,2.157,321,1.428,331,1.756,332,2.52,342,1.667,345,3.111,346,1.671,347,0.987,348,1.667,349,1.106,350,0.987,353,1.106,360,0.987,363,2.418,372,1.667,373,1.106,374,1.106,375,1.106,377,1.667,397,3.384,402,1.106,410,2.003,422,1.249,428,1.428,433,2.721,445,1.428,448,1.612,467,1.428,468,2.862,469,2.6,470,1.428,471,1.887,472,1.249,473,2.275,474,1.671,475,1.428,477,1.083,478,2.898,481,2.6,483,2.6,486,2.157,487,2.52,500,1.428,560,1.428,561,2.898,570,1.083,607,1.491,608,1.612,615,1.796,635,0.717,649,1.338,697,4.483,717,2.6,747,1.428,748,0.987,781,1.428,795,1.428,815,1.249,837,1.428,893,3.037,903,2.52,917,1.667,929,1.667,946,2.52,948,1.667,950,3.821,957,2.52,958,2.52,965,1.667,966,1.667,967,4.085,968,1.667,969,1.667,970,1.667,971,1.667,972,2.52,973,1.667,974,1.667,975,1.667,976,1.667,977,2.52,978,3.037,979,1.667,980,1.667,981,1.667,982,1.667,983,1.667,984,1.667,985,1.667,986,3.037,987,1.667,988,1.667,989,1.667,990,1.667,991,1.667,992,1.667,993,1.667,994,1.667,995,2.52,996,1.667,997,1.428,998,1.667,999,1.667,1000,1.667,1001,3.839,1002,2.52,1003,3.069,1004,3.069,1005,3.069,1006,3.069,1007,3.069,1008,2.52,1009,2.157,1010,2.031,1011,4.655,1012,3.069,1013,3.069,1014,4.426,1015,2.031,1016,2.031,1017,2.031,1018,2.031,1019,2.031,1020,4.122,1021,4.122,1022,3.384,1023,2.031,1024,3.069,1025,2.031,1026,3.069,1027,3.069,1028,2.031,1029,2.031,1030,3.037,1031,2.031,1032,3.069,1033,3.968,1034,3.069,1035,2.031,1036,2.031,1037,3.037,1038,3.069,1039,3.069,1040,2.031,1041,1.428,1042,1.667,1043,2.031,1044,2.031,1045,2.031,1046,2.031,1047,2.031,1048,2.031,1049,2.031,1050,3.069,1051,2.031,1052,2.031,1053,2.031,1054,3.069,1055,3.069,1056,2.031,1057,2.031,1058,2.031,1059,2.031,1060,3.699,1061,2.031,1062,2.031,1063,2.031,1064,2.031,1065,2.031,1066,1.667,1067,2.031,1068,2.031,1069,2.031,1070,2.031,1071,2.031,1072,3.069,1073,2.031,1074,1.428,1075,3.069,1076,2.031,1077,2.031,1078,2.031,1079,2.031,1080,2.031,1081,2.031,1082,1.667,1083,2.031,1084,2.031,1085,3.069,1086,2.031,1087,2.031,1088,2.031,1089,2.031,1090,2.031,1091,2.031,1092,3.069,1093,2.031,1094,2.031,1095,2.031,1096,2.031,1097,2.031,1098,2.031,1099,2.031,1100,3.069,1101,3.069,1102,2.031,1103,2.031,1104,2.031,1105,2.031,1106,2.031,1107,2.031,1108,1.428,1109,2.031]],["title/interfaces/VideoRoomComponent.html",[0,0.297,121,1.282]],["body/interfaces/VideoRoomComponent.html",[0,0.563,1,1.642,2,0.999,3,0.422,4,0.262,5,0.317,6,1.933,7,0.376,8,1.933,9,0.436,10,2.849,11,0.917,12,1.933,13,1.712,14,2.281,15,0.949,16,0.726,17,1.232,18,0.999,19,1.178,20,0.858,21,1.933,22,0.209,23,0.857,24,0.924,25,0.858,26,0.554,27,0.042,28,2.036,29,2.575,30,1.527,31,0.643,32,1.082,33,1.933,34,0.349,35,1.814,36,0.501,37,0.58,38,1.028,39,1.933,40,2.051,41,1.712,42,1.478,43,1.933,44,1.331,45,0.722,46,0.807,47,0.807,48,0.962,49,1.527,50,1.075,51,1.075,52,1.527,53,1.933,54,1.527,55,1.933,56,2.036,57,0.57,58,0.857,59,2.345,60,1.382,61,1.712,62,1.527,63,0.317,64,1.712,65,1.933,66,1.933,67,2.281,68,0.419,69,1.109,70,0.5,71,0.976,72,0.999,73,2.575,74,2.575,75,2.575,76,0.751,77,0.999,78,0.899,79,1.933,80,1.496,81,1.933,82,1.933,83,1.933,84,1.933,85,0.899,86,1.933,87,1.527,88,1.933,89,1.712,90,0.899,91,0.448,92,1.933,93,1.712,94,0.722,95,2.28,96,1.712,97,1.969,98,2.442,99,1.933,100,0.501,101,1.527,102,1.933,103,1.109,104,1.082,105,1.933,106,1.527,107,0.643,108,2.575,109,0.422,110,2.036,111,2.036,112,2.281,113,1.198,114,1.437,115,2.036,116,2.281,117,1.642,118,0.911,119,2.109,120,2.575,121,1.825,122,1.382,123,1.642,124,1.075,125,1.825,126,2.575,127,2.575,128,1.642,129,2.575,130,1.478,131,2.189,132,0.021,133,0.029,134,0.021,172,1.198]],["title/components/VideoRoomWrapperComponent.html",[109,0.297,236,0.935]],["body/components/VideoRoomWrapperComponent.html",[1,1.575,3,0.298,4,0.246,5,0.298,7,0.405,11,0.471,22,0.197,23,0.823,24,0.843,25,0.728,26,0.583,27,0.042,34,0.451,35,1.719,36,0.471,37,0.533,38,0.935,40,1.79,48,0.923,58,0.823,60,1.032,63,0.298,68,0.246,69,1.418,70,0.353,78,1.149,91,0.481,95,1.99,103,1.418,109,0.545,119,1.79,121,1.288,122,1.172,131,1.99,132,0.02,133,0.027,134,0.02,135,0.845,136,1.418,137,1.158,138,1.288,139,1.288,140,1.288,147,1.575,148,1.99,150,0.679,151,1.751,152,1.751,153,1.991,154,1.012,155,1.288,157,1.575,159,1.751,161,2.188,163,1.751,165,1.418,168,2.025,170,1.043,171,0.781,172,0.845,175,1.729,185,1.751,186,2.12,189,2.072,190,1.288,191,1.61,193,1.61,195,0.845,200,1.79,205,1.288,207,1.612,221,1.043,222,0.845,223,2.135,224,1.288,225,1.751,226,1.306,227,1.288,228,0.845,229,1.288,230,0.759,231,1.288,232,0.845,233,1.158,234,1.288,235,0.845,236,1.557,237,1.79,238,1.158,239,1.401,240,1.92,241,1.288,243,2.078,260,2.427,263,2.486,273,1.953,316,1.436,331,1.729,346,2.188,347,1.436,349,1.61,350,1.436,353,1.61,360,1.436,373,1.61,374,1.61,375,1.61,376,2.427,384,2.078,402,2.486,692,2.427,698,4.061,700,2.427,717,3.21,748,1.436,806,2.427,832,2.078,837,2.078,1001,4.061,1110,2.956,1111,4.566,1112,4.019,1113,4.9,1114,4.9,1115,2.956,1116,5.286,1117,2.956,1118,2.956,1119,2.956,1120,2.956,1121,2.956,1122,2.956,1123,2.956,1124,2.956,1125,2.956,1126,2.956,1127,2.956,1128,2.956,1129,4.019,1130,4.019,1131,2.956,1132,2.956,1133,4.019,1134,4.019,1135,4.019,1136,2.956,1137,2.956,1138,4.019,1139,2.956,1140,2.956,1141,2.427,1142,2.956,1143,2.956,1144,2.956,1145,2.956,1146,2.956,1147,4.566,1148,2.956,1149,2.956,1150,2.956,1151,2.956,1152,2.956,1153,2.956,1154,2.956,1155,2.956,1156,2.956]],["title/directives/VideoRoomWrapperDirective.html",[222,0.841,239,0.841]],["body/directives/VideoRoomWrapperDirective.html",[3,0.446,4,0.368,5,0.446,7,0.391,22,0.294,23,1.062,26,0.523,27,0.041,34,0.368,36,0.705,68,0.368,132,0.03,133,0.035,134,0.03,150,1.016,153,1.831,165,1.56,168,1.831,170,1.56,171,0.705,172,1.264,195,1.264,202,2.033,222,1.483,238,1.732,239,1.483,240,2.033,698,3.87,1001,3.87,1141,4.922,1157,4.42,1158,4.42,1159,4.42,1160,4.42,1161,4.42]],["title/injectables/WebrtcService.html",[511,1.809,1162,2.068]],["body/injectables/WebrtcService.html",[3,0.156,4,0.128,5,0.156,7,0.32,9,0.344,11,0.246,15,0.562,16,0.629,17,0.604,19,1.023,20,0.494,22,0.103,24,0.494,25,0.566,26,0.25,27,0.042,28,1.726,31,0.316,34,0.363,36,0.246,37,0.419,40,0.604,42,0.544,45,0.354,46,0.636,48,0.569,49,1.203,50,1.233,51,1.26,54,0.749,56,2.018,57,0.28,58,1.004,59,1.079,60,1.066,61,0.84,63,0.484,67,0.84,68,0.206,70,0.628,71,0.753,76,0.887,85,1.472,87,1.89,91,0.434,94,1.042,96,0.84,97,1.71,100,0.246,101,0.749,104,0.569,106,1.203,107,0.928,113,0.887,114,0.708,115,1.203,118,0.562,128,1.216,131,0.672,132,0.01,133,0.017,134,0.017,144,1.266,145,1.266,154,0.705,161,1.348,165,1.253,167,1.084,168,1.54,170,0.874,171,0.494,172,0.708,175,0.544,176,1.129,178,0.672,180,0.948,185,1.977,186,2.299,193,0.84,195,0.708,199,0.396,200,1.959,202,0.604,207,2.064,208,3.067,233,0.97,237,1.392,247,0.396,251,1.203,266,1.084,281,2.496,285,1.266,291,0.708,294,2.546,308,1.348,311,1.084,320,1.084,331,1.54,343,3.29,345,1.084,347,0.749,350,0.749,360,0.749,362,2.546,363,2.204,364,3.408,410,0.749,416,1.084,417,1.266,419,1.084,424,0.948,427,0.604,430,1.266,433,1.907,437,2.915,448,2.138,474,0.84,477,0.544,484,1.266,497,1.74,507,2.546,511,2.183,514,0.672,540,1.907,542,2.553,544,1.084,550,2.546,551,1.266,553,1.266,555,1.266,574,0.672,580,0.97,585,0.97,586,0.749,591,2.042,597,1.465,599,0.604,601,0.874,602,1.695,604,1.079,635,1.095,643,0.672,649,0.672,654,0.97,661,0.672,704,1.266,715,2.181,716,1.522,722,2.546,724,2.496,725,2.032,735,1.084,748,1.203,776,1.266,799,1.266,800,0.948,815,0.948,818,2.181,819,2.032,823,1.084,827,3.192,831,2.032,840,1.266,857,3.238,923,1.74,937,1.266,938,2.032,940,1.266,1008,2.032,1009,1.084,1037,2.032,1041,1.084,1042,1.266,1066,1.266,1074,1.084,1082,1.266,1108,1.084,1162,2.181,1163,1.542,1164,1.542,1165,2.476,1166,3.102,1167,2.476,1168,2.476,1169,3.551,1170,3.888,1171,3.102,1172,3.551,1173,1.542,1174,1.542,1175,2.476,1176,1.542,1177,1.542,1178,1.542,1179,1.542,1180,1.542,1181,1.542,1182,2.915,1183,2.476,1184,1.542,1185,3.192,1186,2.476,1187,2.032,1188,1.542,1189,2.476,1190,2.546,1191,1.542,1192,1.542,1193,1.542,1194,1.542,1195,3.102,1196,1.542,1197,1.266,1198,1.542,1199,1.542,1200,1.542,1201,1.542,1202,2.546,1203,1.542,1204,2.476,1205,1.542,1206,1.542,1207,1.542,1208,1.542,1209,2.476,1210,2.032,1211,1.542,1212,2.476,1213,1.542,1214,1.542,1215,1.542,1216,1.542,1217,1.542,1218,1.542,1219,3.102,1220,1.542,1221,1.542,1222,1.542,1223,1.542,1224,3.102,1225,1.542,1226,2.915,1227,1.542,1228,1.542,1229,4.802,1230,1.542,1231,1.542,1232,1.542,1233,1.542,1234,3.102,1235,2.476,1236,1.542,1237,1.542,1238,1.542,1239,1.542,1240,4.68,1241,1.542,1242,1.542,1243,1.542,1244,2.032,1245,1.542,1246,1.542,1247,5.147,1248,2.476,1249,3.102,1250,3.102,1251,2.476,1252,2.476,1253,1.542,1254,1.542,1255,2.476,1256,1.542,1257,1.542,1258,1.542,1259,2.476,1260,2.476,1261,3.102,1262,2.476,1263,1.542,1264,1.542,1265,1.542,1266,1.542,1267,2.476,1268,2.476,1269,1.542,1270,1.542,1271,2.476,1272,1.542,1273,2.476,1274,1.542,1275,2.476,1276,1.542,1277,3.888,1278,3.551,1279,1.542,1280,1.542,1281,4.907,1282,1.542,1283,1.542,1284,2.476,1285,2.476,1286,1.542,1287,1.542,1288,1.542,1289,2.476,1290,1.542,1291,1.542,1292,2.476,1293,2.476,1294,4.907,1295,1.542,1296,2.476,1297,1.542,1298,2.476,1299,2.476,1300,2.476,1301,1.542,1302,1.542,1303,2.476,1304,2.476,1305,1.542,1306,1.542,1307,2.476,1308,1.542,1309,1.542,1310,3.192,1311,1.542,1312,1.266,1313,1.542,1314,1.542,1315,1.542,1316,1.542,1317,2.476,1318,2.032,1319,2.476,1320,1.542,1321,1.542,1322,1.542,1323,1.542,1324,1.542,1325,2.476,1326,2.476,1327,2.476,1328,1.542,1329,1.542,1330,3.551,1331,2.476,1332,1.542,1333,1.542,1334,1.542,1335,1.542,1336,1.542,1337,1.542,1338,1.542,1339,2.476,1340,2.476,1341,2.476,1342,1.542,1343,1.542,1344,1.542,1345,1.542,1346,1.542,1347,1.542,1348,1.542,1349,1.542,1350,1.542,1351,1.542,1352,2.476,1353,1.266,1354,1.542,1355,1.542,1356,1.542,1357,1.542,1358,2.476,1359,1.542,1360,1.542,1361,2.476,1362,1.542,1363,2.476,1364,2.476,1365,2.476,1366,2.032,1367,2.476,1368,1.542,1369,1.542,1370,1.542,1371,1.542,1372,2.734,1373,1.542,1374,1.542,1375,1.542,1376,1.542,1377,1.542,1378,3.551,1379,3.551,1380,1.542,1381,1.266,1382,1.266,1383,1.542,1384,1.542,1385,1.542,1386,1.542,1387,1.542,1388,1.542,1389,2.032,1390,1.266,1391,1.542,1392,1.542,1393,1.542,1394,1.266,1395,1.266,1396,1.542,1397,1.542,1398,1.542,1399,1.542,1400,3.551,1401,1.542,1402,2.476,1403,2.476,1404,1.542,1405,1.266,1406,1.542,1407,1.542,1408,4.152,1409,2.476,1410,1.542,1411,1.542,1412,1.542,1413,1.542,1414,1.542,1415,1.542,1416,1.542,1417,1.542,1418,1.542,1419,1.542,1420,1.542,1421,1.542,1422,1.542,1423,1.542,1424,2.476,1425,1.542,1426,1.266,1427,1.542,1428,1.542,1429,1.542,1430,1.542,1431,3.888,1432,1.542,1433,2.476,1434,1.542,1435,1.542,1436,1.542,1437,1.542,1438,1.542,1439,2.476,1440,1.542,1441,1.542,1442,3.102,1443,1.266,1444,2.476,1445,1.542,1446,1.542,1447,1.542,1448,1.542,1449,1.542,1450,1.542,1451,1.542,1452,1.542,1453,1.266,1454,1.542,1455,1.542,1456,1.542,1457,1.266,1458,1.084,1459,1.542,1460,1.542,1461,1.542,1462,1.542,1463,1.542,1464,1.542,1465,2.476,1466,1.542,1467,1.542,1468,1.542,1469,1.542,1470,1.542,1471,1.266,1472,1.542,1473,1.542,1474,1.542,1475,1.542,1476,1.542,1477,1.542,1478,1.542,1479,1.542,1480,1.542,1481,1.542,1482,2.476,1483,1.542,1484,1.542,1485,1.542,1486,1.542,1487,1.542,1488,1.542,1489,1.542,1490,1.542,1491,1.542,1492,1.542,1493,1.542,1494,1.542,1495,1.542,1496,1.542,1497,1.542,1498,3.888,1499,2.476,1500,2.476,1501,1.542,1502,1.542,1503,1.542]],["title/dependencies.html",[668,1.925,1504,2.02]],["body/dependencies.html",[27,0.041,36,0.745,132,0.032,133,0.036,134,0.032,570,1.65,668,2.918,682,3.839,1505,4.676,1506,4.676,1507,3.839,1508,5.359,1509,3.839,1510,3.839,1511,4.676,1512,4.676]],["title/miscellaneous/enumerations.html",[1513,1.513,1514,2.903]],["body/miscellaneous/enumerations.html",[7,0.278,15,0.757,19,0.855,20,0.666,22,0.278,27,0.042,31,1.027,38,1.027,45,1.281,46,1.288,100,0.8,118,0.909,132,0.028,133,0.034,134,0.028,174,1.328,289,2.43,291,1.195,333,1.948,351,1.966,352,1.77,568,2.03,571,2.438,573,2.438,574,2.43,575,2.71,576,2.438,577,1.966,579,2.186,580,2.27,581,2.03,582,1.77,583,2.71,584,2.03,600,1.82,648,2.03,653,2.438,1513,2.568,1514,3.429,1515,5.575]],["title/index.html",[22,0.164,710,1.73,1516,2.461]],["body/index.html",[4,0.369,7,0.335,16,0.387,17,1.094,19,0.907,20,0.445,27,0.04,34,0.322,36,0.445,37,0.39,42,2.055,49,2.325,54,1.357,62,1.357,63,0.39,64,1.52,68,0.322,70,0.461,71,0.701,80,1.368,89,1.52,90,0.798,91,0.369,93,1.52,98,1.878,100,0.616,101,1.357,109,0.573,110,1.357,111,1.357,112,2.9,113,0.798,117,1.094,118,0.506,123,1.094,124,0.992,125,1.217,132,0.019,133,0.026,134,0.019,137,1.094,147,1.094,153,1.364,154,1.068,157,1.094,171,0.445,175,0.985,177,2.376,178,1.932,179,1.963,180,1.717,189,1.515,195,1.105,202,1.515,208,1.963,222,1.267,230,0.992,247,0.992,250,3.172,251,2.525,252,2.292,257,1.515,258,2.292,286,1.963,288,4.123,291,0.798,310,2.292,312,1.717,314,3.172,331,0.985,369,2.292,409,1.963,416,2.717,419,1.963,420,3.531,423,2.292,424,1.717,427,1.094,428,1.963,429,1.963,492,2.292,497,2.717,498,2.292,570,0.985,577,1.094,578,1.357,585,1.515,594,2.325,597,0.985,599,1.515,600,1.217,622,1.878,631,2.154,632,1.217,635,0.985,637,1.357,638,1.217,639,1.357,643,1.217,651,1.932,655,1.878,656,1.932,660,1.684,665,2.376,666,2.413,668,2.104,669,1.963,680,2.292,701,3.172,706,2.292,708,3.172,709,2.292,710,1.963,711,2.292,716,2.376,724,1.963,726,2.292,735,3.363,737,2.292,741,2.292,742,3.172,748,2.441,751,2.292,759,4.123,762,2.292,772,3.638,773,2.292,821,2.292,824,2.292,829,2.292,839,2.292,882,2.292,923,3.363,997,1.963,1002,3.172,1009,1.963,1022,2.292,1030,2.292,1033,2.292,1074,2.717,1108,1.963,1182,2.292,1185,2.292,1187,2.292,1190,4.123,1210,2.292,1226,3.638,1244,2.292,1310,2.292,1318,2.292,1366,2.292,1372,3.363,1381,2.292,1382,3.172,1389,2.292,1390,2.292,1394,2.292,1405,2.292,1443,2.292,1453,2.292,1457,3.638,1458,1.963,1471,3.172,1504,2.292,1507,2.292,1509,3.172,1510,3.172,1517,5.429,1518,4.783,1519,3.864,1520,4.783,1521,2.792,1522,2.792,1523,2.792,1524,2.792,1525,4.432,1526,2.792,1527,2.792,1528,2.792,1529,2.792,1530,2.792,1531,2.792,1532,2.792,1533,2.792,1534,2.792,1535,2.792,1536,2.792,1537,4.432,1538,2.792,1539,2.792,1540,2.792,1541,2.792,1542,2.792,1543,2.792,1544,3.864,1545,2.792,1546,2.792,1547,2.792,1548,3.864,1549,2.792,1550,3.864,1551,3.864,1552,2.792,1553,3.864,1554,2.792,1555,4.432,1556,4.432,1557,3.864,1558,2.792,1559,5.022,1560,2.792,1561,2.792,1562,3.864,1563,2.792,1564,2.792,1565,3.864,1566,2.792,1567,2.792,1568,2.792,1569,2.792,1570,2.792,1571,4.783,1572,4.432,1573,4.432,1574,2.792,1575,2.792,1576,2.792,1577,2.792,1578,2.792,1579,2.792,1580,2.792,1581,2.292,1582,2.792,1583,2.792,1584,2.792,1585,2.792,1586,3.864,1587,3.864,1588,2.792,1589,2.292,1590,2.792,1591,2.792,1592,3.864,1593,2.792,1594,2.792,1595,2.792,1596,2.792,1597,2.792,1598,2.792,1599,2.792,1600,3.864,1601,2.792,1602,2.792,1603,3.864,1604,2.792,1605,2.792,1606,2.792,1607,2.792,1608,2.792,1609,2.792,1610,2.792,1611,2.792,1612,2.792,1613,2.792,1614,2.792,1615,2.792,1616,2.792,1617,2.792,1618,2.792,1619,3.864,1620,2.792,1621,3.864,1622,2.792,1623,2.792,1624,2.792,1625,3.864,1626,3.864,1627,2.792,1628,4.783,1629,2.792,1630,2.792,1631,2.792,1632,2.792,1633,2.792,1634,2.792,1635,2.792,1636,2.792,1637,2.792,1638,2.792,1639,2.792,1640,2.792,1641,2.792,1642,2.792,1643,2.792,1644,3.864,1645,2.792,1646,2.792,1647,2.792,1648,2.792,1649,2.792,1650,2.792,1651,2.792,1652,2.792,1653,2.792,1654,3.864,1655,2.792,1656,2.792,1657,2.792,1658,2.792,1659,2.792,1660,2.792,1661,2.792,1662,2.792,1663,2.792,1664,2.792,1665,2.792,1666,2.792,1667,2.792,1668,4.432,1669,2.792,1670,2.292,1671,3.864,1672,2.792,1673,2.792]],["title/modules.html",[667,2.816]],["body/modules.html",[27,0.037,132,0.032,133,0.037,134,0.032,666,2.588,667,3.342,1202,3.902,1670,3.902,1674,4.754,1675,4.754]],["title/overview.html",[1676,3.288]],["body/overview.html",[2,1.332,27,0.041,132,0.029,133,0.034,134,0.029,135,1.676,136,1.479,221,1.479,222,1.199,226,1.676,228,1.676,230,1.504,232,1.676,235,1.676,236,1.711,239,1.539,410,2.616,665,3.09,666,3.348,668,2.282,669,2.946,670,3.441,671,2.946,672,3.441,673,3.441,674,3.441,675,3.441,676,4.126,677,3.441,678,3.441,1162,2.946,1676,3.441,1677,4.191,1678,4.191]],["title/miscellaneous/variables.html",[800,2.174,1513,1.513]],["body/miscellaneous/variables.html",[9,0.644,10,2.237,15,1.005,16,0.741,22,0.203,24,0.487,26,0.605,27,0.042,30,1.484,31,1.092,47,1.055,48,1.386,63,0.308,71,0.842,76,0.95,85,0.873,91,0.254,97,1.197,104,0.701,107,0.625,119,1.197,132,0.021,133,0.028,134,0.021,135,0.873,136,1.752,154,0.745,171,0.487,207,1.45,226,0.873,228,0.873,230,0.784,232,0.873,235,0.873,251,1.996,331,1.077,333,1.917,363,2.256,448,2.023,582,1.45,588,1.996,591,1.61,592,1.996,595,1.996,596,1.996,597,1.638,601,1.077,602,1.33,604,1.33,605,1.484,608,1.33,609,1.484,610,1.484,611,1.484,612,1.484,615,1.33,657,1.79,715,2.146,800,1.877,857,3.409,1041,2.888,1197,2.506,1312,3.372,1353,2.506,1372,2.146,1395,2.506,1426,2.506,1458,2.146,1513,1.877,1581,2.506,1589,2.506,1679,4.108,1680,5.928,1681,5.945,1682,4.108,1683,4.108,1684,4.642,1685,4.108,1686,3.053,1687,4.108,1688,4.108,1689,4.108,1690,4.108,1691,4.108,1692,4.108,1693,4.108,1694,4.108,1695,4.108,1696,4.108,1697,4.108,1698,3.053,1699,4.108,1700,4.108,1701,4.108,1702,4.108,1703,4.108,1704,4.108,1705,4.108,1706,4.108,1707,4.108,1708,4.108,1709,3.053,1710,3.053,1711,3.053,1712,4.108,1713,3.053,1714,4.108,1715,3.053,1716,3.053,1717,3.053,1718,3.053,1719,4.108,1720,4.108,1721,3.053,1722,3.053,1723,4.108,1724,3.053,1725,3.053,1726,3.053,1727,3.053,1728,3.053,1729,4.642,1730,3.053,1731,3.053,1732,4.108,1733,5.677,1734,5.544,1735,3.053,1736,3.053,1737,3.053]]],"invertedIndex":[["",{"_index":27,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{},"injectables/WebrtcService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":363,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["0.24px",{"_index":990,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["000",{"_index":1345,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["0px",{"_index":968,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["1",{"_index":410,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"overview.html":{}}}],["10.0.1",{"_index":1511,"title":{},"body":{"dependencies.html":{}}}],["10.1.1",{"_index":1508,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":468,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["1000",{"_index":1365,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["1080",{"_index":1215,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["10px",{"_index":1104,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["1234",{"_index":1636,"title":{},"body":{"index.html":{}}}],["127",{"_index":636,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["128000",{"_index":1470,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["13",{"_index":1223,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["14px",{"_index":1106,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["15",{"_index":1268,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["16px",{"_index":982,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["1920",{"_index":1214,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["1px",{"_index":950,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["2",{"_index":437,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["2.0.0",{"_index":1506,"title":{},"body":{"dependencies.html":{}}}],["2.29.1",{"_index":1512,"title":{},"body":{"dependencies.html":{}}}],["24px",{"_index":999,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["255",{"_index":995,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["256000",{"_index":1469,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["25px",{"_index":956,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["2px",{"_index":482,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{}}}],["3",{"_index":416,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["30",{"_index":565,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["3px",{"_index":960,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["3rdparty/janus.es",{"_index":1205,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["4",{"_index":417,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["5",{"_index":393,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["50",{"_index":464,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["5px",{"_index":561,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["6",{"_index":1192,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["60",{"_index":567,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["600",{"_index":984,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["64",{"_index":1735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["64000",{"_index":1472,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["7",{"_index":1677,"title":{},"body":{"overview.html":{}}}],["777",{"_index":1000,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["85",{"_index":996,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["8ae010",{"_index":975,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["9",{"_index":1678,"title":{},"body":{"overview.html":{}}}],["9999",{"_index":880,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["_attachmediastream",{"_index":1064,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["_attachvideoroomhelper(subscriber",{"_index":1269,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["_createvideoelement(canvasid",{"_index":1399,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["_get_random_string",{"_index":1266,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["_mutevideo(videoelement",{"_index":1371,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["_publishownfeed(audiodeviceid",{"_index":915,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["_setmuted(muted",{"_index":846,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["_sizecanvaselement(videowidth",{"_index":1377,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["_videoelementsafarihacks(videoelement",{"_index":1388,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["a5adb7",{"_index":479,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["absolute",{"_index":486,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["abstracted",{"_index":254,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["accept",{"_index":1672,"title":{},"body":{"index.html":{}}}],["access",{"_index":1084,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["accessors",{"_index":164,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["actual_component",{"_index":241,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["actually",{"_index":1086,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["adapter",{"_index":1626,"title":{},"body":{"index.html":{}}}],["add",{"_index":1382,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["adding",{"_index":409,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"index.html":{}}}],["addition",{"_index":1002,"title":{},"body":{"components/VideoBoxComponent.html":{},"index.html":{}}}],["additional",{"_index":1653,"title":{},"body":{"index.html":{}}}],["adjust",{"_index":927,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["adopt",{"_index":1558,"title":{},"body":{"index.html":{}}}],["advantage",{"_index":1536,"title":{},"body":{"index.html":{}}}],["affect",{"_index":262,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["afterviewinit",{"_index":149,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["afterviewinitran",{"_index":908,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["ahead",{"_index":630,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["align",{"_index":475,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["alldevices",{"_index":543,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["alldevices.filter((device",{"_index":549,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["allow",{"_index":1082,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["allows",{"_index":1186,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["already",{"_index":815,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["alternatively",{"_index":55,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["always",{"_index":1394,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["and/or",{"_index":1575,"title":{},"body":{"index.html":{}}}],["android",{"_index":180,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["angular",{"_index":420,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["angular/common",{"_index":682,"title":{},"body":{"modules/JanusModule.html":{},"dependencies.html":{}}}],["angular/core",{"_index":36,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{},"injectables/WebrtcService.html":{},"dependencies.html":{},"index.html":{}}}],["angular/forms",{"_index":523,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{}}}],["angularincluding",{"_index":1630,"title":{},"body":{"index.html":{}}}],["another",{"_index":129,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["answerremotefeedjsep(jsep",{"_index":1322,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["anyone",{"_index":1591,"title":{},"body":{"index.html":{}}}],["anything",{"_index":762,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["anytime",{"_index":1026,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["api",{"_index":1639,"title":{},"body":{"index.html":{}}}],["app",{"_index":1520,"title":{},"body":{"index.html":{}}}],["app.component.scss",{"_index":1634,"title":{},"body":{"index.html":{}}}],["appcomponent",{"_index":1635,"title":{},"body":{"index.html":{}}}],["application",{"_index":1559,"title":{},"body":{"index.html":{}}}],["appropriate",{"_index":1595,"title":{},"body":{"index.html":{}}}],["arg1",{"_index":1291,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["arg2",{"_index":1289,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["around",{"_index":1185,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["array",{"_index":1723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["aspect",{"_index":1586,"title":{},"body":{"index.html":{}}}],["aspectratio",{"_index":435,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["assign",{"_index":768,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["assigned",{"_index":587,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["assuming",{"_index":309,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["async",{"_index":540,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{}}}],["attach",{"_index":601,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["attach_failed",{"_index":576,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["attach_success",{"_index":1679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["attached",{"_index":289,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["attaching",{"_index":575,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["attachmediastream(elemid",{"_index":1473,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["attachremotefeed",{"_index":131,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["attachremotefeedevent",{"_index":1,"title":{"interfaces/AttachRemoteFeedEvent.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["attachremotestream",{"_index":284,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["attachvideoroom(url",{"_index":1309,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["attempts",{"_index":184,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["attribute",{"_index":1418,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["audio",{"_index":63,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["audio/video",{"_index":649,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["audio_codec",{"_index":610,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["audio_level_average",{"_index":633,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["audioboxcomponent",{"_index":135,"title":{"components/AudioBoxComponent.html":{}},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["audiocontext",{"_index":1354,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["audiodevice",{"_index":526,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["audiodeviceid",{"_index":50,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["audiodevices",{"_index":1218,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["audiodevices.length",{"_index":1222,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["audioid",{"_index":203,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["audioinput",{"_index":551,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"injectables/WebrtcService.html":{}}}],["audiooutput",{"_index":555,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"injectables/WebrtcService.html":{}}}],["audiorecv",{"_index":1462,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["audiosend",{"_index":1326,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["audiotrack",{"_index":1424,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["authentication",{"_index":1622,"title":{},"body":{"index.html":{}}}],["auto",{"_index":1108,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["automatically",{"_index":286,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["autoplay",{"_index":1085,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["available",{"_index":124,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["availableaudiodevices",{"_index":503,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["availablespeakerdevices",{"_index":504,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["availablevideodevices",{"_index":505,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["average",{"_index":628,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["await",{"_index":544,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["away",{"_index":255,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["back",{"_index":590,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["backend",{"_index":637,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["background",{"_index":477,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["bars",{"_index":1383,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["based",{"_index":1596,"title":{},"body":{"index.html":{}}}],["before",{"_index":818,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{}}}],["begin",{"_index":300,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["being",{"_index":606,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["believe",{"_index":1544,"title":{},"body":{"index.html":{}}}],["belongs",{"_index":33,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["below",{"_index":712,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["better",{"_index":429,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["between",{"_index":939,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["bisect",{"_index":442,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["bit",{"_index":426,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["bitrate",{"_index":1007,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["black",{"_index":484,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["block",{"_index":948,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["blocker",{"_index":993,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["body",{"_index":1330,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["body.appendchild(videoelement",{"_index":1392,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["boolean",{"_index":94,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["bootstrap",{"_index":670,"title":{},"body":{"modules/JanusModule.html":{},"overview.html":{}}}],["border",{"_index":481,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["both",{"_index":890,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["box",{"_index":156,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["box'},{'name",{"_index":225,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["box.component",{"_index":690,"title":{},"body":{"modules/JanusModule.html":{}}}],["box.component.html",{"_index":160,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["box.component.scss",{"_index":158,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["box.component.scss,../../styles/video",{"_index":1010,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts",{"_index":143,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["box.component.ts:133",{"_index":1031,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:166",{"_index":1025,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:197",{"_index":1035,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:20",{"_index":181,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["box.component.ts:206",{"_index":1029,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:211",{"_index":1028,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:26",{"_index":173,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["box.component.ts:29",{"_index":188,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["box.component.ts:41",{"_index":169,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["box.component.ts:45",{"_index":1018,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:48",{"_index":1017,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:54",{"_index":1016,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:57",{"_index":1040,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:64",{"_index":1019,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:68",{"_index":1023,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:71",{"_index":183,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["box.component.ts:80",{"_index":1036,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box.component.ts:89",{"_index":1015,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["box/audio",{"_index":142,"title":{},"body":{"components/AudioBoxComponent.html":{},"modules/JanusModule.html":{}}}],["box/video",{"_index":697,"title":{},"body":{"modules/JanusModule.html":{},"components/VideoBoxComponent.html":{}}}],["break",{"_index":465,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{}}}],["broadcast",{"_index":761,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["browse",{"_index":1675,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1202,"title":{},"body":{"injectables/WebrtcService.html":{},"modules.html":{}}}],["browsers",{"_index":1417,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["bug",{"_index":1405,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["build",{"_index":1526,"title":{},"body":{"index.html":{}}}],["builder",{"_index":509,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["building",{"_index":1527,"title":{},"body":{"index.html":{}}}],["burden",{"_index":1610,"title":{},"body":{"index.html":{}}}],["button",{"_index":1030,"title":{},"body":{"components/VideoBoxComponent.html":{},"index.html":{}}}],["buttons",{"_index":1662,"title":{},"body":{"index.html":{}}}],["bytes",{"_index":1722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["calculatedwidth",{"_index":434,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["calculation",{"_index":406,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["call",{"_index":926,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["callback",{"_index":320,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["called",{"_index":17,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["calling",{"_index":294,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["camera",{"_index":77,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{}}}],["camera/microphone",{"_index":1594,"title":{},"body":{"index.html":{}}}],["canvas",{"_index":59,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["canvascontext",{"_index":1362,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.canvas.height",{"_index":1341,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.canvas.width",{"_index":1339,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.drawimage",{"_index":1349,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.drawimage(videoelement",{"_index":1337,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.fillrect(0",{"_index":1346,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.fillstyle",{"_index":1344,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.restore",{"_index":1350,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.save",{"_index":1347,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvascontext.translate(centerx",{"_index":1348,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvaselement",{"_index":1402,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvaselement.capturestream",{"_index":1409,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvaselement.getcontext('2d",{"_index":1363,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvaselement.height",{"_index":1423,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvaselement.width",{"_index":1422,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvasheight",{"_index":1379,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvasid",{"_index":87,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["canvasstream",{"_index":1408,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvasstream.addtrack(videostream.getaudiotracks()[0",{"_index":1427,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["canvaswidth",{"_index":1378,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["capture",{"_index":52,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["captured",{"_index":889,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["capturestream",{"_index":1406,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["case",{"_index":114,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["cases",{"_index":81,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["catch((error",{"_index":1450,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["ccc",{"_index":953,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["center",{"_index":474,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["centerx",{"_index":1338,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["centery",{"_index":1340,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["change",{"_index":178,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["changed",{"_index":1598,"title":{},"body":{"index.html":{}}}],["changedetection",{"_index":151,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["changedetectionstrategy",{"_index":190,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["changedetectionstrategy.onpush",{"_index":152,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["changedetector",{"_index":277,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{}}}],["changedetectorref",{"_index":275,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{}}}],["changes",{"_index":316,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["changes.component.firstchange",{"_index":1136,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["changes.remotefeed.currentvalue.slowlink",{"_index":1058,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["changes.remotefeed.previousvalue",{"_index":1056,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["changes.remotefeed.previousvalue.slowlink",{"_index":1057,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["changes[key].firstchange",{"_index":844,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["changing",{"_index":498,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"index.html":{}}}],["checking",{"_index":1032,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["chrome",{"_index":179,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{},"index.html":{}}}],["class",{"_index":195,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["clean",{"_index":1254,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["cleanup",{"_index":1712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cleanuplocalstream",{"_index":1263,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["clear",{"_index":1177,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["clearmediastream",{"_index":1168,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["clearmediastream(stream",{"_index":1174,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["click",{"_index":1081,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["client",{"_index":1557,"title":{},"body":{"index.html":{}}}],["clients",{"_index":1525,"title":{},"body":{"index.html":{}}}],["cluster_janusmodule",{"_index":673,"title":{},"body":{"modules/JanusModule.html":{},"overview.html":{}}}],["cluster_janusmodule_declarations",{"_index":674,"title":{},"body":{"modules/JanusModule.html":{},"overview.html":{}}}],["cluster_janusmodule_exports",{"_index":675,"title":{},"body":{"modules/JanusModule.html":{},"overview.html":{}}}],["code",{"_index":594,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["collected",{"_index":127,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["color",{"_index":478,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["combinelatest",{"_index":785,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["comes",{"_index":593,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{}}}],["common",{"_index":831,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["commonmodule",{"_index":681,"title":{},"body":{"modules/JanusModule.html":{}}}],["comms",{"_index":852,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["competitive",{"_index":1535,"title":{},"body":{"index.html":{}}}],["complete",{"_index":940,"title":{},"body":{"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{}}}],["component",{"_index":109,"title":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"index.html":{}}}],["component_template",{"_index":224,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["componentclass",{"_index":1137,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["componentfactory",{"_index":1139,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["componentfactoryresolver",{"_index":1116,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["componentref",{"_index":1132,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["components",{"_index":136,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["components/audio",{"_index":689,"title":{},"body":{"modules/JanusModule.html":{}}}],["components/default",{"_index":691,"title":{},"body":{"modules/JanusModule.html":{}}}],["components/self",{"_index":693,"title":{},"body":{"modules/JanusModule.html":{}}}],["components/video",{"_index":696,"title":{},"body":{"modules/JanusModule.html":{}}}],["compute",{"_index":398,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["computes",{"_index":306,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["computespeakermodedimensions(aspectratio",{"_index":432,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["computevideowidth",{"_index":268,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["computevideowidth(numremotevideos",{"_index":304,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["condition",{"_index":937,"title":{},"body":{"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{}}}],["conditions",{"_index":824,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["configuration",{"_index":638,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["configure",{"_index":1465,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["configured",{"_index":1522,"title":{},"body":{"index.html":{}}}],["connect",{"_index":882,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["connection",{"_index":13,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["connections",{"_index":1574,"title":{},"body":{"index.html":{}}}],["consent",{"_index":1710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consent_dialog",{"_index":1683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consentdialog(on",{"_index":1279,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["consider",{"_index":825,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["console.log('error",{"_index":1334,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["console.log('ice",{"_index":1290,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["console.log('is",{"_index":456,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["console.log('searching",{"_index":466,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["console.log('switching",{"_index":1097,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["console.log('warning",{"_index":1236,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["console.log('would",{"_index":1488,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["const",{"_index":207,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["constraints",{"_index":1213,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["constructor",{"_index":165,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{},"injectables/WebrtcService.html":{}}}],["constructor(changedetector",{"_index":274,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{}}}],["constructor(componentfactoryresolver",{"_index":1115,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["constructor(janusservice",{"_index":166,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["constructor(janusstore",{"_index":728,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["constructor(public",{"_index":1161,"title":{},"body":{"directives/VideoRoomWrapperDirective.html":{}}}],["constructor(viewcontainerref",{"_index":1158,"title":{},"body":{"directives/VideoRoomWrapperDirective.html":{}}}],["container",{"_index":795,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["containers/device",{"_index":687,"title":{},"body":{"modules/JanusModule.html":{}}}],["containers/janus",{"_index":684,"title":{},"body":{"modules/JanusModule.html":{}}}],["content",{"_index":473,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["core",{"_index":1567,"title":{},"body":{"index.html":{}}}],["coupled",{"_index":1646,"title":{},"body":{"index.html":{}}}],["create",{"_index":1310,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["create/edit/delete",{"_index":1616,"title":{},"body":{"index.html":{}}}],["created",{"_index":1180,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["createoffer",{"_index":1460,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["createstreamandoffer",{"_index":1441,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["creating",{"_index":913,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["credential",{"_index":663,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["crop",{"_index":1386,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["cross",{"_index":1727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":291,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["currentdevices",{"_index":906,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["currently",{"_index":514,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{}}}],["currentremotefeeds",{"_index":326,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["currentremotefeeds.filter((x",{"_index":386,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["currentsubstream",{"_index":608,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"miscellaneous/variables.html":{}}}],["cursor",{"_index":957,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["custom",{"_index":111,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["customer",{"_index":108,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["customize",{"_index":1656,"title":{},"body":{"index.html":{}}}],["data",{"_index":10,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"miscellaneous/variables.html":{}}}],["debounce",{"_index":348,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["debug",{"_index":1242,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["declarations",{"_index":669,"title":{},"body":{"modules/JanusModule.html":{},"index.html":{},"overview.html":{}}}],["decorators",{"_index":1128,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["default",{"_index":48,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["defaultvideoroomcomponent",{"_index":226,"title":{"components/DefaultVideoRoomComponent.html":{}},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":168,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{},"injectables/WebrtcService.html":{}}}],["demo",{"_index":1633,"title":{},"body":{"index.html":{}}}],["demos",{"_index":1552,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":668,"title":{"dependencies.html":{}},"body":{"modules/JanusModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["depending",{"_index":287,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["deploy",{"_index":751,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["deploying",{"_index":714,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["deployment",{"_index":1624,"title":{},"body":{"index.html":{}}}],["description",{"_index":9,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["desired",{"_index":281,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"injectables/WebrtcService.html":{}}}],["destroy",{"_index":360,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["destroyed",{"_index":1314,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["detached",{"_index":1684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["details",{"_index":656,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["detection",{"_index":421,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["determines",{"_index":1189,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["determining",{"_index":1039,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["developer",{"_index":1565,"title":{},"body":{"index.html":{}}}],["developers",{"_index":1548,"title":{},"body":{"index.html":{}}}],["development",{"_index":1671,"title":{},"body":{"index.html":{}}}],["device",{"_index":70,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["device.kind",{"_index":550,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"injectables/WebrtcService.html":{}}}],["device.label",{"_index":556,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["deviceid",{"_index":938,"title":{},"body":{"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{}}}],["devices",{"_index":37,"title":{"interfaces/Devices.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["devices(devices",{"_index":197,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["devices.filter((device",{"_index":1219,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["devices.speakerdeviceid",{"_index":218,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["deviceselectorcomponent",{"_index":228,"title":{"components/DeviceSelectorComponent.html":{}},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["devicesform",{"_index":506,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["devicesinitialized",{"_index":907,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["deviceupdate",{"_index":508,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["dialog",{"_index":1711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["different",{"_index":98,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["directive",{"_index":222,"title":{"directives/VideoRoomWrapperDirective.html":{}},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{},"index.html":{},"overview.html":{}}}],["directives",{"_index":238,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{}}}],["directly",{"_index":743,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["directs",{"_index":88,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["display",{"_index":247,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["displayname",{"_index":609,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["displays",{"_index":248,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["div",{"_index":480,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["div.display",{"_index":1102,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["div.filter",{"_index":954,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["div.form",{"_index":558,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["div.interior",{"_index":973,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["div.loading",{"_index":992,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["div.maximize",{"_index":1107,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["div.overlay",{"_index":976,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["div.self",{"_index":974,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["div.speaker",{"_index":485,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["div.video",{"_index":467,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["docs",{"_index":660,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["document.createelement('video",{"_index":1401,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["document.getelementbyid([canvasid",{"_index":84,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["document.getelementbyid(canvasid",{"_index":1403,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["document.getelementbyid(elemid",{"_index":1474,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["document.getelementsbytagname('body')[0",{"_index":1391,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["documentation",{"_index":1551,"title":{},"body":{"index.html":{}}}],["documented",{"_index":1638,"title":{},"body":{"index.html":{}}}],["doesn't",{"_index":115,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["doing",{"_index":1453,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["dom",{"_index":139,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["don't",{"_index":635,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["donations",{"_index":1668,"title":{},"body":{"index.html":{}}}],["done",{"_index":285,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["dragon",{"_index":922,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["draw(canvascontext",{"_index":1336,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["drawing",{"_index":67,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["drawloopactive",{"_index":1232,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["dropping",{"_index":1728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dynamic",{"_index":1200,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["dynamically",{"_index":177,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/VideoBoxComponent.html":{},"index.html":{}}}],["e.g",{"_index":1198,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["each",{"_index":18,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{}}}],["easily",{"_index":705,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["easy",{"_index":1519,"title":{},"body":{"index.html":{}}}],["edit",{"_index":1532,"title":{},"body":{"index.html":{}}}],["element",{"_index":60,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["elementref",{"_index":192,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["elements",{"_index":250,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"index.html":{}}}],["embed",{"_index":706,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["emit",{"_index":260,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["emitremotefeeds(remotefeeds",{"_index":848,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["emits",{"_index":775,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{}}}],["emitted",{"_index":41,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["emitting",{"_index":283,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["enabled",{"_index":1523,"title":{},"body":{"index.html":{}}}],["encountered",{"_index":777,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["engineering",{"_index":1541,"title":{},"body":{"index.html":{}}}],["enlarged",{"_index":1579,"title":{},"body":{"index.html":{}}}],["ensures",{"_index":814,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["entire",{"_index":839,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["enum",{"_index":572,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["enumerations",{"_index":1514,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":580,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{}}}],["error('roominfo.state",{"_index":912,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["error(error",{"_index":1277,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["errorcode",{"_index":595,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["errors",{"_index":776,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["estate",{"_index":1582,"title":{},"body":{"index.html":{}}}],["etc",{"_index":1443,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["even",{"_index":82,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["event",{"_index":11,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["eventemitter",{"_index":35,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["events",{"_index":259,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{}}}],["example",{"_index":117,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["exhaustive",{"_index":1614,"title":{},"body":{"index.html":{}}}],["exist",{"_index":79,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["existing",{"_index":280,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["exists",{"_index":598,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{}}}],["expect",{"_index":1304,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["export",{"_index":68,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["exports",{"_index":672,"title":{},"body":{"modules/JanusModule.html":{},"overview.html":{}}}],["factory.each(i",{"_index":1733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["factory.sync.makefactory",{"_index":1732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fail",{"_index":86,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["fallback",{"_index":1577,"title":{},"body":{"index.html":{}}}],["false",{"_index":448,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["family",{"_index":980,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["fatal",{"_index":778,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{}}}],["features",{"_index":1518,"title":{},"body":{"index.html":{}}}],["feed",{"_index":19,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["feed.id",{"_index":1482,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["feed.state",{"_index":382,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{}}}],["feed.video_codec",{"_index":1481,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["feedid",{"_index":1491,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["feeds",{"_index":125,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["feel",{"_index":1665,"title":{},"body":{"index.html":{}}}],["ffffff",{"_index":991,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["field",{"_index":1546,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{},"injectables/WebrtcService.html":{}}}],["fill",{"_index":969,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["find",{"_index":1458,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["findidealwidth",{"_index":439,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["fire",{"_index":1357,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["firefox",{"_index":1404,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["first",{"_index":781,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["fit",{"_index":445,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["fixing",{"_index":1650,"title":{},"body":{"index.html":{}}}],["flex",{"_index":471,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["following",{"_index":1572,"title":{},"body":{"index.html":{}}}],["font",{"_index":967,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["form",{"_index":491,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["format",{"_index":745,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["formbuilder",{"_index":510,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["found",{"_index":1647,"title":{},"body":{"index.html":{}}}],["framerate",{"_index":1352,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["fromevent",{"_index":342,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["fromevent(window",{"_index":371,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["frommodels",{"_index":1206,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.attach_success",{"_index":1276,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.consent_dialog",{"_index":1280,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.media_state",{"_index":1283,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.on_cleanup",{"_index":1308,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.on_local_stream",{"_index":1301,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.on_message",{"_index":1295,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.on_remote_cleanup",{"_index":1496,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.on_remote_feed_message",{"_index":1485,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.on_remote_remote_stream",{"_index":1495,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.on_remote_stream",{"_index":1306,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.remote_feed_slow_link",{"_index":1490,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.remote_feed_webrtc_state",{"_index":1487,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["frommodels.webrtc_state",{"_index":1287,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["full",{"_index":65,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["fully",{"_index":1568,"title":{},"body":{"index.html":{}}}],["function",{"_index":1366,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["functional",{"_index":1569,"title":{},"body":{"index.html":{}}}],["functionality",{"_index":1660,"title":{},"body":{"index.html":{}}}],["functions",{"_index":1166,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["fund",{"_index":1673,"title":{},"body":{"index.html":{}}}],["future",{"_index":1457,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["fuzzy",{"_index":1456,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["gateway",{"_index":1571,"title":{},"body":{"index.html":{}}}],["getcontext",{"_index":1407,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["getdefaultdevices",{"_index":1169,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["getdevices",{"_index":541,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["getpublishing",{"_index":339,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["getting",{"_index":1516,"title":{"index.html":{}},"body":{}}],["getusermedia",{"_index":1170,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["getusermedia(audiodeviceid",{"_index":1183,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["give",{"_index":1658,"title":{},"body":{"index.html":{}}}],["given",{"_index":1066,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["gives",{"_index":1534,"title":{},"body":{"index.html":{}}}],["goal",{"_index":1381,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["good",{"_index":641,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["granted",{"_index":816,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["great",{"_index":1553,"title":{},"body":{"index.html":{}}}],["grid",{"_index":332,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["grow",{"_index":563,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["hack",{"_index":1359,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["handle",{"_index":827,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["handle.createanswer",{"_index":1324,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["handle.send({message",{"_index":1332,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["handled",{"_index":1588,"title":{},"body":{"index.html":{}}}],["handleremotejsep(jsep",{"_index":1320,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["handles",{"_index":1228,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["happen",{"_index":1305,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["happy",{"_index":1669,"title":{},"body":{"index.html":{}}}],["haven't",{"_index":929,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["height",{"_index":433,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["help",{"_index":1547,"title":{},"body":{"index.html":{}}}],["helper",{"_index":1037,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["helps",{"_index":1531,"title":{},"body":{"index.html":{}}}],["here",{"_index":748,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["high",{"_index":704,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["higher",{"_index":256,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["higher/lower",{"_index":1006,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["highly",{"_index":749,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["html",{"_index":78,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["http",{"_index":1573,"title":{},"body":{"index.html":{}}}],["http(s",{"_index":736,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["https://developer.mozilla.org/en",{"_index":658,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["https://janus.conf.meetecho.com/docs/videoroom.html|janus",{"_index":790,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["https://janus.conf.meetecho.com/janus",{"_index":738,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["httpurl",{"_index":721,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["i'm",{"_index":1452,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["i.fas",{"_index":1105,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["i.tostring",{"_index":1734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ice",{"_index":1599,"title":{},"body":{"index.html":{}}}],["iceserver",{"_index":654,"title":{"interfaces/IceServer.html":{}},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{}}}],["iceservers",{"_index":722,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["icestate(arg1",{"_index":1288,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["id",{"_index":71,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["ideal",{"_index":307,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["ids",{"_index":1182,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["iff",{"_index":290,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["ignore",{"_index":644,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["ignored",{"_index":120,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["img",{"_index":955,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["img.active",{"_index":949,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["img:hover",{"_index":952,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["implement",{"_index":112,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["implementation",{"_index":246,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["implemented",{"_index":622,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["implementing",{"_index":731,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["implements",{"_index":147,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"index.html":{}}}],["import",{"_index":34,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["important",{"_index":965,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["imports",{"_index":701,"title":{},"body":{"modules/JanusModule.html":{},"index.html":{}}}],["improvement",{"_index":1545,"title":{},"body":{"index.html":{}}}],["include",{"_index":1621,"title":{},"body":{"index.html":{}}}],["included",{"_index":1187,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["includes",{"_index":1524,"title":{},"body":{"index.html":{}}}],["incorporates",{"_index":1528,"title":{},"body":{"index.html":{}}}],["index",{"_index":22,"title":{"index.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{},"injectables/WebrtcService.html":{}}}],["information",{"_index":617,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["init",{"_index":1237,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["init(iceservers",{"_index":1233,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["initial",{"_index":405,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["initialize",{"_index":799,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["initialized",{"_index":574,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{}}}],["initializing",{"_index":573,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["initialstate",{"_index":1685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectable",{"_index":1162,"title":{"injectables/WebrtcService.html":{}},"body":{"injectables/WebrtcService.html":{},"overview.html":{}}}],["injectables",{"_index":1163,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["input",{"_index":189,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"index.html":{}}}],["input/output",{"_index":733,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["inputs",{"_index":163,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["inputs/outputs",{"_index":1637,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1625,"title":{},"body":{"index.html":{}}}],["installed",{"_index":1627,"title":{},"body":{"index.html":{}}}],["instance",{"_index":208,"title":{},"body":{"components/AudioBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["instance._attachvideoroomhelper(subscriber",{"_index":1313,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance._createvideoelement(canvasid",{"_index":1448,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance._get_random_string",{"_index":1299,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.answerremotefeedjsep(jsep",{"_index":1486,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.createstreamandoffer",{"_index":1459,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.draw(canvascontext",{"_index":1368,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.drawloopactive",{"_index":1361,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.handle",{"_index":1274,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.handle.send({message",{"_index":1466,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.handleremotejsep(jsep",{"_index":1297,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.janus",{"_index":1311,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.janus.attach",{"_index":1477,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.localstream",{"_index":1447,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.opaqueid",{"_index":1478,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.publishwebrtcstate",{"_index":1286,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.remotehandles[feed.id",{"_index":1479,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.remotehandles[feed.id].send({message",{"_index":1484,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.remotehandles[feed.id].videocodec",{"_index":1480,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.streams[streamid",{"_index":1300,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.videoelement",{"_index":1449,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instance.webrtcservice.getusermedia(audiodeviceid",{"_index":1445,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["instead",{"_index":92,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["integer",{"_index":105,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["interaction",{"_index":1620,"title":{},"body":{"index.html":{}}}],["interesting",{"_index":1529,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{},"overview.html":{}}}],["intermittent",{"_index":1451,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["internal",{"_index":199,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["internally",{"_index":1666,"title":{},"body":{"index.html":{}}}],["interval",{"_index":345,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["interval(100).pipe",{"_index":1438,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["interval(1000).pipe",{"_index":1062,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["interval(500",{"_index":401,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["intimate",{"_index":1566,"title":{},"body":{"index.html":{}}}],["ios",{"_index":1604,"title":{},"body":{"index.html":{}}}],["iphone",{"_index":1191,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["ismuted",{"_index":723,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["ismuted(muted",{"_index":791,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["isn't",{"_index":634,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["issupporteddevice",{"_index":1171,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["isvalidwidth",{"_index":446,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["isvalidwidth(ptr",{"_index":463,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["it's",{"_index":599,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["item",{"_index":1426,"title":{},"body":{"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["item.tostring(36",{"_index":1730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["items",{"_index":997,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"index.html":{}}}],["iterations",{"_index":459,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["itself",{"_index":1663,"title":{},"body":{"index.html":{}}}],["janus",{"_index":154,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["janus.attachmediastream(element",{"_index":1475,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["janus.attachmediastream(videoelement",{"_index":1413,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["janus.init",{"_index":1241,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["janus.iswebrtcsupported",{"_index":1245,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["janus.models",{"_index":39,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["janus.plugin.videoroom",{"_index":1271,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["januserror",{"_index":727,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["januserrors",{"_index":789,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["januserrors[roominfo.errorcode].message",{"_index":866,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["janusmodule",{"_index":666,"title":{"modules/JanusModule.html":{}},"body":{"modules/JanusModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["janusrole",{"_index":38,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"miscellaneous/enumerations.html":{}}}],["janusrole.publisher",{"_index":757,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["janusserverurl",{"_index":797,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["janusservice",{"_index":167,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["janusservice.attachmediastream",{"_index":295,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["janusstore",{"_index":718,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["janusvideoroomcomponent",{"_index":230,"title":{"components/JanusVideoroomComponent.html":{}},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["janusvideoroomwrapper",{"_index":240,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{}}}],["join",{"_index":1318,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["joined",{"_index":579,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"miscellaneous/enumerations.html":{}}}],["joining",{"_index":577,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["jsep",{"_index":1294,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["jsepbody",{"_index":1333,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["justify",{"_index":472,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["keep",{"_index":1003,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["keeping",{"_index":1380,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["key",{"_index":843,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["kick",{"_index":1078,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["know",{"_index":627,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{}}}],["knowing",{"_index":642,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["knowledge",{"_index":1563,"title":{},"body":{"index.html":{}}}],["label",{"_index":564,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["landscape",{"_index":1387,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["largest",{"_index":444,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["last",{"_index":647,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["leave",{"_index":1249,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["led",{"_index":1543,"title":{},"body":{"index.html":{}}}],["left",{"_index":978,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["legend",{"_index":221,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"overview.html":{}}}],["less",{"_index":1550,"title":{},"body":{"index.html":{}}}],["letter",{"_index":988,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["level",{"_index":257,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["li",{"_index":947,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["library",{"_index":1517,"title":{},"body":{"index.html":{}}}],["line",{"_index":987,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["link",{"_index":657,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["list",{"_index":123,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["listdevices",{"_index":1172,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["listen",{"_index":1145,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["listener",{"_index":653,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["lives",{"_index":1644,"title":{},"body":{"index.html":{}}}],["load",{"_index":801,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["loadcomponent",{"_index":1113,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["loaded",{"_index":930,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["loading",{"_index":1101,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["local",{"_index":47,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"miscellaneous/variables.html":{}}}],["localdevices",{"_index":201,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["locally",{"_index":126,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["localstream",{"_index":1230,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["localstreamid",{"_index":596,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["look",{"_index":1664,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1353,"title":{},"body":{"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["lot",{"_index":821,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["love",{"_index":826,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["low",{"_index":1471,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["machine",{"_index":571,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["macos",{"_index":1603,"title":{},"body":{"index.html":{}}}],["majority",{"_index":1540,"title":{},"body":{"index.html":{}}}],["make",{"_index":1244,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["makes",{"_index":639,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["making",{"_index":1651,"title":{},"body":{"index.html":{}}}],["manually",{"_index":83,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["many",{"_index":708,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["margin",{"_index":946,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["match",{"_index":765,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["matches",{"_index":73,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["matching",{"_index":133,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{},"injectables/WebrtcService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["materialized",{"_index":293,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["math.ceil(numvideos",{"_index":453,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["math.ceil(testwidth",{"_index":455,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["math.floor((maxfits",{"_index":461,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["math.floor(viewportwidth",{"_index":451,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["math.min(numvideos",{"_index":450,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["math.random().tostring(36).substring(2",{"_index":1267,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["maxfits",{"_index":458,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["maximize",{"_index":1014,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["maximum",{"_index":1580,"title":{},"body":{"index.html":{}}}],["mdn",{"_index":664,"title":{},"body":{"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{}}}],["meaningful",{"_index":623,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["media",{"_index":715,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["media_state",{"_index":1687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mediastate(medium",{"_index":1282,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["mediastream",{"_index":1175,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["medium",{"_index":1284,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["message",{"_index":591,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":150,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{}}}],["methods",{"_index":161,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["microphone",{"_index":72,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{}}}],["minimal",{"_index":711,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["minor",{"_index":921,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["minover",{"_index":462,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["miscellaneous",{"_index":1513,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mismatch",{"_index":1542,"title":{},"body":{"index.html":{}}}],["mode",{"_index":266,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["models",{"_index":353,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["models/janus",{"_index":1207,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["models/janus.models",{"_index":193,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["models/video",{"_index":786,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["module",{"_index":665,"title":{"modules/JanusModule.html":{}},"body":{"modules/JanusModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":667,"title":{"modules.html":{}},"body":{"modules/JanusModule.html":{},"modules.html":{}}}],["moment",{"_index":570,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"dependencies.html":{},"index.html":{}}}],["moment.moment",{"_index":616,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["momentinstalling",{"_index":1629,"title":{},"body":{"index.html":{}}}],["monitor",{"_index":1054,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["monitoring",{"_index":1038,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["monitorvideoquality",{"_index":1012,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["monitorvideoquality(slowlink",{"_index":1024,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["more",{"_index":655,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["mostly",{"_index":253,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["msg",{"_index":1296,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["multicast",{"_index":102,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["multiple",{"_index":1585,"title":{},"body":{"index.html":{}}}],["mute",{"_index":1372,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["mute(event",{"_index":1373,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["muted",{"_index":597,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["muting",{"_index":1609,"title":{},"body":{"index.html":{}}}],["name",{"_index":171,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["names",{"_index":1590,"title":{},"body":{"index.html":{}}}],["navigator.mediadevices.enumeratedevices",{"_index":1195,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["navigator.mediadevices.getusermedia(constraints",{"_index":1216,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["navigator.mediadevics.enumeratedevices",{"_index":75,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["necessary",{"_index":1074,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["need",{"_index":113,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["needs",{"_index":1077,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["negotiate",{"_index":12,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["network",{"_index":1597,"title":{},"body":{"index.html":{}}}],["networks",{"_index":1652,"title":{},"body":{"index.html":{}}}],["never",{"_index":1489,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["new",{"_index":331,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newdevices",{"_index":920,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["newdevices.audiodeviceid",{"_index":934,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["newdevices.videodeviceid",{"_index":932,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["newsubstream",{"_index":1092,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["ngafterviewinit",{"_index":211,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["ngmodule",{"_index":680,"title":{},"body":{"modules/JanusModule.html":{},"index.html":{}}}],["ngonchanges(changes",{"_index":837,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["ngondestroy",{"_index":373,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["ngoninit",{"_index":205,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["ngrx/component",{"_index":1509,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["noise",{"_index":629,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["non",{"_index":1613,"title":{},"body":{"index.html":{}}}],["none",{"_index":1243,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["normal",{"_index":986,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["note",{"_index":618,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["notes",{"_index":646,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["nothing",{"_index":747,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["null",{"_index":857,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":107,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["numcolumns",{"_index":449,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["numeric",{"_index":767,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["numremotevideos",{"_index":317,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["numrows",{"_index":452,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["numvideos",{"_index":411,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["numvideotracks",{"_index":604,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["nvid",{"_index":155,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["object",{"_index":32,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["object.keys(remotefeeds).map(id",{"_index":859,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["objects",{"_index":336,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["observable",{"_index":343,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["of(true",{"_index":1239,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["older",{"_index":1193,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["on_cleanup",{"_index":1688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_data",{"_index":1689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_data_open",{"_index":1690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_local_stream",{"_index":1691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_message",{"_index":1692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_remote_cleanup",{"_index":1693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_remote_feed_message",{"_index":1694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_remote_local_stream",{"_index":1695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_remote_remote_stream",{"_index":1696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on_remote_stream",{"_index":1697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onattachremotefeed(event",{"_index":885,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["once",{"_index":578,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["onchanges",{"_index":717,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["oncleanup",{"_index":1307,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["ondestroy",{"_index":263,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["ondevicechange",{"_index":162,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["ondevicechange(devices",{"_index":182,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["ondeviceschange",{"_index":928,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["ondeviceschange(previousdevices",{"_index":919,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["one",{"_index":737,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["oninit",{"_index":148,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["onlocalstream(stream",{"_index":1298,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["onmaximize",{"_index":269,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["onmaximize(remotefeed",{"_index":318,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["onmessage(msg",{"_index":1293,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["onplay",{"_index":1071,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["onpublishownfeed",{"_index":270,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["onpublishownfeed(event",{"_index":323,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{}}}],["onremotefeedschange",{"_index":271,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["onremotefeedschange(previousremotefeeds",{"_index":325,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["onremotestream(stream",{"_index":1303,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["onrequestsubstream",{"_index":272,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["onrequestsubstream(event",{"_index":329,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{}}}],["opaqueid",{"_index":1224,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["open",{"_index":1713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["opensans",{"_index":981,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["operations",{"_index":1617,"title":{},"body":{"index.html":{}}}],["option",{"_index":495,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["optional",{"_index":172,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{},"injectables/WebrtcService.html":{}}}],["options",{"_index":493,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{}}}],["optionsopen",{"_index":1044,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["order",{"_index":261,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["orientation",{"_index":1584,"title":{},"body":{"index.html":{}}}],["oscillator",{"_index":1355,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["otherroomid",{"_index":592,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["otherwise",{"_index":820,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["out",{"_index":678,"title":{},"body":{"modules/JanusModule.html":{},"overview.html":{}}}],["output",{"_index":175,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["outputs",{"_index":273,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["outside",{"_index":419,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["overlays",{"_index":1657,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1676,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":998,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["package",{"_index":1504,"title":{"dependencies.html":{}},"body":{"index.html":{}}}],["padding",{"_index":560,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["page",{"_index":1641,"title":{},"body":{"index.html":{}}}],["pain",{"_index":1726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["param",{"_index":1212,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["parameters",{"_index":170,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{},"injectables/WebrtcService.html":{}}}],["part",{"_index":1530,"title":{},"body":{"index.html":{}}}],["parts",{"_index":1608,"title":{},"body":{"index.html":{}}}],["passed",{"_index":589,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["payload",{"_index":1281,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["peer",{"_index":1507,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["performance",{"_index":1005,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["periodic",{"_index":1073,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["permissions",{"_index":817,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["phones",{"_index":1199,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["pick",{"_index":423,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"index.html":{}}}],["picking",{"_index":494,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["pin",{"_index":724,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["pin_required",{"_index":756,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["pins",{"_index":1578,"title":{},"body":{"index.html":{}}}],["pipe",{"_index":400,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["platform",{"_index":1197,"title":{},"body":{"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["platforms",{"_index":1600,"title":{},"body":{"index.html":{}}}],["play",{"_index":145,"title":{},"body":{"components/AudioBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["playing",{"_index":144,"title":{},"body":{"components/AudioBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["plugin",{"_index":1226,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["pluginhandle",{"_index":1275,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["plus",{"_index":1027,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["pointer",{"_index":958,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["portrait",{"_index":1385,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["position",{"_index":469,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["possible",{"_index":600,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["practical",{"_index":621,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["prefer",{"_index":1576,"title":{},"body":{"index.html":{}}}],["prevents",{"_index":962,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["previousdevices",{"_index":931,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["previousdevices.audiodeviceid",{"_index":935,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["previousdevices.videodeviceid",{"_index":933,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["previously",{"_index":1179,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["previousremotefeeds",{"_index":328,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["private",{"_index":200,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["private_id",{"_index":586,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{}}}],["privateid",{"_index":588,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["privateremotefeeds",{"_index":361,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["probably",{"_index":830,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["product",{"_index":288,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"index.html":{}}}],["promise",{"_index":542,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{}}}],["properly",{"_index":1521,"title":{},"body":{"index.html":{}}}],["properties",{"_index":23,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{}}}],["provided",{"_index":110,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["providedin",{"_index":1209,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["providers",{"_index":671,"title":{},"body":{"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"overview.html":{}}}],["ptr",{"_index":460,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["ptype",{"_index":1319,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["public",{"_index":202,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"directives/VideoRoomWrapperDirective.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["publish",{"_index":118,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["published",{"_index":61,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["publisher",{"_index":100,"title":{"interfaces/Publisher.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["publisher's",{"_index":130,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{}}}],["publishers",{"_index":651,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["publishing",{"_index":46,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{}}}],["publishownfeed",{"_index":40,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["publishownfeedevent",{"_index":69,"title":{"interfaces/PublishOwnFeedEvent.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["publishrequested",{"_index":584,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["publishstate",{"_index":582,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["publishstate.error",{"_index":865,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["publishstate.publishing",{"_index":863,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["publishstate.publishrequested",{"_index":943,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["publishstate.start",{"_index":1720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["publishwebrtcstate",{"_index":1231,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["purposes",{"_index":1046,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["put",{"_index":1611,"title":{},"body":{"index.html":{}}}],["quality",{"_index":1033,"title":{},"body":{"components/VideoBoxComponent.html":{},"index.html":{}}}],["querying",{"_index":1167,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["querylist",{"_index":341,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["race",{"_index":823,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{}}}],["radius",{"_index":959,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["raise",{"_index":898,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["randomstring",{"_index":1041,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["randomstring(16",{"_index":1225,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["ratios",{"_index":1587,"title":{},"body":{"index.html":{}}}],["reactiveformsmodule",{"_index":683,"title":{},"body":{"modules/JanusModule.html":{}}}],["read",{"_index":1592,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":798,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["ready",{"_index":583,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["readyremotefeeds",{"_index":267,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["real",{"_index":1581,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["receive",{"_index":14,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["received",{"_index":607,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{}}}],["recent",{"_index":614,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["recommended",{"_index":750,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["recvonly",{"_index":1328,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["refer",{"_index":713,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["reference",{"_index":245,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["refresh",{"_index":838,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["register",{"_index":1317,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["register(name",{"_index":1316,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["registered",{"_index":941,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["relative",{"_index":470,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["release",{"_index":1667,"title":{},"body":{"index.html":{}}}],["reliability",{"_index":753,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["remote",{"_index":15,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["remote_feed_slow_link",{"_index":1699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remote_feed_webrtc_state",{"_index":1700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remotefeed",{"_index":25,"title":{"interfaces/RemoteFeed.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["remotefeed.displayname",{"_index":1100,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["remotefeed.id",{"_index":389,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["remotefeedfactory",{"_index":1701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remotefeeds",{"_index":119,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"miscellaneous/variables.html":{}}}],["remotefeeds(remotefeeds",{"_index":355,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["remotefeeds.filter((feed",{"_index":849,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["remotefeeds[id",{"_index":860,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["remotefeedsarray",{"_index":858,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["remotefeedstate",{"_index":351,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["remotefeedstate.initialized",{"_index":30,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"miscellaneous/variables.html":{}}}],["remotefeedstate.ready",{"_index":292,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{}}}],["remotehandles",{"_index":1227,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["rendering",{"_index":146,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["renders",{"_index":891,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["repo",{"_index":1643,"title":{},"body":{"index.html":{}}}],["republish",{"_index":1436,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["request",{"_index":97,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["request_substream",{"_index":1703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestanimationframe",{"_index":1356,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["requestanimationframe(step",{"_index":1370,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["requested",{"_index":174,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"miscellaneous/enumerations.html":{}}}],["requestedsubstream",{"_index":605,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["requesting",{"_index":29,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["requestsubstream",{"_index":95,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["requestsubstream(feed",{"_index":1502,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["requestsubstreamevent",{"_index":103,"title":{"interfaces/RequestSubstreamEvent.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["require",{"_index":116,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["required",{"_index":764,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["requires",{"_index":1390,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["requiring",{"_index":1564,"title":{},"body":{"index.html":{}}}],["reset",{"_index":677,"title":{},"body":{"modules/JanusModule.html":{},"overview.html":{}}}],["resetkeys",{"_index":842,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["resize",{"_index":369,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"index.html":{}}}],["resized",{"_index":315,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["resizeobservable",{"_index":359,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["resizing",{"_index":963,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["resources",{"_index":1178,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["response",{"_index":1335,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["responsibility",{"_index":66,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["result",{"_index":132,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{},"injectables/WebrtcService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":134,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{},"injectables/WebrtcService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["ret",{"_index":1729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["retry",{"_index":1454,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["retrycount",{"_index":1442,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["return",{"_index":85,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":74,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["returns",{"_index":185,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["rgba(0,0,0,.5",{"_index":972,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["rgba(0,0,0,0",{"_index":961,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["rgba(255",{"_index":994,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["rgba(53,53,53,.7",{"_index":979,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["right",{"_index":1109,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["role",{"_index":122,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["roles",{"_index":648,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["room",{"_index":7,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["room'},{'name",{"_index":227,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["room.component",{"_index":692,"title":{},"body":{"modules/JanusModule.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["room.component.html",{"_index":265,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.scss",{"_index":264,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts",{"_index":244,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:111",{"_index":334,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:114",{"_index":276,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:134",{"_index":340,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:139",{"_index":319,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:149",{"_index":330,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:154",{"_index":324,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:159",{"_index":327,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:216",{"_index":305,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:47",{"_index":298,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:50",{"_index":296,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:53",{"_index":278,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:63",{"_index":279,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:64",{"_index":338,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:70",{"_index":335,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:74",{"_index":303,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:78",{"_index":302,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.component.ts:82",{"_index":299,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["room.id",{"_index":1331,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["room.privateid",{"_index":1483,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["room/default",{"_index":243,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"modules/JanusModule.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["room/user",{"_index":802,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["roomid",{"_index":585,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["roominfo",{"_index":24,"title":{"interfaces/RoomInfo.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["roominfo.errorcode",{"_index":868,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["roominfo.muted",{"_index":861,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["roominfo.publishstate",{"_index":862,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["roominfo.state",{"_index":870,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["roominfofactory",{"_index":1705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roominfostate",{"_index":352,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"miscellaneous/enumerations.html":{}}}],["roominfostate.attach_failed",{"_index":878,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["roominfostate.attached",{"_index":873,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["roominfostate.initialized",{"_index":871,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["roominfostate.joined",{"_index":899,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["roominfostate.start",{"_index":1719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rooms",{"_index":1618,"title":{},"body":{"index.html":{}}}],["root",{"_index":1210,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["rough",{"_index":1659,"title":{},"body":{"index.html":{}}}],["row",{"_index":559,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["rtcpeerconnection",{"_index":744,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["run",{"_index":1053,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["rxjs",{"_index":347,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["rxjs/operators",{"_index":350,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["safari",{"_index":1389,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["same",{"_index":311,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{}}}],["sample",{"_index":1556,"title":{},"body":{"index.html":{}}}],["save",{"_index":1492,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["scalex",{"_index":971,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["scratch",{"_index":841,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["screen",{"_index":314,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"index.html":{}}}],["search",{"_index":443,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["second",{"_index":1080,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["see",{"_index":645,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["see/hear",{"_index":650,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["select",{"_index":566,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selected",{"_index":515,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector",{"_index":153,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{},"index.html":{}}}],["selector'},{'name",{"_index":229,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["selector.component",{"_index":688,"title":{},"body":{"modules/JanusModule.html":{}}}],["selector.component.html",{"_index":502,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.scss",{"_index":501,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts",{"_index":490,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts:36",{"_index":513,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts:42",{"_index":516,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts:44",{"_index":520,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts:45",{"_index":517,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts:46",{"_index":519,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts:47",{"_index":518,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts:48",{"_index":521,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector.component.ts:49",{"_index":512,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["selector/device",{"_index":489,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{}}}],["self",{"_index":233,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["selfvideobottom",{"_index":368,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["selfvideocomponent",{"_index":232,"title":{"components/SelfVideoComponent.html":{}},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["selfvideoheight",{"_index":390,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["selfvideoright",{"_index":367,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["selfvideowidth",{"_index":394,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["send",{"_index":1593,"title":{},"body":{"index.html":{}}}],["separate",{"_index":916,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["server",{"_index":716,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["server(s",{"_index":752,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["server.models",{"_index":1208,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["server.models.ts",{"_index":1681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["servers",{"_index":742,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["service",{"_index":89,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["services/janus.service",{"_index":194,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["session",{"_index":840,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["set",{"_index":57,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["setdevices(devices",{"_index":187,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["setismuted(muted",{"_index":780,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["setmute(mute",{"_index":1501,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["setremotefeeds(remotefeeds",{"_index":337,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["setspeaker(devices",{"_index":214,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["settimeout",{"_index":879,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["settimeout(step",{"_index":1369,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["setting",{"_index":819,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["setup",{"_index":90,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["setupjanusroom",{"_index":851,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["setupsubscriptions",{"_index":397,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["shared",{"_index":1042,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["sharereplay",{"_index":783,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["sharereplay(1",{"_index":809,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["show",{"_index":492,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"index.html":{}}}],["showdefaultroom",{"_index":796,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["shown",{"_index":496,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["sides",{"_index":1384,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["signalling",{"_index":252,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"index.html":{}}}],["simple",{"_index":1440,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["simulcast",{"_index":1009,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["simulcastmaxbitrates",{"_index":1468,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["site",{"_index":1640,"title":{},"body":{"index.html":{}}}],["situation",{"_index":828,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["size",{"_index":312,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"index.html":{}}}],["skipvideocapture",{"_index":56,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["slow",{"_index":1714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["slow_link",{"_index":1706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["slowlink",{"_index":615,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"miscellaneous/variables.html":{}}}],["slowlink(msg",{"_index":1292,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["small",{"_index":258,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"index.html":{}}}],["smells",{"_index":425,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["smoothly",{"_index":1589,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["solid",{"_index":483,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["solution",{"_index":430,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["someone",{"_index":1655,"title":{},"body":{"index.html":{}}}],["sometimes",{"_index":1076,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["sound",{"_index":1067,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["spacing",{"_index":989,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["span.flex",{"_index":562,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["span.separator",{"_index":1103,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["speaker",{"_index":176,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["speaker/grid",{"_index":1021,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["speakerdevice",{"_index":531,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["speakerdeviceid",{"_index":537,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["speakerdevices",{"_index":1221,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["speakerheight",{"_index":366,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["speakers",{"_index":557,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["speakerwidth",{"_index":365,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["specifications",{"_index":569,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["specified",{"_index":632,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["specify",{"_index":49,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["specifying",{"_index":1570,"title":{},"body":{"index.html":{}}}],["spend",{"_index":1549,"title":{},"body":{"index.html":{}}}],["spent",{"_index":1538,"title":{},"body":{"index.html":{}}}],["spirit",{"_index":1605,"title":{},"body":{"index.html":{}}}],["src/.../index.ts",{"_index":1682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../janus",{"_index":1680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../janus.actions.ts",{"_index":1704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../janus.factories.ts",{"_index":1702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../janus.models.ts",{"_index":1515,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../janus.reducers.ts",{"_index":1686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../random.ts",{"_index":1698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/components/audio",{"_index":141,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["src/lib/components/default",{"_index":242,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["src/lib/components/index.ts",{"_index":1715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/components/self",{"_index":887,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["src/lib/components/video",{"_index":1001,"title":{},"body":{"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{}}}],["src/lib/containers/device",{"_index":488,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["src/lib/containers/index.ts",{"_index":1716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/containers/janus",{"_index":702,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["src/lib/factories/janus.factories.ts",{"_index":1731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/janus.module.ts",{"_index":679,"title":{},"body":{"modules/JanusModule.html":{}}}],["src/lib/models/janus",{"_index":1709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/models/janus.models.ts",{"_index":568,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["src/lib/models/video",{"_index":6,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["src/lib/services/janus.service.ts",{"_index":1164,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["src/lib/services/janus.service.ts:20",{"_index":1173,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["src/lib/services/janus.service.ts:31",{"_index":1184,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["src/lib/services/janus.service.ts:42",{"_index":1194,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["src/lib/services/janus.service.ts:49",{"_index":1181,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["src/lib/services/janus.service.ts:66",{"_index":1196,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["src/lib/services/janus.service.ts:76",{"_index":1188,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["src/lib/services/janus.service.ts:83",{"_index":1176,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["src/lib/shared/random.ts",{"_index":1721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/store/actions/janus.actions.ts",{"_index":1736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/store/reducers/janus.reducers.ts",{"_index":1717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["start",{"_index":45,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{}}}],["start/stop",{"_index":640,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["startdrawingloop(canvaselement",{"_index":1351,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["started",{"_index":710,"title":{"index.html":{}},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["startwith",{"_index":782,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["state",{"_index":31,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["static",{"_index":1130,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["status",{"_index":581,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{}}}],["step",{"_index":1367,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["stepmilliseconds",{"_index":1364,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["still",{"_index":652,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{}}}],["storage",{"_index":1623,"title":{},"body":{"index.html":{}}}],["store",{"_index":1510,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["store/janus.store",{"_index":788,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["stream",{"_index":16,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["stream.getvideotracks",{"_index":1493,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["stream.getvideotracks().length",{"_index":1494,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["stream_id",{"_index":1302,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["streamed",{"_index":282,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["streamid",{"_index":602,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["streaming",{"_index":301,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["streams",{"_index":1008,"title":{},"body":{"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["stretch",{"_index":985,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["string",{"_index":76,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["stun",{"_index":746,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["stun/turn",{"_index":741,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["stun:stun2.l.google.com:19302",{"_index":739,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["style",{"_index":500,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["styles",{"_index":138,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["styles.scss",{"_index":893,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["styles/video",{"_index":903,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["styleurls",{"_index":157,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"index.html":{}}}],["subclassed",{"_index":499,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["subject",{"_index":346,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["subscribe",{"_index":128,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["subscribe((event",{"_index":403,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["subscribe((payload",{"_index":1147,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["subscribe(({roominfo",{"_index":855,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["subscriber",{"_index":1240,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["subscriber.complete",{"_index":1248,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["subscriber.error('webrtc",{"_index":1246,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["subscriber.error(error",{"_index":1278,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["subscriber.next",{"_index":1247,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["subscriber.next(true",{"_index":1467,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["subscribers",{"_index":760,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["subscription",{"_index":344,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["substream",{"_index":104,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["substreamid",{"_index":106,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["substreams",{"_index":99,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["success",{"_index":1312,"title":{},"body":{"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["success(jsep",{"_index":1464,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["success(jsepbody",{"_index":1329,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["success(pluginhandle",{"_index":1273,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["support",{"_index":1670,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supported",{"_index":1190,"title":{},"body":{"injectables/WebrtcService.html":{},"index.html":{}}}],["supports",{"_index":497,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["supportsspeakerselection",{"_index":507,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"injectables/WebrtcService.html":{}}}],["sure",{"_index":427,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["svg",{"_index":1674,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":321,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["switches",{"_index":1360,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["switching",{"_index":1020,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["switchmap",{"_index":784,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["switchsubstream",{"_index":1013,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["switchsubstream(substreamid",{"_index":1034,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["synccomponentdata",{"_index":1114,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["system",{"_index":44,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{}}}],["tabs",{"_index":1358,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["take",{"_index":64,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["takes",{"_index":1079,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["takeuntil",{"_index":349,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["takeuntil(this.destroy",{"_index":402,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["takewhile",{"_index":1204,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["talking",{"_index":625,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["talking/not",{"_index":624,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["tap",{"_index":1203,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["task",{"_index":1055,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["tell",{"_index":43,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["template",{"_index":137,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"index.html":{}}}],["templateurl",{"_index":159,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["tested",{"_index":1601,"title":{},"body":{"index.html":{}}}],["testheight",{"_index":454,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["testing",{"_index":917,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["testwidth",{"_index":447,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["that's",{"_index":829,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["themselves",{"_index":1561,"title":{},"body":{"index.html":{}}}],["then((videostream",{"_index":1446,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["there's",{"_index":428,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{},"index.html":{}}}],["therefore",{"_index":925,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["thing",{"_index":1606,"title":{},"body":{"index.html":{}}}],["this._attachmediastream",{"_index":1051,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this._mutevideo(videoelement",{"_index":1419,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this._publishownfeed(audiodeviceid",{"_index":914,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["this._publishownfeed(newdevices.audiodeviceid",{"_index":944,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["this._setmuted(muted",{"_index":793,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this._setmuted(this.muted",{"_index":864,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this._sizecanvaselement(videosettings.width",{"_index":1420,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this._videoelementsafarihacks(videoelement",{"_index":1412,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.afterviewinitran",{"_index":909,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["this.attachremotefeed.emit",{"_index":383,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.attachremotefeed.emit(payload",{"_index":1152,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.audio",{"_index":215,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["this.audio.nativeelement",{"_index":216,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["this.audio.nativeelement.setsinkid",{"_index":217,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["this.audio.nativeelement.setsinkid(devices.speakerdeviceid",{"_index":219,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["this.audioid",{"_index":209,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["this.availableaudiodevices",{"_index":548,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.availablespeakerdevices",{"_index":554,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.availablevideodevices",{"_index":552,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.builder.group",{"_index":525,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.changedetector.detectchanges",{"_index":431,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{}}}],["this.cleanuplocalstream",{"_index":1252,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.component",{"_index":1138,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.componentfactoryresolver.resolvecomponentfactory(componentclass",{"_index":1140,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.componentref",{"_index":1134,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.componentref.instance.attachremotefeed.pipe",{"_index":1151,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.componentref.instance.devices",{"_index":1155,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.componentref.instance.publishownfeed.pipe",{"_index":1146,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.componentref.instance.remotefeeds",{"_index":1156,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.componentref.instance.requestsubstream.pipe",{"_index":1149,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.componentref.instance.role",{"_index":1154,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.componentref.instance.roominfo",{"_index":1153,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.computespeakermodedimensions",{"_index":418,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.computevideowidth(0",{"_index":407,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.computevideowidth(currentremotefeeds.length",{"_index":381,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.computevideowidth(this.remotefeeds.length",{"_index":404,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.createoffer(subscriber",{"_index":1444,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.createstreamandoffer(subscriber",{"_index":1439,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.currentdevices",{"_index":904,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["this.destroy$.complete",{"_index":375,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["this.destroy$.next",{"_index":374,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["this.devices",{"_index":832,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["this.devices.audiodeviceid",{"_index":527,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{}}}],["this.devices.speakerdeviceid",{"_index":532,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.devices.videodeviceid",{"_index":530,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{}}}],["this.devicesform",{"_index":524,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.devicesform.get('audiodevice').value",{"_index":535,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.devicesform.get('speakerdevice').value",{"_index":538,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.devicesform.get('videodevice').value",{"_index":536,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.devicesform.valuechanges.pipe",{"_index":534,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.deviceupdate.emit(devices",{"_index":539,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.drawloopactive",{"_index":1262,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.emitremotefeeds(remotefeedsarray",{"_index":869,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.findidealwidth",{"_index":413,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.getdevices",{"_index":533,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.handle",{"_index":1250,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.handle.createoffer",{"_index":1461,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.handle.handleremotejsep({jsep",{"_index":1321,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.handle.isaudiomuted",{"_index":1498,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.handle.muteaudio",{"_index":1500,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.handle.send",{"_index":1432,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.handle.send({message",{"_index":1251,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.handle.unmuteaudio",{"_index":1499,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.httpurl",{"_index":805,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.iceservers",{"_index":1234,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.initialized",{"_index":1235,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.janus",{"_index":1255,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.janus.attach",{"_index":1270,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.janus.destroy({unload",{"_index":1253,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.januserror.emit({code",{"_index":867,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusserverurl",{"_index":803,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusservice.attachmediastream(this.audioid",{"_index":212,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["this.janusservice.attachmediastream(this.videoid",{"_index":1065,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.janusstore",{"_index":813,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.attachremotefeed",{"_index":886,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.attachvideoroom(this.janusserverurl",{"_index":872,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.initialize(this.iceservers",{"_index":853,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.publishownfeed(event",{"_index":883,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.register",{"_index":874,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.remotefeeds$.pipe(sharereplay(1",{"_index":807,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.requestsubstream(event",{"_index":884,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.reset(this.iceservers",{"_index":845,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.roominfo$.pipe",{"_index":808,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.setmute(muted",{"_index":847,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusstore.state$.pipe",{"_index":854,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.janusvideoroomwrapper.viewcontainerref",{"_index":1142,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.listdevices",{"_index":1217,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.loadcomponent",{"_index":1133,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.localdevices",{"_index":196,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["this.localstream",{"_index":1260,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.maximize.emit(this.remotefeed",{"_index":1099,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.mode",{"_index":377,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["this.monitorvideoquality(false",{"_index":1063,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.monitorvideoquality(slowlink",{"_index":1059,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.muted",{"_index":792,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.ondevicechange(devices",{"_index":198,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["this.ondeviceschange(this.currentdevices",{"_index":905,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["this.onremotefeedschange(this.privateremotefeeds",{"_index":356,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.opaqueid",{"_index":1272,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.pin",{"_index":856,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.privateremotefeeds",{"_index":354,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.publishers.emit(publishers",{"_index":850,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.publishing",{"_index":412,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.publishownfeed.emit",{"_index":918,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["this.publishownfeed.emit(event",{"_index":380,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.publishownfeed.emit(payload",{"_index":1148,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.publishwebrtcstate",{"_index":1261,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.readyremotefeeds",{"_index":385,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.remotefeed",{"_index":1075,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.remotefeed.currentsubstream",{"_index":1088,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.remotefeed.id",{"_index":210,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["this.remotefeed.numvideotracks",{"_index":1089,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.remotefeed.requestedsubstream",{"_index":1096,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.remotefeed.streamid",{"_index":213,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["this.remotefeeds",{"_index":806,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["this.remotehandles",{"_index":1258,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.remotehandles[feed.id",{"_index":1323,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.remotehandles[feed.id].send({message",{"_index":1503,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.requestsubstream.emit(event",{"_index":379,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.requestsubstream.emit(payload",{"_index":1150,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.requestsubstream.emit({feed",{"_index":1098,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.resizeobservable",{"_index":370,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.role",{"_index":376,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["this.roomid",{"_index":877,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.roominfo",{"_index":384,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["this.roominfo.publishstate",{"_index":942,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["this.roominfo.state",{"_index":910,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["this.selfvideobottom",{"_index":436,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.selfvideoright",{"_index":438,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.server",{"_index":1257,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.setspeaker(devices",{"_index":220,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["this.setspeaker(this.devices",{"_index":1052,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.setupjanusroom",{"_index":836,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.setupsubscriptions",{"_index":372,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["this.speaker",{"_index":378,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.speakerheight",{"_index":392,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.speakerwidth",{"_index":396,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.startdrawingloop(canvaselement",{"_index":1428,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.streams",{"_index":1256,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.streams[streamid",{"_index":1476,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.supportsspeakerselection",{"_index":546,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.switchsubstream(currentsubstream",{"_index":1091,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.switchsubstream(newsubstream",{"_index":1095,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.synccomponentdata",{"_index":1135,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["this.unpublishownfeed",{"_index":1437,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.userid",{"_index":876,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.username",{"_index":875,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.video",{"_index":1060,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.video.nativeelement",{"_index":1068,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.video.nativeelement.pause",{"_index":1061,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.video.nativeelement.play",{"_index":1087,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.video.nativeelement.setsinkid",{"_index":1069,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.video.nativeelement.setsinkid(devices.speakerdeviceid",{"_index":1070,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.videoavailable",{"_index":1072,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.videoelement",{"_index":1259,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.videoelement.remove",{"_index":1264,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.videoheight",{"_index":391,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.videoid",{"_index":1050,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.videoqualityhelper",{"_index":1048,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.videoqualityhelper.ping(currentsubstream",{"_index":1093,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.videoqualityhelper.streamend(currentsubstream",{"_index":1094,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.videoqualityhelper.streamerror(currentsubstream",{"_index":1090,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["this.videowidth",{"_index":395,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.viewport",{"_index":408,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.viewport.nativeelement.offsetheight",{"_index":415,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.viewport.nativeelement.offsetwidth",{"_index":414,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["this.webrtc.clearmediastream(stream",{"_index":835,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.webrtc.getdefaultdevices",{"_index":833,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.webrtc.getusermedia",{"_index":834,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["this.webrtc.listdevices",{"_index":545,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.webrtc.supportsspeakerselection",{"_index":547,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["this.webrtcservice.clearmediastream(this.localstream",{"_index":1265,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["this.wsurl",{"_index":804,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["those",{"_index":54,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["through",{"_index":709,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["throw",{"_index":911,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["tightly",{"_index":1645,"title":{},"body":{"index.html":{}}}],["time",{"_index":631,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"index.html":{}}}],["times",{"_index":1661,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":613,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["tiny",{"_index":936,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["tireless",{"_index":1649,"title":{},"body":{"index.html":{}}}],["to/from",{"_index":322,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["toggle",{"_index":1737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["toggle_mute_success",{"_index":1707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["togglemute",{"_index":1497,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["top",{"_index":977,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["touchpoints",{"_index":1654,"title":{},"body":{"index.html":{}}}],["track",{"_index":1004,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["trackbyfeedid(index",{"_index":388,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["tracks",{"_index":603,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["transform",{"_index":970,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["transmit",{"_index":93,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["tree",{"_index":140,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["trickle",{"_index":1325,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["true",{"_index":58,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["ts",{"_index":810,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["tslib",{"_index":1505,"title":{},"body":{"dependencies.html":{}}}],["twice",{"_index":1238,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["type",{"_index":26,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["ui",{"_index":1619,"title":{},"body":{"index.html":{}}}],["uint8array(bytes",{"_index":1724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ul.filter",{"_index":945,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["unable",{"_index":881,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["understand",{"_index":1562,"title":{},"body":{"index.html":{}}}],["understanding",{"_index":1554,"title":{},"body":{"index.html":{}}}],["unique",{"_index":206,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/VideoBoxComponent.html":{}}}],["unless",{"_index":924,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["unpublish",{"_index":1431,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["unpublishing",{"_index":1435,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["unpublishownfeed",{"_index":1430,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["until",{"_index":1434,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["up",{"_index":424,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["upon",{"_index":1583,"title":{},"body":{"index.html":{}}}],["url",{"_index":735,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["urls",{"_index":661,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{}}}],["us/docs/web/api/rtciceserver|mdn",{"_index":659,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["use",{"_index":80,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["used",{"_index":96,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["user",{"_index":20,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["user's",{"_index":297,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{}}}],["userid",{"_index":725,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["username",{"_index":662,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["users",{"_index":759,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["using",{"_index":101,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["ux",{"_index":1612,"title":{},"body":{"index.html":{}}}],["valid",{"_index":457,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["validators",{"_index":522,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["validators.required",{"_index":528,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["value",{"_index":333,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":223,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["variables",{"_index":800,"title":{"miscellaneous/variables.html":{}},"body":{"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":1165,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["vast",{"_index":1539,"title":{},"body":{"index.html":{}}}],["very",{"_index":620,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["video",{"_index":91,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["video'},{'name",{"_index":234,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["video,canvas",{"_index":966,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["video.component",{"_index":695,"title":{},"body":{"modules/JanusModule.html":{}}}],["video.component.html",{"_index":894,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video.component.scss",{"_index":902,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video.component.scss,../../styles/video",{"_index":892,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video.component.ts",{"_index":888,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video.component.ts:37",{"_index":897,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video.component.ts:41",{"_index":896,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video.component.ts:42",{"_index":901,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video.component.ts:49",{"_index":900,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video.component.ts:53",{"_index":895,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["video/audio",{"_index":53,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["video/mic",{"_index":1083,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["video/self",{"_index":694,"title":{},"body":{"modules/JanusModule.html":{},"components/SelfVideoComponent.html":{}}}],["video_codec",{"_index":611,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["videoavailable",{"_index":1045,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["videoboxcomponent",{"_index":235,"title":{"components/VideoBoxComponent.html":{}},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["videodevice",{"_index":529,"title":{},"body":{"components/DeviceSelectorComponent.html":{}}}],["videodeviceid",{"_index":51,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DeviceSelectorComponent.html":{},"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/RoomInfo.html":{},"components/SelfVideoComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["videodevices",{"_index":1220,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement",{"_index":1229,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.addeventlistener('canplay",{"_index":1397,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.addeventlistener('playing",{"_index":1376,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.autoplay",{"_index":1414,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.muted",{"_index":1374,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.play",{"_index":1398,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.removeeventlistener('playing",{"_index":1375,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.setattribute('id",{"_index":1416,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.setattribute('playsinline",{"_index":1415,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.setattribute('style",{"_index":1393,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.videoheight",{"_index":1343,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoelement.videowidth",{"_index":1342,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoheight",{"_index":364,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["videoid",{"_index":1043,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["videoinput",{"_index":553,"title":{},"body":{"components/DeviceSelectorComponent.html":{},"injectables/WebrtcService.html":{}}}],["videoqualityhelper",{"_index":1011,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["videoqualityhelper(3",{"_index":1049,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["videorecv",{"_index":1463,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videoroom",{"_index":42,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"components/VideoBoxComponent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["videoroom'},{'name",{"_index":231,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["videoroom.component",{"_index":686,"title":{},"body":{"modules/JanusModule.html":{}}}],["videoroom.component.html",{"_index":720,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.scss",{"_index":719,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts",{"_index":703,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:100",{"_index":758,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:107",{"_index":766,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:113",{"_index":732,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:122",{"_index":740,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:128",{"_index":730,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:134",{"_index":754,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:148",{"_index":770,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:154",{"_index":774,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:160",{"_index":779,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:176",{"_index":729,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:63",{"_index":763,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:71",{"_index":771,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:79",{"_index":734,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:85",{"_index":755,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom.component.ts:91",{"_index":769,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["videoroom/janus",{"_index":685,"title":{},"body":{"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{}}}],["videoroomcomponent",{"_index":121,"title":{"interfaces/VideoRoomComponent.html":{}},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/JanusVideoroomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["videorooms",{"_index":1533,"title":{},"body":{"index.html":{}}}],["videoroomstate",{"_index":1718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["videoroomwrappercomponent",{"_index":236,"title":{"components/VideoRoomWrapperComponent.html":{}},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"overview.html":{}}}],["videoroomwrapperdirective",{"_index":239,"title":{"directives/VideoRoomWrapperDirective.html":{}},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"modules/JanusModule.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{},"overview.html":{}}}],["videos",{"_index":310,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"index.html":{}}}],["videosend",{"_index":1327,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videosettings",{"_index":1410,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videosettings.framerate",{"_index":1429,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videosettings.height",{"_index":1421,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videostream",{"_index":1400,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videostream.getaudiotracks().find((item",{"_index":1425,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videostream.getvideotracks()[0].getsettings",{"_index":1411,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["videowidth",{"_index":362,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["view",{"_index":1022,"title":{},"body":{"components/VideoBoxComponent.html":{},"index.html":{}}}],["viewchild",{"_index":191,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["viewchild('audioelement",{"_index":204,"title":{},"body":{"components/AudioBoxComponent.html":{}}}],["viewchild('container",{"_index":794,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["viewchild('videoelement",{"_index":1047,"title":{},"body":{"components/VideoBoxComponent.html":{}}}],["viewchild('viewport",{"_index":357,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["viewchild(videoroomwrapperdirective",{"_index":1129,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["viewcontainerref",{"_index":1141,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{}}}],["viewcontainerref.clear",{"_index":1143,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["viewcontainerref.createcomponent(componentfactory",{"_index":1144,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["viewport",{"_index":358,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["viewportheight",{"_index":441,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["viewportwidth",{"_index":440,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["visible",{"_index":964,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["visual",{"_index":249,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["void",{"_index":186,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["volume",{"_index":612,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"miscellaneous/variables.html":{}}}],["volume/mute",{"_index":619,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["wait",{"_index":1433,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["want",{"_index":643,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["warm",{"_index":1455,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["way",{"_index":1395,"title":{},"body":{"injectables/WebrtcService.html":{},"miscellaneous/variables.html":{}}}],["we're",{"_index":28,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/DefaultVideoRoomComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"injectables/WebrtcService.html":{}}}],["webapp",{"_index":707,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["webapps",{"_index":1615,"title":{},"body":{"index.html":{}}}],["webrtc",{"_index":251,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["webrtc_state",{"_index":1708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webrtcservice",{"_index":511,"title":{"injectables/WebrtcService.html":{}},"body":{"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"injectables/WebrtcService.html":{}}}],["webrtcstate(on",{"_index":1285,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["website",{"_index":1648,"title":{},"body":{"index.html":{}}}],["websocket",{"_index":772,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["weight",{"_index":983,"title":{},"body":{"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["weird",{"_index":822,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["well",{"_index":1607,"title":{},"body":{"index.html":{}}}],["whenever",{"_index":313,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{}}}],["white",{"_index":951,"title":{},"body":{"components/SelfVideoComponent.html":{}}}],["width",{"_index":308,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"injectables/WebrtcService.html":{}}}],["window",{"_index":399,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["window.crypto.getrandomvalues(array",{"_index":1725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["window.cypress",{"_index":811,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["window.janusstore",{"_index":812,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["window.location.reload",{"_index":1315,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["windows",{"_index":1602,"title":{},"body":{"index.html":{}}}],["wish",{"_index":1631,"title":{},"body":{"index.html":{}}}],["wishes",{"_index":21,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["within",{"_index":1201,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["without",{"_index":62,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"components/AudioBoxComponent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{},"index.html":{}}}],["won't",{"_index":422,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{}}}],["work",{"_index":923,"title":{},"body":{"components/SelfVideoComponent.html":{},"injectables/WebrtcService.html":{},"index.html":{}}}],["working",{"_index":1537,"title":{},"body":{"index.html":{}}}],["works",{"_index":1555,"title":{},"body":{"index.html":{}}}],["wrap",{"_index":476,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["wrapper",{"_index":237,"title":{},"body":{"components/AudioBoxComponent.html":{},"components/DefaultVideoRoomComponent.html":{},"components/DeviceSelectorComponent.html":{},"components/JanusVideoroomComponent.html":{},"components/SelfVideoComponent.html":{},"components/VideoBoxComponent.html":{},"components/VideoRoomWrapperComponent.html":{},"injectables/WebrtcService.html":{}}}],["wrapper.component",{"_index":699,"title":{},"body":{"modules/JanusModule.html":{}}}],["wrapper.component.css",{"_index":1111,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.html",{"_index":1112,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.ts",{"_index":1110,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.ts:110",{"_index":1127,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.ts:37",{"_index":1122,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.ts:38",{"_index":1121,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.ts:39",{"_index":1119,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.ts:40",{"_index":1120,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.ts:42",{"_index":1118,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.ts:45",{"_index":1125,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.ts:48",{"_index":1124,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.ts:51",{"_index":1123,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.ts:53",{"_index":1131,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.ts:56",{"_index":1117,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.component.ts:80",{"_index":1126,"title":{},"body":{"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.directive",{"_index":700,"title":{},"body":{"modules/JanusModule.html":{},"components/VideoRoomWrapperComponent.html":{}}}],["wrapper.directive.ts",{"_index":1157,"title":{},"body":{"directives/VideoRoomWrapperDirective.html":{}}}],["wrapper.directive.ts:6",{"_index":1159,"title":{},"body":{"directives/VideoRoomWrapperDirective.html":{}}}],["wrapper.directive.ts:7",{"_index":1160,"title":{},"body":{"directives/VideoRoomWrapperDirective.html":{}}}],["wrapper.models",{"_index":787,"title":{},"body":{"components/JanusVideoroomComponent.html":{}}}],["wrapper.models.ts",{"_index":8,"title":{},"body":{"interfaces/AttachRemoteFeedEvent.html":{},"interfaces/PublishOwnFeedEvent.html":{},"interfaces/RequestSubstreamEvent.html":{},"interfaces/VideoRoomComponent.html":{}}}],["wrapper/video",{"_index":698,"title":{},"body":{"modules/JanusModule.html":{},"components/VideoRoomWrapperComponent.html":{},"directives/VideoRoomWrapperDirective.html":{}}}],["wrappers",{"_index":1211,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["write",{"_index":1560,"title":{},"body":{"index.html":{}}}],["written",{"_index":1642,"title":{},"body":{"index.html":{}}}],["wss://janus.conf.meetecho.com/ws",{"_index":773,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["wsurl",{"_index":726,"title":{},"body":{"components/JanusVideoroomComponent.html":{},"index.html":{}}}],["x.state",{"_index":387,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{}}}],["yarn",{"_index":1628,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1396,"title":{},"body":{"injectables/WebrtcService.html":{}}}],["you'll",{"_index":626,"title":{},"body":{"interfaces/Devices.html":{},"interfaces/IceServer.html":{},"interfaces/Publisher.html":{},"interfaces/RemoteFeed.html":{},"interfaces/RoomInfo.html":{}}}],["yourappmodule",{"_index":1632,"title":{},"body":{"index.html":{}}}],["z",{"_index":487,"title":{},"body":{"components/DefaultVideoRoomComponent.html":{},"components/VideoBoxComponent.html":{}}}],["zoom",{"_index":676,"title":{},"body":{"modules/JanusModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AttachRemoteFeedEvent.html":{"url":"interfaces/AttachRemoteFeedEvent.html","title":"interface - AttachRemoteFeedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AttachRemoteFeedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/video-room-wrapper.models.ts\n        \n\n            \n                Description\n            \n            \n                Data for the attachRemoteFeedEvent. The event will negotiate a connection to\nreceive the remote stream. This must be called on each remote feed the user wishes\nto receive.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        feed\n                                \n                                \n                                        roomInfo\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        feed\n                                    \n                                \n                                \n                                    \n                                        feed:         RemoteFeed\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RemoteFeed\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Remote feed that we're requesting. The stream must be in the RemoteFeedState.initialized state. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roomInfo\n                                    \n                                \n                                \n                                    \n                                        roomInfo:         RoomInfo\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RoomInfo\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Room info object for the room the remote feed belongs to. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { EventEmitter, } from '@angular/core';\n\nimport {\n  Devices,\n  JanusRole,\n  RemoteFeed,\n  RoomInfo,\n} from './janus.models';\n\n\n/**\n * Data for the publishOwnFeed event emitted by a videoroom. This event will\n * tell the system to start publishing the local feed of the user. By default,\n * you can specify an audioDeviceId and videoDeviceId and the system will capture\n * video/audio from those devices. Alternatively, if skipVideoCapture is set to\n * true, the stream from the canvas element will be published without audio. The\n * videoroom will take full responsibility for drawing to the canvas element\n */\nexport interface PublishOwnFeedEvent {\n\n  /** Device ID for the microphone. ID matches what is returned by `navigator.mediaDevics.enumerateDevices` */\n  audioDeviceId: string;\n\n  /** Device ID for the camera. ID matches what is returned by `navigator.mediaDevics.enumerateDevices` */\n  videoDeviceId: string;\n\n  /** HTML ID of the canvas element. Must exist in all use cases, even not drawing on\n   * the canvas manually. If document.getElementById([canvasId]) does not return a canvas\n   * element, this will fail\n   */\n  canvasId: string;\n\n  /** If true, directs the service to not setup a video element. It will instead transmit\n   * a video stream from the canvas element\n   */\n  skipVideoCapture: boolean;\n}\n\n\n/** Data for the requestSubstream event. The event is used to request different\n * substreams when the publisher is using multicast, which is the default.\n */\nexport interface RequestSubstreamEvent {\n  /** Remote feed that we're requesting a different substream for. */\n  feed: RemoteFeed;\n\n  /** The integer id of the stream to request. */\n  substreamId: number;\n}\n\n/** Data for the attachRemoteFeedEvent. The event will negotiate a connection to\n * receive the remote stream. This must be called on each remote feed the user wishes\n * to receive.\n */\nexport interface AttachRemoteFeedEvent {\n  /** Remote feed that we're requesting. The stream must be in the `RemoteFeedState.initialized` state. */\n  feed: RemoteFeed;\n\n  /** Room info object for the room the remote feed belongs to. */\n  roomInfo: RoomInfo;\n}\n\n/**\n * Interface for customer video room component\n *\n * Any provided custom video room must implement this interface. You need not use all of the\n * data if your use case doesn't require it. For example, a room might be publish only, in which\n * case the remoteFeeds can be ignored\n */\nexport interface VideoRoomComponent {\n\n  /** roomInfo object */\n  roomInfo: RoomInfo;\n\n  /** Role of the user */\n  role: JanusRole;\n\n  /** Which devices to user */\n  devices?: Devices;\n\n  /** List of available feeds */\n  remoteFeeds: RemoteFeed[];\n\n  /** Event to request a different substream */\n  requestSubstream: EventEmitter;\n\n  /** Event to publish a locally collected feed */\n  publishOwnFeed: EventEmitter;\n\n  /** Event to subscribe to another publisher's feed */\n  attachRemoteFeed: EventEmitter;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AudioBoxComponent.html":{"url":"components/AudioBoxComponent.html","title":"component - AudioBoxComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AudioBoxComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/components/audio-box/audio-box.component.ts\n\n\n    \n        Description\n    \n    \n        Component for playing audio from a stream.\nThis will play the audio from a remoteFeed without rendering the video at all.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                janus-nvid-audio-box\n            \n\n            \n                styleUrls\n                ./audio-box.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./audio-box.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onDeviceChange\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                devices\n                            \n                            \n                                remoteFeed\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    devices\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(janusService: JanusService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/components/audio-box/audio-box.component.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        janusService\n                                                  \n                                                        \n                                                                    JanusService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n                \n                    \n                        Type :         Devices\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/audio-box/audio-box.component.ts:26\n                            \n                        \n                \n                    \n                        Requested output device (speaker). If available, this will dynamically change the\nspeaker device. This is not available in chrome on android\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        remoteFeed\n                    \n                \n                \n                    \n                        Type :         RemoteFeed\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/audio-box/audio-box.component.ts:20\n                            \n                        \n                \n                    \n                        RemoteFeed object \n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onDeviceChange\n                        \n                        \n                    \n                \n            \n            \n                \nonDeviceChange(devices: Devices)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/audio-box/audio-box.component.ts:71\n                \n            \n\n\n            \n                \n                    Attempts to change speaker if requested \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    devices\n                                    \n                                                Devices\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n\n\n                \n                    \n                        setdevices(devices)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/components/audio-box/audio-box.component.ts:29\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            devices\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { AfterViewInit, Component, Input, OnInit, ChangeDetectionStrategy, ViewChild, ElementRef } from '@angular/core';\n\nimport { RemoteFeed, Devices } from '../../models/janus.models';\nimport { JanusService } from '../../services/janus.service';\n\n/**\n * Component for playing audio from a stream.\n *\n * This will play the audio from a remoteFeed without rendering the video at all.\n */\n@Component({\n  selector: 'janus-nvid-audio-box',\n  templateUrl: './audio-box.component.html',\n  styleUrls: ['./audio-box.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AudioBoxComponent implements OnInit, AfterViewInit {\n\n  /** `RemoteFeed` object */\n  @Input() remoteFeed: RemoteFeed;\n\n  /** Requested output device (speaker). If available, this will dynamically change the\n   * speaker device. This is not available in chrome on android\n   */\n  @Input()\n  get devices(): Devices {\n    return this.localDevices;\n  }\n  set devices(devices: Devices) {\n    this.onDeviceChange(devices);\n    this.localDevices = devices;\n  }\n\n  /** @internal */\n  private localDevices: Devices;\n\n  /** @internal */\n  public audioId: string;\n\n  /** @internal */\n  @ViewChild('audioElement') audio: ElementRef;\n\n  constructor(\n    private janusService: JanusService,\n  ) { }\n\n  ngOnInit(): void {\n    // Set my unique id for the audio\n    const instance = this;\n    this.audioId = 'audio-' + this.remoteFeed.id;\n  }\n\n  ngAfterViewInit(): void {\n    this.janusService.attachMediaStream(this.audioId, this.remoteFeed.streamId);\n  }\n\n  /** @internal */\n  setSpeaker(devices: Devices): void {\n    if (\n      this.audio\n      && this.audio.nativeElement\n      && this.audio.nativeElement.setSinkId\n      && devices\n      && devices.speakerDeviceId\n    ) {\n      this.audio.nativeElement.setSinkId(devices.speakerDeviceId);\n    }\n  }\n\n  /** Attempts to change speaker if requested */\n  onDeviceChange(devices: Devices): void {\n    this.setSpeaker(devices);\n  }\n}\n\n    \n\n    \n        \n\n    \n\n    \n                \n                    ./audio-box.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AudioBoxComponent', 'selector': 'janus-nvid-audio-box'},{'name': 'DefaultVideoRoomComponent', 'selector': 'janus-default-video-room'},{'name': 'DeviceSelectorComponent', 'selector': 'janus-device-selector'},{'name': 'JanusVideoroomComponent', 'selector': 'janus-videoroom'},{'name': 'SelfVideoComponent', 'selector': 'janus-self-video'},{'name': 'VideoBoxComponent', 'selector': 'janus-video-box'},{'name': 'VideoRoomWrapperComponent', 'selector': 'janus-video-room-wrapper'}];\n    var DIRECTIVES = [{'name': 'VideoRoomWrapperDirective', 'selector': '[janusVideoRoomWrapper]'}];\n    var ACTUAL_COMPONENT = {'name': 'AudioBoxComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DefaultVideoRoomComponent.html":{"url":"components/DefaultVideoRoomComponent.html","title":"component - DefaultVideoRoomComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DefaultVideoRoomComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/components/default-video-room/default-video-room.component.ts\n\n\n    \n        Description\n    \n    \n        Reference implementation of a video room display component.\nThis component displays the visual elements of a videoroom. The webRTC signalling is\nmostly abstracted away in higher level components. There are a small number of events\nthis component can emit in order to affect the webRTC signalling.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                janus-default-video-room\n            \n\n            \n                styleUrls\n                ./default-video-room.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./default-video-room.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                mode\n                            \n                            \n                                readyRemoteFeeds\n                            \n                            \n                                    Public\n                                speaker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                computeVideoWidth\n                            \n                            \n                                onMaximize\n                            \n                            \n                                onPublishOwnFeed\n                            \n                            \n                                onRemoteFeedsChange\n                            \n                            \n                                onRequestSubstream\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                devices\n                            \n                            \n                                remoteFeeds\n                            \n                            \n                                role\n                            \n                            \n                                roomInfo\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                attachRemoteFeed\n                            \n                            \n                                publishOwnFeed\n                            \n                            \n                                requestSubstream\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    remoteFeeds\n                                \n                                \n                                    publishing\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(changeDetector: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/lib/components/default-video-room/default-video-room.component.ts:114\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n                \n                    \n                        Type :         Devices\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:53\n                            \n                        \n                \n                    \n                        Requested devices \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        remoteFeeds\n                    \n                \n                \n                    \n                        Type :         RemoteFeed[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:63\n                            \n                        \n                \n                    \n                        Existing RemoteFeeds. This component must request any desired RemoteFeed be streamed by\nemitting a attachRemoteStream event. This is not done automatically because it might not be\ndesired to receive all remote feeds, depending on the product. A RemoteFeed can be attached\nto iff its current state is RemoteFeedState.initialized. A RemoteFeed that is in the\nRemoteFeedState.ready state can be streamed materialized by calling\nJanusService.attachMediaStream.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        role\n                    \n                \n                \n                    \n                        Type :         JanusRole\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:50\n                            \n                        \n                \n                    \n                        User's role in this videoroom \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        roomInfo\n                    \n                \n                \n                    \n                        Type :         RoomInfo\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:47\n                            \n                        \n                \n                    \n                        RoomInfo object \n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        attachRemoteFeed\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:82\n                            \n                        \n                \n                    \n                        Event to begin streaming a remote feed \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        publishOwnFeed\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:78\n                            \n                        \n                \n                    \n                        Event to publish a local stream \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        requestSubstream\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:74\n                            \n                        \n                \n                    \n                        Event to request a different substream \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            computeVideoWidth\n                        \n                        \n                    \n                \n            \n            \n                \ncomputeVideoWidth(numRemoteVideos)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:216\n                \n            \n\n\n            \n                \n                    Computes the ideal width of each video assuming all videos are the same size.\nCalled whenever the screen is resized or remoteFeeds changes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    numRemoteVideos\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onMaximize\n                        \n                        \n                    \n                \n            \n            \n                \nonMaximize(remoteFeed: RemoteFeed)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:139\n                \n            \n\n\n            \n                \n                    Event callback to switch to/from speaker mode \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    remoteFeed\n                                    \n                                                RemoteFeed\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onPublishOwnFeed\n                        \n                        \n                    \n                \n            \n            \n                \nonPublishOwnFeed(event: PublishOwnFeedEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:154\n                \n            \n\n\n            \n                \n                    Event callback to publish a local stream \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                PublishOwnFeedEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onRemoteFeedsChange\n                        \n                        \n                    \n                \n            \n            \n                \nonRemoteFeedsChange(previousRemoteFeeds: RemoteFeed[], currentRemoteFeeds: RemoteFeed[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:159\n                \n            \n\n\n            \n                \n                    Called on all changes of remoteFeeds \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    previousRemoteFeeds\n                                    \n                                                RemoteFeed[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentRemoteFeeds\n                                    \n                                                RemoteFeed[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onRequestSubstream\n                        \n                        \n                    \n                \n            \n            \n                \nonRequestSubstream(event: RequestSubstreamEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:149\n                \n            \n\n\n            \n                \n                    Event callback to request a new substream \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                RequestSubstreamEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            mode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     \"grid\" | \"speaker\"\n\n                        \n                    \n                    \n                        \n                            Default value : 'grid'\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:111\n                            \n                        \n\n                \n                    \n                        Current mode of the video room \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            readyRemoteFeeds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         RemoteFeed[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:70\n                            \n                        \n\n                \n                    \n                        List of RemoteFeeds objects that are in the RemoteFeedState.ready state. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            speaker\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         RemoteFeed\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:114\n                            \n                        \n\n                \n                    \n                        Current speaker in the event we're in speaker mode \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        remoteFeeds\n                    \n                \n\n\n                \n                    \n                        setremoteFeeds(remoteFeeds: [])\n                    \n                \n                            \n                                \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:64\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            remoteFeeds\n                                                    \n                                                            \n                                                                        []\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        publishing\n                    \n                \n\n                \n                    \n                        getpublishing()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/components/default-video-room/default-video-room.component.ts:134\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n} from '@angular/core';\n\nimport { fromEvent, Observable, Subscription, interval, Subject } from 'rxjs';\nimport { debounce, takeUntil } from 'rxjs/operators';\n\nimport {\n  AttachRemoteFeedEvent,\n  Devices,\n  JanusRole,\n  PublishOwnFeedEvent,\n  RemoteFeed,\n  RemoteFeedState,\n  RequestSubstreamEvent,\n  RoomInfo,\n  RoomInfoState,\n} from '../../models';\n\n/**\n * Reference implementation of a video room display component.\n *\n * This component displays the visual elements of a videoroom. The webRTC signalling is\n * mostly abstracted away in higher level components. There are a small number of events\n * this component can emit in order to affect the webRTC signalling.\n */\n@Component({\n  selector: 'janus-default-video-room',\n  templateUrl: './default-video-room.component.html',\n  styleUrls: ['./default-video-room.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DefaultVideoRoomComponent implements OnInit, OnDestroy, AfterViewInit {\n\n  /** `RoomInfo` object */\n  @Input() roomInfo: RoomInfo;\n\n  /** User's role in this videoroom */\n  @Input() role: JanusRole;\n\n  /** Requested devices */\n  @Input() devices?: Devices;\n\n  /** Existing `RemoteFeeds`. This component must request any desired `RemoteFeed` be streamed by\n   * emitting a attachRemoteStream event. This is not done automatically because it might not be\n   * desired to receive all remote feeds, depending on the product. A `RemoteFeed` can be attached\n   * to iff its current state is `RemoteFeedState.initialized`. A `RemoteFeed` that is in the\n   * `RemoteFeedState.ready` state can be streamed materialized by calling\n   * `JanusService.attachMediaStream`.\n   */\n  @Input()\n  get remoteFeeds(): RemoteFeed[] { return this.privateRemoteFeeds; }\n  set remoteFeeds(remoteFeeds: RemoteFeed[]) {\n    this.onRemoteFeedsChange(this.privateRemoteFeeds, remoteFeeds);\n    this.privateRemoteFeeds = remoteFeeds;\n  }\n\n  /** List of `RemoteFeeds` objects that are in the `RemoteFeedState.ready` state. */\n  readyRemoteFeeds: RemoteFeed[] = [];\n\n  /** Event to request a different substream */\n  @Output()\n  requestSubstream = new EventEmitter();\n\n  /** Event to publish a local stream */\n  @Output()\n  publishOwnFeed = new EventEmitter();\n\n  /** Event to begin streaming a remote feed */\n  @Output()\n  attachRemoteFeed = new EventEmitter();\n\n  /** @internal */\n  @ViewChild('viewport') viewport: ElementRef;\n\n  /** @internal */\n  private resizeObservable$: Observable;\n\n  /** @internal */\n  private destroy$ = new Subject();\n\n  /** @internal */\n  private privateRemoteFeeds: RemoteFeed[] = [];\n\n  /** @internal */\n  public videoWidth = 0;\n  /** @internal */\n  public videoHeight = 0;\n  /** @internal */\n  public speakerWidth = 0;\n  /** @internal */\n  public speakerHeight = 0;\n\n  /** @internal */\n  public selfVideoRight = 0;\n  /** @internal */\n  public selfVideoBottom = 0;\n\n  /** Current mode of the video room */\n  public mode: 'grid' | 'speaker' = 'grid';\n\n  /** Current speaker in the event we're in speaker mode */\n  public speaker: RemoteFeed;\n\n  constructor(\n    private changeDetector: ChangeDetectorRef,\n  ) { }\n\n  ngOnInit(): void {\n    // subscribe to resize events\n    this.resizeObservable$ = fromEvent(window, 'resize');\n  }\n\n  ngAfterViewInit(): void {\n    this.setupSubscriptions();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  get publishing(): boolean {\n    return this.role === 'publisher';\n  }\n\n  /** Event callback to switch to/from speaker mode */\n  onMaximize(remoteFeed: RemoteFeed): void {\n    if (this.mode === 'grid') {\n      this.speaker = remoteFeed;\n      this.mode = 'speaker';\n    } else {\n      this.mode = 'grid';\n    }\n  }\n\n  /** Event callback to request a new substream */\n  onRequestSubstream(event: RequestSubstreamEvent): void {\n    this.requestSubstream.emit(event);\n  }\n\n  /** Event callback to publish a local stream */\n  onPublishOwnFeed(event: PublishOwnFeedEvent): void {\n    this.publishOwnFeed.emit(event);\n  }\n\n  /** Called on all changes of `remoteFeeds` */\n  onRemoteFeedsChange(previousRemoteFeeds: RemoteFeed[], currentRemoteFeeds: RemoteFeed[]): void {\n\n    this.computeVideoWidth(currentRemoteFeeds.length);\n    for (const feed of currentRemoteFeeds) {\n      if (feed.state === RemoteFeedState.initialized) {\n        this.attachRemoteFeed.emit({\n          roomInfo: this.roomInfo,\n          feed,\n        });\n      }\n    }\n\n    this.readyRemoteFeeds = currentRemoteFeeds.filter((x) => x.state === RemoteFeedState.ready);\n  }\n\n  /** @internal */\n  trackByFeedId(index: number, remoteFeed: RemoteFeed): string {\n    return remoteFeed.id;\n  }\n\n  /** @internal */\n  get selfVideoHeight(): number {\n    if (this.mode === 'grid') {\n      return this.videoHeight;\n    } else {\n      return this.speakerHeight / 5;\n    }\n  }\n\n  /** @internal */\n  get selfVideoWidth(): number {\n    if (this.mode === 'grid') {\n      return this.videoWidth;\n    } else {\n      return this.speakerWidth / 5;\n    }\n  }\n\n  /** @internal */\n  setupSubscriptions(): void {\n    // Compute video width whenever the window is resized\n    this.resizeObservable$\n      .pipe(\n        debounce(() => interval(500)),\n        takeUntil(this.destroy$),\n      )\n      .subscribe((event) => {\n        this.computeVideoWidth(this.remoteFeeds.length);\n      });\n\n    // Do an initial calculation\n    this.computeVideoWidth(0);\n  }\n\n  /** Computes the ideal width of each video assuming all videos are the same size.\n   * Called whenever the screen is resized or `remoteFeeds` changes\n   */\n  computeVideoWidth(numRemoteVideos): void {\n    if (!this.viewport) {\n      return;\n    }\n    // Adding 1 for our local video\n    let numVideos = numRemoteVideos;\n    if (this.publishing) {\n      numVideos += 1;\n    }\n\n    this.videoWidth = this.findIdealWidth(\n      this.viewport.nativeElement.offsetWidth,\n      this.viewport.nativeElement.offsetHeight,\n      numVideos);\n\n    this.videoHeight = this.videoWidth * 3 / 4;\n\n    this.computeSpeakerModeDimensions();\n\n    // The window resize event is outside of angular, so change detection won't\n    // automatically pick this up. Smells a bit, but not sure there's a better\n    // solution\n    this.changeDetector.detectChanges();\n  }\n\n  /** @internal */\n  computeSpeakerModeDimensions(aspectRatio: number = 4 / 3): void {\n    const width = this.viewport.nativeElement.offsetWidth;\n    const height = this.viewport.nativeElement.offsetHeight;\n\n    const calculatedWidth = height * aspectRatio;\n\n    if (calculatedWidth > width) {\n      this.speakerWidth = width;\n    } else {\n      this.speakerWidth = calculatedWidth;\n    }\n    this.speakerHeight = this.speakerWidth * 3 / 4;\n\n    this.selfVideoBottom = (height - (this.speakerWidth / aspectRatio)) / 2;\n    this.selfVideoRight = (width - this.speakerWidth) / 2;\n  }\n\n  /** @internal */\n  findIdealWidth(\n    viewportWidth: number,\n    viewportHeight: number,\n    numVideos: number,\n    aspectRatio: number = 4 / 3\n  ): number {\n    // Do a bisect search for the largest width that will fit in our viewport\n\n    const isValidWidth = ((testWidth: number) => {\n      if (testWidth > viewportWidth) {\n        return false;\n      }\n      const numColumns = Math.min(numVideos, Math.floor(viewportWidth / testWidth));\n      const numRows = Math.ceil(numVideos / numColumns);\n      const testHeight = Math.ceil(testWidth / aspectRatio);\n\n      // console.log('is valid: ', testWidth, testHeight, numColumns, numRows, (testHeight * numRows)  maxFits + 1) {\n      iterations += 1;\n      const ptr = Math.floor((maxFits + minOver) / 2);\n      if (isValidWidth(ptr)) {\n        maxFits = ptr;\n      } else {\n        minOver = ptr;\n      }\n\n      if (iterations > 50) {\n        break;\n      }\n    }\n\n    // console.log('searching', viewportWidth, viewportHeight, numVideos, maxFits);\n    return maxFits;\n  }\n}\n\n    \n\n    \n        \n\n  \n    \n  \n\n  \n    \n      \n    \n  \n\n  \n    \n      \n    \n\n    \n      \n\n      \n\n    \n  \n\n\n    \n\n    \n                \n                    ./default-video-room.component.scss\n                \n                div.video-room-viewport {\n    width: 100%;\n    height: 100%;\n\n    position: relative;\n\n    display: flex;\n    justify-content: center;\n    align-content: center;\n    flex-wrap: wrap;\n\n    /* background-color: #a5adb7; */\n\n    div {\n        /* border: 2px solid black; */ \n    }\n}\n\ndiv.speaker {\n    position: absolute;\n    z-index: 1;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                '\n    var COMPONENTS = [{'name': 'AudioBoxComponent', 'selector': 'janus-nvid-audio-box'},{'name': 'DefaultVideoRoomComponent', 'selector': 'janus-default-video-room'},{'name': 'DeviceSelectorComponent', 'selector': 'janus-device-selector'},{'name': 'JanusVideoroomComponent', 'selector': 'janus-videoroom'},{'name': 'SelfVideoComponent', 'selector': 'janus-self-video'},{'name': 'VideoBoxComponent', 'selector': 'janus-video-box'},{'name': 'VideoRoomWrapperComponent', 'selector': 'janus-video-room-wrapper'}];\n    var DIRECTIVES = [{'name': 'VideoRoomWrapperDirective', 'selector': '[janusVideoRoomWrapper]'}];\n    var ACTUAL_COMPONENT = {'name': 'DefaultVideoRoomComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DeviceSelectorComponent.html":{"url":"components/DeviceSelectorComponent.html","title":"component - DeviceSelectorComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DeviceSelectorComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/containers/device-selector/device-selector.component.ts\n\n\n    \n        Description\n    \n    \n        Device selector form. Implements a form that will show the user options for picking their camera,\nmicrophone, and speaker device. The speaker option is only shown if the device supports dynamically\nchanging the speaker. This class can be subclassed if style changes are desired.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n    \n        Example\n    \n    \n                \n                    \n\n                \n    \n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                janus-device-selector\n            \n\n            \n                styleUrls\n                ./device-selector.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./device-selector.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                availableAudioDevices\n                            \n                            \n                                    Public\n                                availableSpeakerDevices\n                            \n                            \n                                    Public\n                                availableVideoDevices\n                            \n                            \n                                    Public\n                                devicesForm\n                            \n                            \n                                    Public\n                                supportsSpeakerSelection\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                devices\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                deviceUpdate\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(changeDetector: ChangeDetectorRef, builder: FormBuilder, webrtc: WebrtcService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/containers/device-selector/device-selector.component.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        builder\n                                                  \n                                                        \n                                                                        FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        webrtc\n                                                  \n                                                        \n                                                                        WebrtcService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n                \n                    \n                        Type :         Devices\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/device-selector/device-selector.component.ts:36\n                            \n                        \n                \n                    \n                        Currently selected devices\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        deviceUpdate\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/device-selector/device-selector.component.ts:42\n                            \n                        \n                \n                    \n                        Event emitted whenever the user changes the devices in the form\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            availableAudioDevices\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/device-selector/device-selector.component.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            availableSpeakerDevices\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/device-selector/device-selector.component.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            availableVideoDevices\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/device-selector/device-selector.component.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            devicesForm\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/device-selector/device-selector.component.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            supportsSpeakerSelection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/containers/device-selector/device-selector.component.ts:48\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { ChangeDetectorRef, Component, EventEmitter, OnDestroy, OnInit, Output, ChangeDetectionStrategy, Input } from '@angular/core';\n\nimport { FormBuilder, Validators } from '@angular/forms';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { WebrtcService } from '../../services/janus.service';\nimport { Devices } from '../../models/janus.models';\n\n\n/**\n * Device selector form. Implements a form that will show the user options for picking their camera,\n * microphone, and speaker device. The speaker option is only shown if the device supports dynamically\n * changing the speaker. This class can be subclassed if style changes are desired.\n * @example\n * \n * \n */\n@Component({\n  selector: 'janus-device-selector',\n  templateUrl: './device-selector.component.html',\n  styleUrls: [\n    './device-selector.component.scss',\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DeviceSelectorComponent implements OnInit, OnDestroy {\n\n  /**\n   * Currently selected devices\n   */\n  @Input()\n  devices: Devices;\n\n  /**\n   * Event emitted whenever the user changes the devices in the form\n   */\n  @Output()\n  deviceUpdate = new EventEmitter();\n\n  public devicesForm;\n  public availableAudioDevices;\n  public availableVideoDevices;\n  public availableSpeakerDevices;\n  public supportsSpeakerSelection = false;\n  private destroy$ = new Subject();\n\n\n  constructor(\n    private changeDetector: ChangeDetectorRef,\n    private builder: FormBuilder,\n    private webrtc: WebrtcService,\n  ) { }\n\n  ngOnInit(): void {\n\n    this.devicesForm = this.builder.group({\n      audioDevice: [this.devices.audioDeviceId, [Validators.required]],\n      videoDevice: [this.devices.videoDeviceId, [Validators.required]],\n      speakerDevice: [this.devices.speakerDeviceId, [Validators.required]],\n    });\n    this.getDevices();\n\n    this.devicesForm.valueChanges.pipe(\n      takeUntil(this.destroy$)\n    ).subscribe(() => {\n      const devices = {\n        audioDeviceId: this.devicesForm.get('audioDevice').value,\n        videoDeviceId: this.devicesForm.get('videoDevice').value,\n        speakerDeviceId: this.devicesForm.get('speakerDevice').value,\n      };\n      this.deviceUpdate.emit(devices);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  /** @internal */\n  async getDevices(): Promise {\n    const allDevices = await this.webrtc.listDevices();\n    this.supportsSpeakerSelection = this.webrtc.supportsSpeakerSelection();\n    this.availableAudioDevices = allDevices.filter((device) => device.kind === 'audioinput');\n    this.availableVideoDevices = allDevices.filter((device) => device.kind === 'videoinput');\n    this.availableSpeakerDevices = allDevices.filter((device) => device.kind === 'audiooutput');\n    this.changeDetector.detectChanges();\n  }\n}\n\n    \n\n    \n        \n    \n      Microphone\n      \n      \n        {{ device.label }}\n      \n    \n\n    \n      Camera\n      \n      \n        {{ device.label }}\n      \n    \n\n    \n      Speakers\n      \n      \n        {{ device.label }}\n      \n    \n\n\n    \n\n    \n                \n                    ./device-selector.component.scss\n                \n                div.form-row {\n    display: flex;\n    justify-content: center;\n    padding: 5px 0;\n\n    span.flex {\n        flex-grow: 1;\n    }\n\n    label {\n        width: 30%;\n    }\n\n    select {\n        width: 60%;\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '          Microphone                    {{ device.label }}                    Camera                    {{ device.label }}                    Speakers                    {{ device.label }}          '\n    var COMPONENTS = [{'name': 'AudioBoxComponent', 'selector': 'janus-nvid-audio-box'},{'name': 'DefaultVideoRoomComponent', 'selector': 'janus-default-video-room'},{'name': 'DeviceSelectorComponent', 'selector': 'janus-device-selector'},{'name': 'JanusVideoroomComponent', 'selector': 'janus-videoroom'},{'name': 'SelfVideoComponent', 'selector': 'janus-self-video'},{'name': 'VideoBoxComponent', 'selector': 'janus-video-box'},{'name': 'VideoRoomWrapperComponent', 'selector': 'janus-video-room-wrapper'}];\n    var DIRECTIVES = [{'name': 'VideoRoomWrapperDirective', 'selector': '[janusVideoRoomWrapper]'}];\n    var ACTUAL_COMPONENT = {'name': 'DeviceSelectorComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Devices.html":{"url":"interfaces/Devices.html","title":"interface - Devices","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Devices\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/janus.models.ts\n        \n\n            \n                Description\n            \n            \n                Device specifications\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        audioDeviceId\n                                \n                                \n                                        speakerDeviceId\n                                \n                                \n                                        videoDeviceId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audioDeviceId\n                                    \n                                \n                                \n                                    \n                                        audioDeviceId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Microphone Device ID \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        speakerDeviceId\n                                    \n                                \n                                \n                                    \n                                        speakerDeviceId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Speaker Device ID \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        videoDeviceId\n                                    \n                                \n                                \n                                    \n                                        videoDeviceId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Camera Device ID \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as moment from 'moment';\n\n/**\n * Device specifications\n */\nexport interface Devices {\n  /** Microphone Device ID */\n  audioDeviceId: string;\n\n  /** Camera Device ID */\n  videoDeviceId: string;\n\n  /** Speaker Device ID */\n  speakerDeviceId: string;\n}\n\n/**\n * Room state machine\n */\nexport enum RoomInfoState {\n  start = 'start',\n  initializing = 'initializing',\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  attach_failed = 'attach_failed',\n  joining = 'joining',\n\n  /** Once joined, you can start publishing */\n  joined = 'joined',\n  error = 'error',\n}\n\n/**\n * Current publish status\n */\nexport enum PublishState {\n  start = 'start',\n  ready = 'ready',\n  publishRequested = 'publish requested',\n  publishing = 'publishing',\n  error = 'error',\n}\n\n/**\n * Metadata for a room\n */\nexport interface RoomInfo {\n\n  /** State of the room */\n  state: RoomInfoState;\n\n  /** roomId */\n  id: string;\n\n  /** Description of the room */\n  description: string;\n\n  /** private_id assigned by janus */\n  privateId: number;\n\n  /** Value passed back in \"joined\" message */\n  otherRoomId: number;  // This comes back in the \"joined\" message. Not sure what to use it for\n\n  /** Set to error code if there was an error in the room */\n  errorCode: number;\n\n  /** Local publishing state */\n  publishState: PublishState;\n\n  /** @internal Internal stream id */\n  localStreamId: string;\n\n  /** True iff the audio is muted */\n  muted: boolean;\n}\n\n/**\n * Remote feed state machine\n */\nexport enum RemoteFeedState {\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  ready = 'ready',\n  error = 'error',\n}\n\n/**\n * Current state of a remote feed\n * There exists a remote feed object for each available publisher in the video\n * room. It's possible to attach to these\n */\nexport interface RemoteFeed {\n  /** Current state of the feed */\n  state: RemoteFeedState;\n\n  /** Id of the publisher */\n  id: string;\n\n  /** @internal */\n  streamId: string;\n\n  /** number of video tracks available */\n  numVideoTracks: number;\n\n  /** Substream requested */\n  requestedSubstream: number;\n\n  /** Substream currently being received */\n  currentSubstream: number;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /** @internal */\n  audio_codec: string;\n\n  /** @internal */\n  video_codec: string;\n\n  /** @internal */\n  volume: number;\n\n  /** @internal */\n  muted: boolean;\n\n  /** timestamp of most recent slowLink event on this feed */\n  slowLink: moment.Moment;\n}\n\n/**\n * Information for a publisher. Note that the volume/mute information is not\n * very practical in how it's implemented in janus currently. In order to get\n * meaningful information about talking/not talking, you'll need to know the\n * average background noise level of each publisher ahead of time. This is\n * specified at `audio_level_average` in the room. This isn't practical if you\n * don't know the publisher's system setup ahead of time. We set the\n * `audio_level_average` to 127 in the backend configuration. That makes the\n * start/stop talking events good for knowing if the remote user has muted.\n * You might want to ignore this information depending on your use case.\n */\nexport interface Publisher {\n\n  /** Janus ID of the publisher */\n  id: string;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /**\n   * Current volume of the publisher's audio. See notes in the interface description.\n   */\n  volume: number;\n\n  /** Set to true iff the last volume event had the volume at 127 */\n  muted: boolean;\n}\n\n/**\n * Possible roles for a user.\n */\nexport enum JanusRole {\n  /** A user in this role will publish their audio/video and see/hear all other publishers */\n  publisher = 'publisher',\n\n  /** A user in this role will *not* publish their audio/video. They will still see/hear all other publishers */\n  listener = 'listener',\n}\n\n/**\n * IceServer configuration. More details are in the {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer|MDN Docs}\n */\nexport interface IceServer {\n  urls: string;\n  username?: string;\n  credential?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IceServer.html":{"url":"interfaces/IceServer.html","title":"interface - IceServer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IceServer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/janus.models.ts\n        \n\n            \n                Description\n            \n            \n                IceServer configuration. More details are in the MDN Docs\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        credential\n                                \n                                \n                                        urls\n                                \n                                \n                                            Optional\n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        credential\n                                    \n                                \n                                \n                                    \n                                        credential:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        urls\n                                    \n                                \n                                \n                                    \n                                        urls:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as moment from 'moment';\n\n/**\n * Device specifications\n */\nexport interface Devices {\n  /** Microphone Device ID */\n  audioDeviceId: string;\n\n  /** Camera Device ID */\n  videoDeviceId: string;\n\n  /** Speaker Device ID */\n  speakerDeviceId: string;\n}\n\n/**\n * Room state machine\n */\nexport enum RoomInfoState {\n  start = 'start',\n  initializing = 'initializing',\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  attach_failed = 'attach_failed',\n  joining = 'joining',\n\n  /** Once joined, you can start publishing */\n  joined = 'joined',\n  error = 'error',\n}\n\n/**\n * Current publish status\n */\nexport enum PublishState {\n  start = 'start',\n  ready = 'ready',\n  publishRequested = 'publish requested',\n  publishing = 'publishing',\n  error = 'error',\n}\n\n/**\n * Metadata for a room\n */\nexport interface RoomInfo {\n\n  /** State of the room */\n  state: RoomInfoState;\n\n  /** roomId */\n  id: string;\n\n  /** Description of the room */\n  description: string;\n\n  /** private_id assigned by janus */\n  privateId: number;\n\n  /** Value passed back in \"joined\" message */\n  otherRoomId: number;  // This comes back in the \"joined\" message. Not sure what to use it for\n\n  /** Set to error code if there was an error in the room */\n  errorCode: number;\n\n  /** Local publishing state */\n  publishState: PublishState;\n\n  /** @internal Internal stream id */\n  localStreamId: string;\n\n  /** True iff the audio is muted */\n  muted: boolean;\n}\n\n/**\n * Remote feed state machine\n */\nexport enum RemoteFeedState {\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  ready = 'ready',\n  error = 'error',\n}\n\n/**\n * Current state of a remote feed\n * There exists a remote feed object for each available publisher in the video\n * room. It's possible to attach to these\n */\nexport interface RemoteFeed {\n  /** Current state of the feed */\n  state: RemoteFeedState;\n\n  /** Id of the publisher */\n  id: string;\n\n  /** @internal */\n  streamId: string;\n\n  /** number of video tracks available */\n  numVideoTracks: number;\n\n  /** Substream requested */\n  requestedSubstream: number;\n\n  /** Substream currently being received */\n  currentSubstream: number;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /** @internal */\n  audio_codec: string;\n\n  /** @internal */\n  video_codec: string;\n\n  /** @internal */\n  volume: number;\n\n  /** @internal */\n  muted: boolean;\n\n  /** timestamp of most recent slowLink event on this feed */\n  slowLink: moment.Moment;\n}\n\n/**\n * Information for a publisher. Note that the volume/mute information is not\n * very practical in how it's implemented in janus currently. In order to get\n * meaningful information about talking/not talking, you'll need to know the\n * average background noise level of each publisher ahead of time. This is\n * specified at `audio_level_average` in the room. This isn't practical if you\n * don't know the publisher's system setup ahead of time. We set the\n * `audio_level_average` to 127 in the backend configuration. That makes the\n * start/stop talking events good for knowing if the remote user has muted.\n * You might want to ignore this information depending on your use case.\n */\nexport interface Publisher {\n\n  /** Janus ID of the publisher */\n  id: string;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /**\n   * Current volume of the publisher's audio. See notes in the interface description.\n   */\n  volume: number;\n\n  /** Set to true iff the last volume event had the volume at 127 */\n  muted: boolean;\n}\n\n/**\n * Possible roles for a user.\n */\nexport enum JanusRole {\n  /** A user in this role will publish their audio/video and see/hear all other publishers */\n  publisher = 'publisher',\n\n  /** A user in this role will *not* publish their audio/video. They will still see/hear all other publishers */\n  listener = 'listener',\n}\n\n/**\n * IceServer configuration. More details are in the {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer|MDN Docs}\n */\nexport interface IceServer {\n  urls: string;\n  username?: string;\n  credential?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/JanusModule.html":{"url":"modules/JanusModule.html","title":"module - JanusModule","body":"\n                   \n\n\n\n\n    Modules\n    JanusModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_JanusModule\n\n\n\ncluster_JanusModule_declarations\n\n\n\ncluster_JanusModule_exports\n\n\n\n\nAudioBoxComponent\n\nAudioBoxComponent\n\n\n\nJanusModule\n\nJanusModule\n\nJanusModule -->\n\nAudioBoxComponent->JanusModule\n\n\n\n\n\nDefaultVideoRoomComponent\n\nDefaultVideoRoomComponent\n\nJanusModule -->\n\nDefaultVideoRoomComponent->JanusModule\n\n\n\n\n\nDeviceSelectorComponent\n\nDeviceSelectorComponent\n\nJanusModule -->\n\nDeviceSelectorComponent->JanusModule\n\n\n\n\n\nJanusVideoroomComponent\n\nJanusVideoroomComponent\n\nJanusModule -->\n\nJanusVideoroomComponent->JanusModule\n\n\n\n\n\nSelfVideoComponent\n\nSelfVideoComponent\n\nJanusModule -->\n\nSelfVideoComponent->JanusModule\n\n\n\n\n\nVideoBoxComponent\n\nVideoBoxComponent\n\nJanusModule -->\n\nVideoBoxComponent->JanusModule\n\n\n\n\n\nVideoRoomWrapperComponent\n\nVideoRoomWrapperComponent\n\nJanusModule -->\n\nVideoRoomWrapperComponent->JanusModule\n\n\n\n\n\nVideoRoomWrapperDirective\n\nVideoRoomWrapperDirective\n\nJanusModule -->\n\nVideoRoomWrapperDirective->JanusModule\n\n\n\n\n\nAudioBoxComponent \n\nAudioBoxComponent \n\nAudioBoxComponent  -->\n\nJanusModule->AudioBoxComponent \n\n\n\n\n\nDefaultVideoRoomComponent \n\nDefaultVideoRoomComponent \n\nDefaultVideoRoomComponent  -->\n\nJanusModule->DefaultVideoRoomComponent \n\n\n\n\n\nDeviceSelectorComponent \n\nDeviceSelectorComponent \n\nDeviceSelectorComponent  -->\n\nJanusModule->DeviceSelectorComponent \n\n\n\n\n\nJanusVideoroomComponent \n\nJanusVideoroomComponent \n\nJanusVideoroomComponent  -->\n\nJanusModule->JanusVideoroomComponent \n\n\n\n\n\nSelfVideoComponent \n\nSelfVideoComponent \n\nSelfVideoComponent  -->\n\nJanusModule->SelfVideoComponent \n\n\n\n\n\nVideoBoxComponent \n\nVideoBoxComponent \n\nVideoBoxComponent  -->\n\nJanusModule->VideoBoxComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/janus.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AudioBoxComponent\n                        \n                        \n                            DefaultVideoRoomComponent\n                        \n                        \n                            DeviceSelectorComponent\n                        \n                        \n                            JanusVideoroomComponent\n                        \n                        \n                            SelfVideoComponent\n                        \n                        \n                            VideoBoxComponent\n                        \n                        \n                            VideoRoomWrapperComponent\n                        \n                        \n                            VideoRoomWrapperDirective\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AudioBoxComponent\n                        \n                        \n                            DefaultVideoRoomComponent\n                        \n                        \n                            DeviceSelectorComponent\n                        \n                        \n                            JanusVideoroomComponent\n                        \n                        \n                            SelfVideoComponent\n                        \n                        \n                            VideoBoxComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\nimport { JanusVideoroomComponent } from './containers/janus-videoroom/janus-videoroom.component';\nimport { DeviceSelectorComponent } from './containers/device-selector/device-selector.component';\nimport { AudioBoxComponent } from './components/audio-box/audio-box.component';\nimport { DefaultVideoRoomComponent } from './components/default-video-room/default-video-room.component';\nimport { SelfVideoComponent } from './components/self-video/self-video.component';\nimport { VideoBoxComponent } from './components/video-box/video-box.component';\nimport { VideoRoomWrapperComponent } from './components/video-room-wrapper/video-room-wrapper.component';\nimport { VideoRoomWrapperDirective } from './components/video-room-wrapper/video-room-wrapper.directive';\n\n\n@NgModule({\n  declarations: [\n    JanusVideoroomComponent,\n    DeviceSelectorComponent,\n    AudioBoxComponent,\n    DefaultVideoRoomComponent,\n    SelfVideoComponent,\n    VideoBoxComponent,\n    VideoRoomWrapperComponent,\n    VideoRoomWrapperDirective,\n  ],\n  imports: [\n    ReactiveFormsModule,\n    CommonModule,\n  ],\n  exports: [\n    JanusVideoroomComponent,\n    DeviceSelectorComponent,\n    SelfVideoComponent,\n    VideoBoxComponent,\n    AudioBoxComponent,\n    DefaultVideoRoomComponent,\n  ]\n})\nexport class JanusModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/JanusVideoroomComponent.html":{"url":"components/JanusVideoroomComponent.html","title":"component - JanusVideoroomComponent","body":"\n                   \n\n\n\n\n\n  Components\n  JanusVideoroomComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/containers/janus-videoroom/janus-videoroom.component.ts\n\n\n    \n        Description\n    \n    \n        Janus videoroom component. This is a high level component to easily embed a janus videoroom in any angular webapp.\nThere are many options that can be set through Inputs. However, you can get started with the minimal example below.\nRefer to the Janus Videoroom Docs for deploying your own\nJanus media server.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n                    OnChanges\n    \n\n    \n        Example\n    \n    \n                \n                    \n\n                \n    \n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n            \n                providers\n                \n                            JanusStore\n                \n            \n\n\n            \n                selector\n                janus-videoroom\n            \n\n            \n                styleUrls\n                ./janus-videoroom.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./janus-videoroom.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                component\n                            \n                            \n                                devices\n                            \n                            \n                                httpUrl\n                            \n                            \n                                iceServers\n                            \n                            \n                                isMuted\n                            \n                            \n                                pin\n                            \n                            \n                                role\n                            \n                            \n                                roomId\n                            \n                            \n                                userId\n                            \n                            \n                                userName\n                            \n                            \n                                videoRoomComponent\n                            \n                            \n                                wsUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                janusError\n                            \n                            \n                                publishers\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isMuted\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(janusStore: JanusStore, webrtc: WebrtcService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:176\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        janusStore\n                                                  \n                                                        \n                                                                    JanusStore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        webrtc\n                                                  \n                                                        \n                                                                        WebrtcService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        component\n                    \n                \n                \n                    \n                        Type :         VideoRoomComponent\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:128\n                            \n                        \n                \n                    \n                        Component to use for implementing the video room\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n                \n                    \n                        Type :         Devices\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:113\n                            \n                        \n                \n                    \n                        Input/output devices to use. If not provided, will use the default system devices\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        httpUrl\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:79\n                            \n                        \n                \n                    \n                        URL for the http(s) interface of the Janus server. At least one of wsUrl or httpUrl must be specified.\nExample: https://janus.conf.meetecho.com/janus\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        iceServers\n                    \n                \n                \n                    \n                        Type :         IceServer[]\n\n                    \n                \n                \n                    \n                        Default value : [{urls: 'stun:stun2.l.google.com:19302'}]\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:122\n                            \n                        \n                \n                    \n                        STUN/TURN servers to use for the connection. These are passed directly to RTCPeerConnection\nRefer to the MDN Docs for details on the format.\nThe component will use a public STUN server if nothing is specified here. However, it's highly recommended that the user\ndeploy and use their own STUN/TURN server(s) for better reliability.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isMuted\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:134\n                            \n                        \n                \n                    \n                        When set to true, the user's audio is muted.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        pin\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:85\n                            \n                        \n                \n                    \n                        PIN for joining room. Must be specified if pin_required is true for the requested roomId.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        role\n                    \n                \n                \n                    \n                        Type :         JanusRole\n\n                    \n                \n                \n                    \n                        Default value : JanusRole.publisher\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:100\n                            \n                        \n                \n                    \n                        Role for the user in the videoroom.\nUsers can either be publishers or subscribers. Publishers will publish their video and audio to the room.\nSubscribers will see/hear all publishers, but won't broadcast anything.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        roomId\n                    \n                \n                \n                    \n                        Type :     string | number\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:63\n                            \n                        \n                \n                    \n                        Required Janus room id. Can be either a string or a number. This must match server configuration.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        userId\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:107\n                            \n                        \n                \n                    \n                        Numeric or string Id of publisher. Type must match server configuration. If not provided,\njanus server will automatically assign an ID to the user.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        userName\n                    \n                \n                \n                    \n                        Default value : 'janus user'\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:91\n                            \n                        \n                \n                    \n                        Display name for the user in the videoroom\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        videoRoomComponent\n                    \n                \n                \n                    \n                        Type :         VideoRoomComponent\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:148\n                            \n                        \n                \n                    \n                        Input/output devices to use. If not provided, will use the default system devices\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        wsUrl\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:71\n                            \n                        \n                \n                    \n                        URL for the websocket interface of the Janus server. At least one of wsUrl or httpUrl must be specified.\nExample: wss://janus.conf.meetecho.com/ws\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        janusError\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:154\n                            \n                        \n                \n                    \n                        Emits errors encountered. These errors are fatal.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        publishers\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:160\n                            \n                        \n                \n                    \n                        Emits list of current publishers whenever there is a change to the publisher list\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isMuted\n                    \n                \n\n\n                \n                    \n                        setisMuted(muted: boolean)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/containers/janus-videoroom/janus-videoroom.component.ts:134\n                                \n                            \n                    \n                        \n                                When set to true, the user's audio is muted.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            muted\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import * as moment from 'moment';\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core';\n\nimport { first, startWith, shareReplay, takeUntil, switchMap } from 'rxjs/operators';\nimport { Observable, Subject, combineLatest } from 'rxjs';\n\nimport {\n  Devices,\n  JanusRole,\n  PublishState,\n  Publisher,\n  RemoteFeed,\n  RemoteFeedState,\n  RoomInfo,\n  RoomInfoState,\n  IceServer,\n} from '../../models/janus.models';\n\nimport { VideoRoomComponent } from '../../models/video-room-wrapper.models';\n\nimport { JanusStore } from '../../store/janus.store';\nimport { JanusErrors, PublishOwnFeedEvent, RequestSubstreamEvent, AttachRemoteFeedEvent } from '../../models';\nimport { WebrtcService } from '../../services/janus.service';\n\n/**\n * Janus videoroom component. This is a high level component to easily embed a janus videoroom in any angular webapp.\n * There are many options that can be set through Inputs. However, you can get started with the minimal example below.\n * Refer to the {@link https://janus.conf.meetecho.com/docs/videoroom.html|Janus Videoroom Docs} for deploying your own\n * Janus media server.\n * @example\n * \n * \n *\n */\n@Component({\n  selector: 'janus-videoroom',\n  templateUrl: './janus-videoroom.component.html',\n  styleUrls: ['./janus-videoroom.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [JanusStore],\n})\nexport class JanusVideoroomComponent implements OnInit, OnDestroy, OnChanges {\n\n  /**\n   * *Required* Janus room id. Can be either a string or a number. This must match server configuration.\n   */\n  @Input()\n  roomId: string | number;\n\n  /**\n   * URL for the websocket interface of the Janus server. At least one of wsUrl or httpUrl must be specified.\n   *\n   * Example: `wss://janus.conf.meetecho.com/ws`\n   */\n  @Input()\n  wsUrl: string;\n\n  /**\n   * URL for the http(s) interface of the Janus server. At least one of wsUrl or httpUrl must be specified.\n   *\n   * Example: `https://janus.conf.meetecho.com/janus`\n   */\n  @Input()\n  httpUrl: string;\n\n  /**\n   * PIN for joining room. Must be specified if `pin_required` is true for the requested roomId.\n   */\n  @Input()\n  pin?: string;\n\n  /**\n   * Display name for the user in the videoroom\n   */\n  @Input()\n  userName = 'janus user';\n\n  /**\n   * Role for the user in the videoroom.\n   *\n   * Users can either be publishers or subscribers. Publishers will publish their video and audio to the room.\n   * Subscribers will see/hear all publishers, but won't broadcast anything.\n   */\n  @Input()\n  role: JanusRole = JanusRole.publisher;\n\n  /**\n   * Numeric or string Id of publisher. Type must match server configuration. If not provided,\n   * janus server will automatically assign an ID to the user.\n   */\n  @Input()\n  userId?: string;\n\n  /**\n   * Input/output devices to use. If not provided, will use the default system devices\n   */\n  @Input()\n  devices?: Devices;\n\n  /**\n   * STUN/TURN servers to use for the connection. These are passed directly to `RTCPeerConnection`\n   * Refer to the {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer|MDN Docs} for details on the format.\n   * The component will use a public STUN server if nothing is specified here. However, it's highly recommended that the user\n   * deploy and use their own STUN/TURN server(s) for better reliability.\n   */\n  @Input()\n  iceServers: IceServer[] = [{urls: 'stun:stun2.l.google.com:19302'}];\n\n  /**\n   * Component to use for implementing the video room\n   */\n  @Input()\n  component: VideoRoomComponent;\n\n  /**\n   * When set to true, the user's audio is muted.\n   */\n  @Input()\n  set isMuted(muted: boolean) {\n    this.muted = muted;\n    this._setMuted(muted);\n  }\n\n  /**\n   * @ignore\n   */\n  get isMuted(): boolean { return this.muted; }\n\n  /**\n   * Input/output devices to use. If not provided, will use the default system devices\n   */\n  @Input()\n  videoRoomComponent?: VideoRoomComponent;\n\n  /**\n   * Emits errors encountered. These errors are fatal.\n   */\n  @Output()\n  janusError = new EventEmitter();\n\n  /**\n   * Emits list of current publishers whenever there is a change to the publisher list\n   */\n  @Output()\n  publishers = new EventEmitter();\n\n  /** @internal */\n  roomInfo$: Observable;\n  /** @internal */\n  remoteFeeds$: Observable;\n\n  /** @internal */\n  @ViewChild('container')\n  container: ElementRef;\n\n  /** @internal */\n  showDefaultRoom = false;\n\n  private muted = false;\n  private destroy$ = new Subject();\n  private janusServerUrl: string;\n\n  constructor(\n    private readonly janusStore: JanusStore,\n    private webrtc: WebrtcService,\n  ) { }\n\n  async ngOnInit(): Promise {\n    // Initialize variables and load the room/user\n\n    this.janusServerUrl = this.wsUrl ? this.wsUrl : this.httpUrl;\n\n    this.remoteFeeds$ = this.janusStore.remoteFeeds$.pipe(shareReplay(1));\n\n    this.roomInfo$ = this.janusStore.roomInfo$.pipe(\n      shareReplay(1)\n    );\n\n    // @ts-ignore\n    if (window.Cypress) {\n      // @ts-ignore\n      window.janusStore = this.janusStore;\n    }\n\n    // This ensures that the user has already granted all permissions before we\n    // start setting up the videoroom. Otherwise there are a lot of weird race\n    // conditions to consider. I don't love this because it doesn't handle the\n    // situation where a custom videoroom doesn't require permissions for any\n    // capture devices. However, that's probably not a common use case.\n    if (!this.devices) {\n      this.devices = await this.webrtc.getDefaultDevices();\n    }\n    const stream = await this.webrtc.getUserMedia('', '');\n    this.webrtc.clearMediaStream(stream);\n    this.setupJanusRoom();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  ngOnChanges(changes): void {\n    // For some changes, we refresh the entire session from scratch\n\n    const resetKeys = [\n      'roomId',\n      'wsUrl',\n      'httpUrl',\n      'iceServers',\n      'pin',\n      'role',\n      'userName',\n      'userId',\n      'component',\n    ];\n\n    for (const key of resetKeys) {\n      if (\n        key in changes\n        && !changes[key].firstChange\n      ) {\n        this.janusServerUrl = this.wsUrl ? this.wsUrl : this.httpUrl;\n        this.janusStore.reset(this.iceServers);\n        break;\n      }\n    }\n  }\n\n  /** @internal */\n  _setMuted(muted: boolean): void {\n    this.janusStore.setMute(muted);\n  }\n\n  /** @internal */\n  emitRemoteFeeds(remoteFeeds: RemoteFeed[]): void {\n    const publishers: Publisher[] = remoteFeeds.filter((feed) => feed.state === RemoteFeedState.ready);\n    this.publishers.emit(publishers);\n  }\n\n  /** @internal */\n  setupJanusRoom(): void {\n    // Setup comms with janus server\n\n    this.janusStore.initialize(this.iceServers);\n\n    this.janusStore.state$.pipe(\n      takeUntil(this.destroy$),\n    ).subscribe(({roomInfo, remoteFeeds}) => {\n\n      const pin = this.pin ? this.pin : null;\n      const remoteFeedsArray = Object.keys(remoteFeeds).map(id => remoteFeeds[id]);\n      if (roomInfo.muted !== this.muted && roomInfo.publishState === PublishState.publishing) {\n        this._setMuted(this.muted);\n      }\n      if (roomInfo.publishState === PublishState.error) {\n        const message = JanusErrors[roomInfo.errorCode].message;\n        this.janusError.emit({code: roomInfo.errorCode, message});\n      }\n\n      this.emitRemoteFeeds(remoteFeedsArray);\n\n      switch (roomInfo.state) {\n        case RoomInfoState.initialized: {\n          this.janusStore.attachVideoRoom(this.janusServerUrl);\n          break;\n        }\n        case RoomInfoState.attached: {\n          this.janusStore.register({\n            name: this.userName,\n            userId: this.userId,\n            roomId: this.roomId,\n            pin,\n          });\n          break;\n        }\n        case RoomInfoState.attach_failed: {\n          if (this.janusServerUrl !== this.httpUrl) {\n            this.janusServerUrl = this.httpUrl;\n            setTimeout(() => {\n              this.janusStore.attachVideoRoom(this.janusServerUrl);\n            }, 100);\n          } else {\n            this.janusError.emit({code: 9999, message: 'Unable to connect to media server'});\n          }\n          break;\n        }\n      }\n    });\n  }\n\n  /** @internal */\n  onPublishOwnFeed(event: PublishOwnFeedEvent): void {\n    this.janusStore.publishOwnFeed(event);\n  }\n\n  /** @internal */\n  onRequestSubstream(event: RequestSubstreamEvent): void {\n    this.janusStore.requestSubstream(event);\n  }\n\n  /** @internal */\n  onAttachRemoteFeed(event: AttachRemoteFeedEvent): void {\n    // Attach remote feeds\n\n    const pin = this.pin ? this.pin : null;\n    const { feed, roomInfo } = event;\n    this.janusStore.attachRemoteFeed({\n      feed,\n      roomInfo,\n      pin,\n    });\n  }\n}\n\n    \n\n    \n        \n\n    \n\n    \n                \n                    ./janus-videoroom.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AudioBoxComponent', 'selector': 'janus-nvid-audio-box'},{'name': 'DefaultVideoRoomComponent', 'selector': 'janus-default-video-room'},{'name': 'DeviceSelectorComponent', 'selector': 'janus-device-selector'},{'name': 'JanusVideoroomComponent', 'selector': 'janus-videoroom'},{'name': 'SelfVideoComponent', 'selector': 'janus-self-video'},{'name': 'VideoBoxComponent', 'selector': 'janus-video-box'},{'name': 'VideoRoomWrapperComponent', 'selector': 'janus-video-room-wrapper'}];\n    var DIRECTIVES = [{'name': 'VideoRoomWrapperDirective', 'selector': '[janusVideoRoomWrapper]'}];\n    var ACTUAL_COMPONENT = {'name': 'JanusVideoroomComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PublishOwnFeedEvent.html":{"url":"interfaces/PublishOwnFeedEvent.html","title":"interface - PublishOwnFeedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PublishOwnFeedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/video-room-wrapper.models.ts\n        \n\n            \n                Description\n            \n            \n                Data for the publishOwnFeed event emitted by a videoroom. This event will\ntell the system to start publishing the local feed of the user. By default,\nyou can specify an audioDeviceId and videoDeviceId and the system will capture\nvideo/audio from those devices. Alternatively, if skipVideoCapture is set to\ntrue, the stream from the canvas element will be published without audio. The\nvideoroom will take full responsibility for drawing to the canvas element\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        audioDeviceId\n                                \n                                \n                                        canvasId\n                                \n                                \n                                        skipVideoCapture\n                                \n                                \n                                        videoDeviceId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audioDeviceId\n                                    \n                                \n                                \n                                    \n                                        audioDeviceId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Device ID for the microphone. ID matches what is returned by navigator.mediaDevics.enumerateDevices \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        canvasId\n                                    \n                                \n                                \n                                    \n                                        canvasId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    HTML ID of the canvas element. Must exist in all use cases, even not drawing on\nthe canvas manually. If document.getElementById([canvasId]) does not return a canvas\nelement, this will fail\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        skipVideoCapture\n                                    \n                                \n                                \n                                    \n                                        skipVideoCapture:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    If true, directs the service to not setup a video element. It will instead transmit\na video stream from the canvas element\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        videoDeviceId\n                                    \n                                \n                                \n                                    \n                                        videoDeviceId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Device ID for the camera. ID matches what is returned by navigator.mediaDevics.enumerateDevices \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { EventEmitter, } from '@angular/core';\n\nimport {\n  Devices,\n  JanusRole,\n  RemoteFeed,\n  RoomInfo,\n} from './janus.models';\n\n\n/**\n * Data for the publishOwnFeed event emitted by a videoroom. This event will\n * tell the system to start publishing the local feed of the user. By default,\n * you can specify an audioDeviceId and videoDeviceId and the system will capture\n * video/audio from those devices. Alternatively, if skipVideoCapture is set to\n * true, the stream from the canvas element will be published without audio. The\n * videoroom will take full responsibility for drawing to the canvas element\n */\nexport interface PublishOwnFeedEvent {\n\n  /** Device ID for the microphone. ID matches what is returned by `navigator.mediaDevics.enumerateDevices` */\n  audioDeviceId: string;\n\n  /** Device ID for the camera. ID matches what is returned by `navigator.mediaDevics.enumerateDevices` */\n  videoDeviceId: string;\n\n  /** HTML ID of the canvas element. Must exist in all use cases, even not drawing on\n   * the canvas manually. If document.getElementById([canvasId]) does not return a canvas\n   * element, this will fail\n   */\n  canvasId: string;\n\n  /** If true, directs the service to not setup a video element. It will instead transmit\n   * a video stream from the canvas element\n   */\n  skipVideoCapture: boolean;\n}\n\n\n/** Data for the requestSubstream event. The event is used to request different\n * substreams when the publisher is using multicast, which is the default.\n */\nexport interface RequestSubstreamEvent {\n  /** Remote feed that we're requesting a different substream for. */\n  feed: RemoteFeed;\n\n  /** The integer id of the stream to request. */\n  substreamId: number;\n}\n\n/** Data for the attachRemoteFeedEvent. The event will negotiate a connection to\n * receive the remote stream. This must be called on each remote feed the user wishes\n * to receive.\n */\nexport interface AttachRemoteFeedEvent {\n  /** Remote feed that we're requesting. The stream must be in the `RemoteFeedState.initialized` state. */\n  feed: RemoteFeed;\n\n  /** Room info object for the room the remote feed belongs to. */\n  roomInfo: RoomInfo;\n}\n\n/**\n * Interface for customer video room component\n *\n * Any provided custom video room must implement this interface. You need not use all of the\n * data if your use case doesn't require it. For example, a room might be publish only, in which\n * case the remoteFeeds can be ignored\n */\nexport interface VideoRoomComponent {\n\n  /** roomInfo object */\n  roomInfo: RoomInfo;\n\n  /** Role of the user */\n  role: JanusRole;\n\n  /** Which devices to user */\n  devices?: Devices;\n\n  /** List of available feeds */\n  remoteFeeds: RemoteFeed[];\n\n  /** Event to request a different substream */\n  requestSubstream: EventEmitter;\n\n  /** Event to publish a locally collected feed */\n  publishOwnFeed: EventEmitter;\n\n  /** Event to subscribe to another publisher's feed */\n  attachRemoteFeed: EventEmitter;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Publisher.html":{"url":"interfaces/Publisher.html","title":"interface - Publisher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Publisher\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/janus.models.ts\n        \n\n            \n                Description\n            \n            \n                Information for a publisher. Note that the volume/mute information is not\nvery practical in how it's implemented in janus currently. In order to get\nmeaningful information about talking/not talking, you'll need to know the\naverage background noise level of each publisher ahead of time. This is\nspecified at audio_level_average in the room. This isn't practical if you\ndon't know the publisher's system setup ahead of time. We set the\naudio_level_average to 127 in the backend configuration. That makes the\nstart/stop talking events good for knowing if the remote user has muted.\nYou might want to ignore this information depending on your use case.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        displayName\n                                \n                                \n                                        id\n                                \n                                \n                                        muted\n                                \n                                \n                                        volume\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Display name of the publisher \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Janus ID of the publisher \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        muted\n                                    \n                                \n                                \n                                    \n                                        muted:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Set to true iff the last volume event had the volume at 127 \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        volume\n                                    \n                                \n                                \n                                    \n                                        volume:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current volume of the publisher's audio. See notes in the interface description.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as moment from 'moment';\n\n/**\n * Device specifications\n */\nexport interface Devices {\n  /** Microphone Device ID */\n  audioDeviceId: string;\n\n  /** Camera Device ID */\n  videoDeviceId: string;\n\n  /** Speaker Device ID */\n  speakerDeviceId: string;\n}\n\n/**\n * Room state machine\n */\nexport enum RoomInfoState {\n  start = 'start',\n  initializing = 'initializing',\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  attach_failed = 'attach_failed',\n  joining = 'joining',\n\n  /** Once joined, you can start publishing */\n  joined = 'joined',\n  error = 'error',\n}\n\n/**\n * Current publish status\n */\nexport enum PublishState {\n  start = 'start',\n  ready = 'ready',\n  publishRequested = 'publish requested',\n  publishing = 'publishing',\n  error = 'error',\n}\n\n/**\n * Metadata for a room\n */\nexport interface RoomInfo {\n\n  /** State of the room */\n  state: RoomInfoState;\n\n  /** roomId */\n  id: string;\n\n  /** Description of the room */\n  description: string;\n\n  /** private_id assigned by janus */\n  privateId: number;\n\n  /** Value passed back in \"joined\" message */\n  otherRoomId: number;  // This comes back in the \"joined\" message. Not sure what to use it for\n\n  /** Set to error code if there was an error in the room */\n  errorCode: number;\n\n  /** Local publishing state */\n  publishState: PublishState;\n\n  /** @internal Internal stream id */\n  localStreamId: string;\n\n  /** True iff the audio is muted */\n  muted: boolean;\n}\n\n/**\n * Remote feed state machine\n */\nexport enum RemoteFeedState {\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  ready = 'ready',\n  error = 'error',\n}\n\n/**\n * Current state of a remote feed\n * There exists a remote feed object for each available publisher in the video\n * room. It's possible to attach to these\n */\nexport interface RemoteFeed {\n  /** Current state of the feed */\n  state: RemoteFeedState;\n\n  /** Id of the publisher */\n  id: string;\n\n  /** @internal */\n  streamId: string;\n\n  /** number of video tracks available */\n  numVideoTracks: number;\n\n  /** Substream requested */\n  requestedSubstream: number;\n\n  /** Substream currently being received */\n  currentSubstream: number;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /** @internal */\n  audio_codec: string;\n\n  /** @internal */\n  video_codec: string;\n\n  /** @internal */\n  volume: number;\n\n  /** @internal */\n  muted: boolean;\n\n  /** timestamp of most recent slowLink event on this feed */\n  slowLink: moment.Moment;\n}\n\n/**\n * Information for a publisher. Note that the volume/mute information is not\n * very practical in how it's implemented in janus currently. In order to get\n * meaningful information about talking/not talking, you'll need to know the\n * average background noise level of each publisher ahead of time. This is\n * specified at `audio_level_average` in the room. This isn't practical if you\n * don't know the publisher's system setup ahead of time. We set the\n * `audio_level_average` to 127 in the backend configuration. That makes the\n * start/stop talking events good for knowing if the remote user has muted.\n * You might want to ignore this information depending on your use case.\n */\nexport interface Publisher {\n\n  /** Janus ID of the publisher */\n  id: string;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /**\n   * Current volume of the publisher's audio. See notes in the interface description.\n   */\n  volume: number;\n\n  /** Set to true iff the last volume event had the volume at 127 */\n  muted: boolean;\n}\n\n/**\n * Possible roles for a user.\n */\nexport enum JanusRole {\n  /** A user in this role will publish their audio/video and see/hear all other publishers */\n  publisher = 'publisher',\n\n  /** A user in this role will *not* publish their audio/video. They will still see/hear all other publishers */\n  listener = 'listener',\n}\n\n/**\n * IceServer configuration. More details are in the {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer|MDN Docs}\n */\nexport interface IceServer {\n  urls: string;\n  username?: string;\n  credential?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RemoteFeed.html":{"url":"interfaces/RemoteFeed.html","title":"interface - RemoteFeed","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RemoteFeed\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/janus.models.ts\n        \n\n            \n                Description\n            \n            \n                Current state of a remote feed\nThere exists a remote feed object for each available publisher in the video\nroom. It's possible to attach to these\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        currentSubstream\n                                \n                                \n                                        displayName\n                                \n                                \n                                        id\n                                \n                                \n                                        numVideoTracks\n                                \n                                \n                                        requestedSubstream\n                                \n                                \n                                        slowLink\n                                \n                                \n                                        state\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        currentSubstream\n                                    \n                                \n                                \n                                    \n                                        currentSubstream:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Substream currently being received \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Display name of the publisher \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Id of the publisher \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        numVideoTracks\n                                    \n                                \n                                \n                                    \n                                        numVideoTracks:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    number of video tracks available \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requestedSubstream\n                                    \n                                \n                                \n                                    \n                                        requestedSubstream:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Substream requested \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        slowLink\n                                    \n                                \n                                \n                                    \n                                        slowLink:     moment.Moment\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     moment.Moment\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    timestamp of most recent slowLink event on this feed \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                    \n                                \n                                \n                                    \n                                        state:         RemoteFeedState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RemoteFeedState\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current state of the feed \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as moment from 'moment';\n\n/**\n * Device specifications\n */\nexport interface Devices {\n  /** Microphone Device ID */\n  audioDeviceId: string;\n\n  /** Camera Device ID */\n  videoDeviceId: string;\n\n  /** Speaker Device ID */\n  speakerDeviceId: string;\n}\n\n/**\n * Room state machine\n */\nexport enum RoomInfoState {\n  start = 'start',\n  initializing = 'initializing',\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  attach_failed = 'attach_failed',\n  joining = 'joining',\n\n  /** Once joined, you can start publishing */\n  joined = 'joined',\n  error = 'error',\n}\n\n/**\n * Current publish status\n */\nexport enum PublishState {\n  start = 'start',\n  ready = 'ready',\n  publishRequested = 'publish requested',\n  publishing = 'publishing',\n  error = 'error',\n}\n\n/**\n * Metadata for a room\n */\nexport interface RoomInfo {\n\n  /** State of the room */\n  state: RoomInfoState;\n\n  /** roomId */\n  id: string;\n\n  /** Description of the room */\n  description: string;\n\n  /** private_id assigned by janus */\n  privateId: number;\n\n  /** Value passed back in \"joined\" message */\n  otherRoomId: number;  // This comes back in the \"joined\" message. Not sure what to use it for\n\n  /** Set to error code if there was an error in the room */\n  errorCode: number;\n\n  /** Local publishing state */\n  publishState: PublishState;\n\n  /** @internal Internal stream id */\n  localStreamId: string;\n\n  /** True iff the audio is muted */\n  muted: boolean;\n}\n\n/**\n * Remote feed state machine\n */\nexport enum RemoteFeedState {\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  ready = 'ready',\n  error = 'error',\n}\n\n/**\n * Current state of a remote feed\n * There exists a remote feed object for each available publisher in the video\n * room. It's possible to attach to these\n */\nexport interface RemoteFeed {\n  /** Current state of the feed */\n  state: RemoteFeedState;\n\n  /** Id of the publisher */\n  id: string;\n\n  /** @internal */\n  streamId: string;\n\n  /** number of video tracks available */\n  numVideoTracks: number;\n\n  /** Substream requested */\n  requestedSubstream: number;\n\n  /** Substream currently being received */\n  currentSubstream: number;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /** @internal */\n  audio_codec: string;\n\n  /** @internal */\n  video_codec: string;\n\n  /** @internal */\n  volume: number;\n\n  /** @internal */\n  muted: boolean;\n\n  /** timestamp of most recent slowLink event on this feed */\n  slowLink: moment.Moment;\n}\n\n/**\n * Information for a publisher. Note that the volume/mute information is not\n * very practical in how it's implemented in janus currently. In order to get\n * meaningful information about talking/not talking, you'll need to know the\n * average background noise level of each publisher ahead of time. This is\n * specified at `audio_level_average` in the room. This isn't practical if you\n * don't know the publisher's system setup ahead of time. We set the\n * `audio_level_average` to 127 in the backend configuration. That makes the\n * start/stop talking events good for knowing if the remote user has muted.\n * You might want to ignore this information depending on your use case.\n */\nexport interface Publisher {\n\n  /** Janus ID of the publisher */\n  id: string;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /**\n   * Current volume of the publisher's audio. See notes in the interface description.\n   */\n  volume: number;\n\n  /** Set to true iff the last volume event had the volume at 127 */\n  muted: boolean;\n}\n\n/**\n * Possible roles for a user.\n */\nexport enum JanusRole {\n  /** A user in this role will publish their audio/video and see/hear all other publishers */\n  publisher = 'publisher',\n\n  /** A user in this role will *not* publish their audio/video. They will still see/hear all other publishers */\n  listener = 'listener',\n}\n\n/**\n * IceServer configuration. More details are in the {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer|MDN Docs}\n */\nexport interface IceServer {\n  urls: string;\n  username?: string;\n  credential?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestSubstreamEvent.html":{"url":"interfaces/RequestSubstreamEvent.html","title":"interface - RequestSubstreamEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RequestSubstreamEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/video-room-wrapper.models.ts\n        \n\n            \n                Description\n            \n            \n                Data for the requestSubstream event. The event is used to request different\nsubstreams when the publisher is using multicast, which is the default.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        feed\n                                \n                                \n                                        substreamId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        feed\n                                    \n                                \n                                \n                                    \n                                        feed:         RemoteFeed\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RemoteFeed\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Remote feed that we're requesting a different substream for. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        substreamId\n                                    \n                                \n                                \n                                    \n                                        substreamId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The integer id of the stream to request. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { EventEmitter, } from '@angular/core';\n\nimport {\n  Devices,\n  JanusRole,\n  RemoteFeed,\n  RoomInfo,\n} from './janus.models';\n\n\n/**\n * Data for the publishOwnFeed event emitted by a videoroom. This event will\n * tell the system to start publishing the local feed of the user. By default,\n * you can specify an audioDeviceId and videoDeviceId and the system will capture\n * video/audio from those devices. Alternatively, if skipVideoCapture is set to\n * true, the stream from the canvas element will be published without audio. The\n * videoroom will take full responsibility for drawing to the canvas element\n */\nexport interface PublishOwnFeedEvent {\n\n  /** Device ID for the microphone. ID matches what is returned by `navigator.mediaDevics.enumerateDevices` */\n  audioDeviceId: string;\n\n  /** Device ID for the camera. ID matches what is returned by `navigator.mediaDevics.enumerateDevices` */\n  videoDeviceId: string;\n\n  /** HTML ID of the canvas element. Must exist in all use cases, even not drawing on\n   * the canvas manually. If document.getElementById([canvasId]) does not return a canvas\n   * element, this will fail\n   */\n  canvasId: string;\n\n  /** If true, directs the service to not setup a video element. It will instead transmit\n   * a video stream from the canvas element\n   */\n  skipVideoCapture: boolean;\n}\n\n\n/** Data for the requestSubstream event. The event is used to request different\n * substreams when the publisher is using multicast, which is the default.\n */\nexport interface RequestSubstreamEvent {\n  /** Remote feed that we're requesting a different substream for. */\n  feed: RemoteFeed;\n\n  /** The integer id of the stream to request. */\n  substreamId: number;\n}\n\n/** Data for the attachRemoteFeedEvent. The event will negotiate a connection to\n * receive the remote stream. This must be called on each remote feed the user wishes\n * to receive.\n */\nexport interface AttachRemoteFeedEvent {\n  /** Remote feed that we're requesting. The stream must be in the `RemoteFeedState.initialized` state. */\n  feed: RemoteFeed;\n\n  /** Room info object for the room the remote feed belongs to. */\n  roomInfo: RoomInfo;\n}\n\n/**\n * Interface for customer video room component\n *\n * Any provided custom video room must implement this interface. You need not use all of the\n * data if your use case doesn't require it. For example, a room might be publish only, in which\n * case the remoteFeeds can be ignored\n */\nexport interface VideoRoomComponent {\n\n  /** roomInfo object */\n  roomInfo: RoomInfo;\n\n  /** Role of the user */\n  role: JanusRole;\n\n  /** Which devices to user */\n  devices?: Devices;\n\n  /** List of available feeds */\n  remoteFeeds: RemoteFeed[];\n\n  /** Event to request a different substream */\n  requestSubstream: EventEmitter;\n\n  /** Event to publish a locally collected feed */\n  publishOwnFeed: EventEmitter;\n\n  /** Event to subscribe to another publisher's feed */\n  attachRemoteFeed: EventEmitter;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RoomInfo.html":{"url":"interfaces/RoomInfo.html","title":"interface - RoomInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RoomInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/janus.models.ts\n        \n\n            \n                Description\n            \n            \n                Metadata for a room\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        description\n                                \n                                \n                                        errorCode\n                                \n                                \n                                        id\n                                \n                                \n                                        muted\n                                \n                                \n                                        otherRoomId\n                                \n                                \n                                        privateId\n                                \n                                \n                                        publishState\n                                \n                                \n                                        state\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Description of the room \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorCode\n                                    \n                                \n                                \n                                    \n                                        errorCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Set to error code if there was an error in the room \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    roomId \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        muted\n                                    \n                                \n                                \n                                    \n                                        muted:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    True iff the audio is muted \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        otherRoomId\n                                    \n                                \n                                \n                                    \n                                        otherRoomId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Value passed back in \"joined\" message \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        privateId\n                                    \n                                \n                                \n                                    \n                                        privateId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    private_id assigned by janus \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publishState\n                                    \n                                \n                                \n                                    \n                                        publishState:         PublishState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PublishState\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Local publishing state \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                    \n                                \n                                \n                                    \n                                        state:         RoomInfoState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RoomInfoState\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    State of the room \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as moment from 'moment';\n\n/**\n * Device specifications\n */\nexport interface Devices {\n  /** Microphone Device ID */\n  audioDeviceId: string;\n\n  /** Camera Device ID */\n  videoDeviceId: string;\n\n  /** Speaker Device ID */\n  speakerDeviceId: string;\n}\n\n/**\n * Room state machine\n */\nexport enum RoomInfoState {\n  start = 'start',\n  initializing = 'initializing',\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  attach_failed = 'attach_failed',\n  joining = 'joining',\n\n  /** Once joined, you can start publishing */\n  joined = 'joined',\n  error = 'error',\n}\n\n/**\n * Current publish status\n */\nexport enum PublishState {\n  start = 'start',\n  ready = 'ready',\n  publishRequested = 'publish requested',\n  publishing = 'publishing',\n  error = 'error',\n}\n\n/**\n * Metadata for a room\n */\nexport interface RoomInfo {\n\n  /** State of the room */\n  state: RoomInfoState;\n\n  /** roomId */\n  id: string;\n\n  /** Description of the room */\n  description: string;\n\n  /** private_id assigned by janus */\n  privateId: number;\n\n  /** Value passed back in \"joined\" message */\n  otherRoomId: number;  // This comes back in the \"joined\" message. Not sure what to use it for\n\n  /** Set to error code if there was an error in the room */\n  errorCode: number;\n\n  /** Local publishing state */\n  publishState: PublishState;\n\n  /** @internal Internal stream id */\n  localStreamId: string;\n\n  /** True iff the audio is muted */\n  muted: boolean;\n}\n\n/**\n * Remote feed state machine\n */\nexport enum RemoteFeedState {\n  initialized = 'initialized',\n  attaching = 'attaching',\n  attached = 'attached',\n  ready = 'ready',\n  error = 'error',\n}\n\n/**\n * Current state of a remote feed\n * There exists a remote feed object for each available publisher in the video\n * room. It's possible to attach to these\n */\nexport interface RemoteFeed {\n  /** Current state of the feed */\n  state: RemoteFeedState;\n\n  /** Id of the publisher */\n  id: string;\n\n  /** @internal */\n  streamId: string;\n\n  /** number of video tracks available */\n  numVideoTracks: number;\n\n  /** Substream requested */\n  requestedSubstream: number;\n\n  /** Substream currently being received */\n  currentSubstream: number;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /** @internal */\n  audio_codec: string;\n\n  /** @internal */\n  video_codec: string;\n\n  /** @internal */\n  volume: number;\n\n  /** @internal */\n  muted: boolean;\n\n  /** timestamp of most recent slowLink event on this feed */\n  slowLink: moment.Moment;\n}\n\n/**\n * Information for a publisher. Note that the volume/mute information is not\n * very practical in how it's implemented in janus currently. In order to get\n * meaningful information about talking/not talking, you'll need to know the\n * average background noise level of each publisher ahead of time. This is\n * specified at `audio_level_average` in the room. This isn't practical if you\n * don't know the publisher's system setup ahead of time. We set the\n * `audio_level_average` to 127 in the backend configuration. That makes the\n * start/stop talking events good for knowing if the remote user has muted.\n * You might want to ignore this information depending on your use case.\n */\nexport interface Publisher {\n\n  /** Janus ID of the publisher */\n  id: string;\n\n  /** Display name of the publisher */\n  displayName: string;\n\n  /**\n   * Current volume of the publisher's audio. See notes in the interface description.\n   */\n  volume: number;\n\n  /** Set to true iff the last volume event had the volume at 127 */\n  muted: boolean;\n}\n\n/**\n * Possible roles for a user.\n */\nexport enum JanusRole {\n  /** A user in this role will publish their audio/video and see/hear all other publishers */\n  publisher = 'publisher',\n\n  /** A user in this role will *not* publish their audio/video. They will still see/hear all other publishers */\n  listener = 'listener',\n}\n\n/**\n * IceServer configuration. More details are in the {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer|MDN Docs}\n */\nexport interface IceServer {\n  urls: string;\n  username?: string;\n  credential?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SelfVideoComponent.html":{"url":"components/SelfVideoComponent.html","title":"component - SelfVideoComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SelfVideoComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/components/self-video/self-video.component.ts\n\n\n    \n        Description\n    \n    \n        Component for rendering video captured from a local device. Component both renders\nthe video and emits events to publish it to the janus server\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                janus-self-video\n            \n\n            \n                styleUrls\n                ./self-video.component.scss,../../styles/video-styles.scss\n            \n\n\n\n            \n                templateUrl\n                ./self-video.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                devices\n                            \n                            \n                                roomInfo\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                publishOwnFeed\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    devices\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/lib/components/self-video/self-video.component.ts:53\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n                \n                    \n                        Type :         Devices\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/self-video/self-video.component.ts:41\n                            \n                        \n                \n                    \n                        Devices to capture \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        roomInfo\n                    \n                \n                \n                    \n                        Type :         RoomInfo\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/self-video/self-video.component.ts:37\n                            \n                        \n                \n                    \n                        roomInfo object. Component will raise a fatal error if the state\nis not RoomInfoState.joined\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        publishOwnFeed\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/self-video/self-video.component.ts:49\n                            \n                        \n                \n                    \n                        Event to publish the local stream \n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n\n\n                \n                    \n                        setdevices(devices)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/components/self-video/self-video.component.ts:42\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            devices\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output\n} from '@angular/core';\n\nimport {\n  Devices,\n  PublishOwnFeedEvent,\n  PublishState,\n  RoomInfo,\n  RoomInfoState,\n} from '../../models';\n\n/**\n * Component for rendering video captured from a local device. Component both renders\n * the video and emits events to publish it to the janus server\n */\n@Component({\n  selector: 'janus-self-video',\n  templateUrl: './self-video.component.html',\n  styleUrls: [\n    './self-video.component.scss',\n    '../../styles/video-styles.scss',\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelfVideoComponent implements OnInit, AfterViewInit {\n\n  /** roomInfo object. Component will raise a fatal error if the state\n   * is not `RoomInfoState.joined`\n   */\n  @Input() roomInfo: RoomInfo;\n\n  /** Devices to capture */\n  @Input()\n  get devices(): Devices { return this.currentDevices; }\n  set devices(devices) {\n    this.onDevicesChange(this.currentDevices, devices);\n    this.currentDevices = devices;\n  }\n\n  /** Event to publish the local stream */\n  @Output()\n  publishOwnFeed = new EventEmitter();\n\n  private currentDevices: Devices;\n  private devicesInitialized = false;\n  private afterViewInitRan = false;\n\n  constructor() { }\n\n  ngOnInit(): void { }\n\n  async ngAfterViewInit(): Promise {\n    // Attach the canvas-self element\n    this.afterViewInitRan = true;\n    if (this.roomInfo.state !== RoomInfoState.joined) {\n      throw new Error('RoomInfo.state must be \"joined\" before creating a self-video component');\n    }\n\n    const audioDeviceId = this.devices ? this.devices.audioDeviceId : null;\n    const videoDeviceId = this.devices ? this.devices.videoDeviceId : null;\n    this._publishOwnFeed(audioDeviceId, videoDeviceId);\n  }\n\n  /** @internal */\n  _publishOwnFeed(audioDeviceId: string, videoDeviceId: string): void {\n    // Separate this for testing\n    this.publishOwnFeed.emit({\n      audioDeviceId,\n      videoDeviceId,\n      canvasId: 'canvas-self',\n      skipVideoCapture: false,\n    });\n  }\n\n  /** @internal */\n  onDevicesChange(previousDevices: Devices, newDevices: Devices): void {\n    if (!newDevices) {\n      return;\n    }\n\n    /* Minor dragon:\n     * publishOwnFeed won't work unless we know the devices **and** the canvas element already exists.\n     * Therefore, the first call to publishOwnFeed comes in ngAfterViewInit. After the first publish, we\n     * can adjust the devices in onDevicesChange.\n     */\n    if (!this.afterViewInitRan) {\n      // Haven't loaded yet\n      return;\n    }\n\n    if (\n      newDevices\n      && previousDevices\n      && newDevices.videoDeviceId === previousDevices.videoDeviceId\n      && newDevices.audioDeviceId === previousDevices.audioDeviceId\n    ) {\n      // Same capture devices. nothing to do here\n      return;\n    }\n\n    // There still exists a tiny race condition here. If the user changes the deviceId between a publishOwnFeed\n    // call in ngAfterViewInit and before the publish is complete, that change won't be registered :/\n    if (this.roomInfo.publishState === PublishState.publishRequested) {\n      return;\n    }\n    this._publishOwnFeed(newDevices.audioDeviceId, newDevices.videoDeviceId);\n  }\n}\n\n    \n\n    \n        \n  \n    \n  \n\n\n    \n\n    \n                \n                    ./self-video.component.scss\n                \n                ul.filter-list {\n    padding: 0;\n    margin: 0;\n\n    li {\n        display: block;\n    }\n\n    img.active {\n        border: 1px solid white;\n    }\n\n    img:hover {\n        border: 1px solid #ccc;\n    }\n}\n\ndiv.filter-box {\n    img {\n        width: 25px;\n        height: 25px;\n        cursor: pointer;\n        border-radius: 5px;\n        padding: 3px;\n        border: 1px solid rgba(0,0,0,0);    // Prevents resizing when adding a visible border\n    }\n\n    padding: 2px !important;\n}\n\n                \n                    ../../styles/video-styles.scss\n                \n                div.video-container {\n    height: 100%;\n\n    video,canvas {\n        height: 100%;\n        width: 100%;\n        font-size: 0px;\n        display: block;\n        object-fit: fill;\n    }\n\n    canvas {\n        transform: scaleX(-1);\n    }\n    video {\n        /* border: 1px solid rgba(0,0,0,.5); */\n    }\n\n    div.interior-box {\n        height: 100%;\n        position: relative;\n        border: 1px solid rgba(0,0,0,.5);\n    }\n\n    div.self {\n        border: 1px solid #8ae010;\n    }\n\n    div.overlay {\n        position: absolute;\n        top: 1px;\n        left: 1px;\n        padding: 5px;\n        background-color: rgba(53,53,53,.7);\n\n        font-family: OpenSans;\n        font-size: 16px;\n        font-weight: 600;\n        font-stretch: normal;\n        font-style: normal;\n        line-height: normal;\n        letter-spacing: -0.24px;\n        color: #ffffff;\n    }\n}\n\ndiv.loading-blocker {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(255, 255, 255, .85);\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    p {\n        font-size: 24px;\n        color: #777;\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        '\n    var COMPONENTS = [{'name': 'AudioBoxComponent', 'selector': 'janus-nvid-audio-box'},{'name': 'DefaultVideoRoomComponent', 'selector': 'janus-default-video-room'},{'name': 'DeviceSelectorComponent', 'selector': 'janus-device-selector'},{'name': 'JanusVideoroomComponent', 'selector': 'janus-videoroom'},{'name': 'SelfVideoComponent', 'selector': 'janus-self-video'},{'name': 'VideoBoxComponent', 'selector': 'janus-video-box'},{'name': 'VideoRoomWrapperComponent', 'selector': 'janus-video-room-wrapper'}];\n    var DIRECTIVES = [{'name': 'VideoRoomWrapperDirective', 'selector': '[janusVideoRoomWrapper]'}];\n    var ACTUAL_COMPONENT = {'name': 'SelfVideoComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/VideoBoxComponent.html":{"url":"components/VideoBoxComponent.html","title":"component - VideoBoxComponent","body":"\n                   \n\n\n\n\n\n  Components\n  VideoBoxComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/components/video-box/video-box.component.ts\n\n\n    \n        Description\n    \n    \n        Component for rendering an audio/video stream received from a remote publisher\nIn addition to rendering the video content, this will keep track of the streaming\nperformance and request higher/lower bitrate streams when simulcast is available.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnChanges\n                    OnDestroy\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                janus-video-box\n            \n\n            \n                styleUrls\n                ./video-box.component.scss,../../styles/video-styles.scss\n            \n\n\n\n            \n                templateUrl\n                ./video-box.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                videoQualityHelper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                monitorVideoQuality\n                            \n                            \n                                onDeviceChange\n                            \n                            \n                                onMaximize\n                            \n                            \n                                setupSubscriptions\n                            \n                            \n                                switchSubstream\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                devices\n                            \n                            \n                                mode\n                            \n                            \n                                remoteFeed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                maximize\n                            \n                            \n                                requestSubstream\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    devices\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(janusService: JanusService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/components/video-box/video-box.component.ts:89\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        janusService\n                                                  \n                                                        \n                                                                    JanusService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n                \n                    \n                        Type :         Devices\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-box/video-box.component.ts:54\n                            \n                        \n                \n                    \n                        Requested output device (speaker). If available, this will dynamically change the\nspeaker device. This is not available in chrome on android\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        mode\n                    \n                \n                \n                    \n                        Type :     \"speaker\" | \"grid\"\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-box/video-box.component.ts:48\n                            \n                        \n                \n                    \n                        Current mode of the videoroom \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        remoteFeed\n                    \n                \n                \n                    \n                        Type :         RemoteFeed\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-box/video-box.component.ts:45\n                            \n                        \n                \n                    \n                        RemoteFeed object \n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        maximize\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-box/video-box.component.ts:64\n                            \n                        \n                \n                    \n                        Event for switching to speaker/grid view \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        requestSubstream\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-box/video-box.component.ts:68\n                            \n                        \n                \n                    \n                        Event for switching to speaker/grid view \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            monitorVideoQuality\n                        \n                        \n                    \n                \n            \n            \n                \nmonitorVideoQuality(slowLink: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/video-box/video-box.component.ts:166\n                \n            \n\n\n            \n                \n                    Called anytime the remoteFeed changes plus on a set interval \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slowLink\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onDeviceChange\n                        \n                        \n                    \n                \n            \n            \n                \nonDeviceChange(devices: Devices)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/video-box/video-box.component.ts:211\n                \n            \n\n\n            \n                \n                    Attempts to change speaker if requested \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    devices\n                                    \n                                                Devices\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onMaximize\n                        \n                        \n                    \n                \n            \n            \n                \nonMaximize()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/video-box/video-box.component.ts:206\n                \n            \n\n\n            \n                \n                    Callback for the maximize button \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setupSubscriptions\n                        \n                        \n                    \n                \n            \n            \n                \nsetupSubscriptions()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/video-box/video-box.component.ts:133\n                \n            \n\n\n            \n                \n                    Interval for checking video quality \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            switchSubstream\n                        \n                        \n                    \n                \n            \n            \n                \nswitchSubstream(substreamId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/video-box/video-box.component.ts:197\n                \n            \n\n\n            \n                \n                    Called to request a new substream \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    substreamId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            videoQualityHelper\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     VideoQualityHelper\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/components/video-box/video-box.component.ts:80\n                            \n                        \n\n                \n                    \n                        Helper class for monitoring video quality and determining when to request a new substream \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n\n\n                \n                    \n                        setdevices(devices)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/components/video-box/video-box.component.ts:57\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            devices\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import * as moment from 'moment';\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  OnChanges,\n  Output,\n  ViewChild,\n} from '@angular/core';\n\nimport { Subject, interval, fromEvent } from 'rxjs';\nimport { first, takeUntil, debounce } from 'rxjs/operators';\n\nimport { RemoteFeed, JanusRole, Devices, RequestSubstreamEvent } from '../../models';\nimport { randomString } from '../../shared';\nimport { JanusService } from '../../services/janus.service';\n\nimport { VideoQualityHelper } from './video-quality-helper';\n\n\n/**\n * Component for rendering an audio/video stream received from a remote publisher\n *\n * In addition to rendering the video content, this will keep track of the streaming\n * performance and request higher/lower bitrate streams when simulcast is available.\n */\n@Component({\n  selector: 'janus-video-box',\n  templateUrl: './video-box.component.html',\n  styleUrls: [\n    './video-box.component.scss',\n    '../../styles/video-styles.scss',\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class VideoBoxComponent implements OnInit, OnChanges, OnDestroy, AfterViewInit {\n\n  /** RemoteFeed object */\n  @Input() remoteFeed: RemoteFeed;\n\n  /** Current mode of the videoroom */\n  @Input() mode: 'speaker' | 'grid';\n\n  /** Requested output device (speaker). If available, this will dynamically change the\n   * speaker device. This is not available in chrome on android\n   */\n  @Input()\n  get devices(): Devices {\n    return this.localDevices;\n  }\n  set devices(devices: Devices) {\n    this.localDevices = devices;\n    this.onDeviceChange(devices);\n  }\n\n  /** Event for switching to speaker/grid view */\n  @Output()\n  maximize = new EventEmitter();\n\n  /** Event for switching to speaker/grid view */\n  @Output()\n  requestSubstream = new EventEmitter();\n\n  /** @internal */\n  public videoId: string;\n\n  /** @internal */\n  public optionsOpen = false;\n\n  /** @internal */\n  public videoAvailable = false;\n\n  /** Helper class for monitoring video quality and determining when to request a new substream */\n  videoQualityHelper: VideoQualityHelper; // public for testing purposes\n\n  /** @internal */\n  private localDevices: Devices;\n\n  /** @internal */\n  private destroy$ = new Subject();\n\n  /** @internal */\n  @ViewChild('videoElement') video: ElementRef;\n\n  constructor(\n    private janusService: JanusService\n  ) {\n    this.videoQualityHelper = new VideoQualityHelper(3);\n  }\n\n  ngOnInit(): void {\n    // Set my unique id for the video\n    this.videoId = 'video-' + this.remoteFeed.id + this.mode;\n    this.setupSubscriptions();\n  }\n\n  ngAfterViewInit(): void {\n    this._attachMediaStream();\n    this.setSpeaker(this.devices);\n  }\n\n  ngOnChanges(changes): void {\n    if ('remoteFeed' in changes) {\n      // If there's a change in the remoteFeed, run the video quality monitor task\n      let slowLink = false;\n\n      if (\n        changes.remoteFeed.previousValue\n        && changes.remoteFeed.previousValue.slowLink !== changes.remoteFeed.currentValue.slowLink\n      ) {\n        slowLink = true;\n      }\n\n      this.monitorVideoQuality(slowLink);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n    if (this.video) {\n      this.video.nativeElement.pause();\n    }\n  }\n\n  /** Interval for checking video quality */\n  setupSubscriptions(): void {\n    interval(1000).pipe(\n      takeUntil(this.destroy$)\n    ).subscribe(() => {\n      this.monitorVideoQuality(false);\n    });\n  }\n\n  /** @internal */\n  _attachMediaStream(): void {\n    this.janusService.attachMediaStream(this.videoId, this.remoteFeed.streamId);\n  }\n\n  /** @internal */\n  private setSpeaker(devices: Devices): void {\n    // Given the devices, set the output sound device\n    if (\n      this.video\n      && this.video.nativeElement\n      && this.video.nativeElement.setSinkId\n      && devices\n      && devices.speakerDeviceId\n    ) {\n      this.video.nativeElement.setSinkId(devices.speakerDeviceId);\n    }\n  }\n\n  /** @internal */\n  onPlay(): void {\n    this.videoAvailable = true;\n  }\n\n  /** Called anytime the `remoteFeed` changes plus on a set interval */\n  monitorVideoQuality(slowLink: boolean): void {\n    // Periodic task to monitor the video quality and change substream if necessary\n\n    if (!this.remoteFeed) {\n      // If we don't have a remoteFeed, nothing we can do here\n      return;\n    }\n\n    if (!this.videoAvailable && this.video) {\n      // Sometimes this needs a kick start. For example, if the user takes a second to click\n      // the \"allow\" button for video/mic access, the autoplay on the video element won't\n      // actually autoplay\n      this.video.nativeElement.play();\n    }\n\n    const currentSubstream = this.remoteFeed.currentSubstream;\n    if (this.remoteFeed.numVideoTracks === 0 || slowLink) {\n      this.videoQualityHelper.streamError(currentSubstream);\n      if (currentSubstream > 0) {\n        this.switchSubstream(currentSubstream - 1);\n      }\n    } else {\n      const newSubstream = this.videoQualityHelper.ping(currentSubstream);\n      if (newSubstream > currentSubstream) {\n        this.videoQualityHelper.streamEnd(currentSubstream);\n        this.switchSubstream(newSubstream);\n      }\n    }\n  }\n\n  /** Called to request a new substream */\n  switchSubstream(substreamId: number): void {\n    // Switch the substream if we haven't already requested this substream\n    if (this.remoteFeed.requestedSubstream !== substreamId) {\n      console.log('switching substream', substreamId, this.videoId);\n      this.requestSubstream.emit({feed: this.remoteFeed, substreamId});\n    }\n  }\n\n  /** Callback for the maximize button */\n  onMaximize(): void {\n    this.maximize.emit(this.remoteFeed);\n  }\n\n  /** Attempts to change speaker if requested */\n  onDeviceChange(devices: Devices): void {\n    this.setSpeaker(devices);\n  }\n}\n\n    \n\n    \n        \n  \n    \n\n    \n      {{ remoteFeed.displayName }}\n    \n\n    \n\n      \n      \n\n      \n      \n    \n\n    \n       Loading... \n    \n  \n\n\n    \n\n    \n                \n                    ./video-box.component.scss\n                \n                div.display-name {\n    display: flex;\n    z-index: 1;\n\n    span.separator {\n        margin: 0 5px 0 10px;\n    }\n\n    i.fas {\n        font-size: 14px;\n        margin: 0 5px 0 5px;\n        cursor: pointer;\n    }\n}\n\ndiv.maximize {\n   left: auto !important;\n   right: 1px;\n   cursor: pointer;\n   z-index: 1;\n}\n\n                \n                    ../../styles/video-styles.scss\n                \n                div.video-container {\n    height: 100%;\n\n    video,canvas {\n        height: 100%;\n        width: 100%;\n        font-size: 0px;\n        display: block;\n        object-fit: fill;\n    }\n\n    canvas {\n        transform: scaleX(-1);\n    }\n    video {\n        /* border: 1px solid rgba(0,0,0,.5); */\n    }\n\n    div.interior-box {\n        height: 100%;\n        position: relative;\n        border: 1px solid rgba(0,0,0,.5);\n    }\n\n    div.self {\n        border: 1px solid #8ae010;\n    }\n\n    div.overlay {\n        position: absolute;\n        top: 1px;\n        left: 1px;\n        padding: 5px;\n        background-color: rgba(53,53,53,.7);\n\n        font-family: OpenSans;\n        font-size: 16px;\n        font-weight: 600;\n        font-stretch: normal;\n        font-style: normal;\n        line-height: normal;\n        letter-spacing: -0.24px;\n        color: #ffffff;\n    }\n}\n\ndiv.loading-blocker {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(255, 255, 255, .85);\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    p {\n        font-size: 24px;\n        color: #777;\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                {{ remoteFeed.displayName }}                                               Loading...       '\n    var COMPONENTS = [{'name': 'AudioBoxComponent', 'selector': 'janus-nvid-audio-box'},{'name': 'DefaultVideoRoomComponent', 'selector': 'janus-default-video-room'},{'name': 'DeviceSelectorComponent', 'selector': 'janus-device-selector'},{'name': 'JanusVideoroomComponent', 'selector': 'janus-videoroom'},{'name': 'SelfVideoComponent', 'selector': 'janus-self-video'},{'name': 'VideoBoxComponent', 'selector': 'janus-video-box'},{'name': 'VideoRoomWrapperComponent', 'selector': 'janus-video-room-wrapper'}];\n    var DIRECTIVES = [{'name': 'VideoRoomWrapperDirective', 'selector': '[janusVideoRoomWrapper]'}];\n    var ACTUAL_COMPONENT = {'name': 'VideoBoxComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VideoRoomComponent.html":{"url":"interfaces/VideoRoomComponent.html","title":"interface - VideoRoomComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  VideoRoomComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/video-room-wrapper.models.ts\n        \n\n            \n                Description\n            \n            \n                Interface for customer video room component\nAny provided custom video room must implement this interface. You need not use all of the\ndata if your use case doesn't require it. For example, a room might be publish only, in which\ncase the remoteFeeds can be ignored\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        attachRemoteFeed\n                                \n                                \n                                            Optional\n                                        devices\n                                \n                                \n                                        publishOwnFeed\n                                \n                                \n                                        remoteFeeds\n                                \n                                \n                                        requestSubstream\n                                \n                                \n                                        role\n                                \n                                \n                                        roomInfo\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        attachRemoteFeed\n                                    \n                                \n                                \n                                    \n                                        attachRemoteFeed:     EventEmitter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     EventEmitter\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Event to subscribe to another publisher's feed \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        devices\n                                    \n                                \n                                \n                                    \n                                        devices:         Devices\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Devices\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Which devices to user \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publishOwnFeed\n                                    \n                                \n                                \n                                    \n                                        publishOwnFeed:         EventEmitter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EventEmitter\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Event to publish a locally collected feed \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        remoteFeeds\n                                    \n                                \n                                \n                                    \n                                        remoteFeeds:         RemoteFeed[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RemoteFeed[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    List of available feeds \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requestSubstream\n                                    \n                                \n                                \n                                    \n                                        requestSubstream:         EventEmitter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EventEmitter\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Event to request a different substream \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                    \n                                \n                                \n                                    \n                                        role:         JanusRole\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         JanusRole\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Role of the user \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roomInfo\n                                    \n                                \n                                \n                                    \n                                        roomInfo:         RoomInfo\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RoomInfo\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    roomInfo object \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { EventEmitter, } from '@angular/core';\n\nimport {\n  Devices,\n  JanusRole,\n  RemoteFeed,\n  RoomInfo,\n} from './janus.models';\n\n\n/**\n * Data for the publishOwnFeed event emitted by a videoroom. This event will\n * tell the system to start publishing the local feed of the user. By default,\n * you can specify an audioDeviceId and videoDeviceId and the system will capture\n * video/audio from those devices. Alternatively, if skipVideoCapture is set to\n * true, the stream from the canvas element will be published without audio. The\n * videoroom will take full responsibility for drawing to the canvas element\n */\nexport interface PublishOwnFeedEvent {\n\n  /** Device ID for the microphone. ID matches what is returned by `navigator.mediaDevics.enumerateDevices` */\n  audioDeviceId: string;\n\n  /** Device ID for the camera. ID matches what is returned by `navigator.mediaDevics.enumerateDevices` */\n  videoDeviceId: string;\n\n  /** HTML ID of the canvas element. Must exist in all use cases, even not drawing on\n   * the canvas manually. If document.getElementById([canvasId]) does not return a canvas\n   * element, this will fail\n   */\n  canvasId: string;\n\n  /** If true, directs the service to not setup a video element. It will instead transmit\n   * a video stream from the canvas element\n   */\n  skipVideoCapture: boolean;\n}\n\n\n/** Data for the requestSubstream event. The event is used to request different\n * substreams when the publisher is using multicast, which is the default.\n */\nexport interface RequestSubstreamEvent {\n  /** Remote feed that we're requesting a different substream for. */\n  feed: RemoteFeed;\n\n  /** The integer id of the stream to request. */\n  substreamId: number;\n}\n\n/** Data for the attachRemoteFeedEvent. The event will negotiate a connection to\n * receive the remote stream. This must be called on each remote feed the user wishes\n * to receive.\n */\nexport interface AttachRemoteFeedEvent {\n  /** Remote feed that we're requesting. The stream must be in the `RemoteFeedState.initialized` state. */\n  feed: RemoteFeed;\n\n  /** Room info object for the room the remote feed belongs to. */\n  roomInfo: RoomInfo;\n}\n\n/**\n * Interface for customer video room component\n *\n * Any provided custom video room must implement this interface. You need not use all of the\n * data if your use case doesn't require it. For example, a room might be publish only, in which\n * case the remoteFeeds can be ignored\n */\nexport interface VideoRoomComponent {\n\n  /** roomInfo object */\n  roomInfo: RoomInfo;\n\n  /** Role of the user */\n  role: JanusRole;\n\n  /** Which devices to user */\n  devices?: Devices;\n\n  /** List of available feeds */\n  remoteFeeds: RemoteFeed[];\n\n  /** Event to request a different substream */\n  requestSubstream: EventEmitter;\n\n  /** Event to publish a locally collected feed */\n  publishOwnFeed: EventEmitter;\n\n  /** Event to subscribe to another publisher's feed */\n  attachRemoteFeed: EventEmitter;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/VideoRoomWrapperComponent.html":{"url":"components/VideoRoomWrapperComponent.html","title":"component - VideoRoomWrapperComponent","body":"\n                   \n\n\n\n\n\n  Components\n  VideoRoomWrapperComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/components/video-room-wrapper/video-room-wrapper.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                janus-video-room-wrapper\n            \n\n            \n                styleUrls\n                ./video-room-wrapper.component.css\n            \n\n\n\n            \n                templateUrl\n                ./video-room-wrapper.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                janusVideoRoomWrapper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                loadComponent\n                            \n                            \n                                syncComponentData\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                component\n                            \n                            \n                                devices\n                            \n                            \n                                remoteFeeds\n                            \n                            \n                                role\n                            \n                            \n                                roomInfo\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                attachRemoteFeed\n                            \n                            \n                                publishOwnFeed\n                            \n                            \n                                requestSubstream\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(componentFactoryResolver: ComponentFactoryResolver)\n                    \n                \n                        \n                            \n                                Defined in src/lib/components/video-room-wrapper/video-room-wrapper.component.ts:56\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        componentFactoryResolver\n                                                  \n                                                        \n                                                                        ComponentFactoryResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        component\n                    \n                \n                \n                    \n                        Type :         Type\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-room-wrapper/video-room-wrapper.component.ts:42\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        devices\n                    \n                \n                \n                    \n                        Type :         Devices\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-room-wrapper/video-room-wrapper.component.ts:39\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        remoteFeeds\n                    \n                \n                \n                    \n                        Type :         RemoteFeed[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-room-wrapper/video-room-wrapper.component.ts:40\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        role\n                    \n                \n                \n                    \n                        Type :         JanusRole\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-room-wrapper/video-room-wrapper.component.ts:38\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        roomInfo\n                    \n                \n                \n                    \n                        Type :         RoomInfo\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-room-wrapper/video-room-wrapper.component.ts:37\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        attachRemoteFeed\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-room-wrapper/video-room-wrapper.component.ts:51\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        publishOwnFeed\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-room-wrapper/video-room-wrapper.component.ts:48\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        requestSubstream\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/components/video-room-wrapper/video-room-wrapper.component.ts:45\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadComponent\n                        \n                        \n                    \n                \n            \n            \n                \nloadComponent()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/video-room-wrapper/video-room-wrapper.component.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            syncComponentData\n                        \n                        \n                    \n                \n            \n            \n                \nsyncComponentData()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/components/video-room-wrapper/video-room-wrapper.component.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            janusVideoRoomWrapper\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     VideoRoomWrapperDirective\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild(VideoRoomWrapperDirective, {static: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/lib/components/video-room-wrapper/video-room-wrapper.component.ts:53\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  Type,\n  ViewChild,\n} from '@angular/core';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { DefaultVideoRoomComponent } from '../default-video-room/default-video-room.component';\nimport { PublishOwnFeedEvent, RequestSubstreamEvent, AttachRemoteFeedEvent, VideoRoomComponent } from '../../models';\nimport { VideoRoomWrapperDirective } from './video-room-wrapper.directive';\n\nimport {\n  Devices,\n  JanusRole,\n  RemoteFeed,\n  RoomInfo,\n} from '../../models/janus.models';\n\n@Component({\n  selector: 'janus-video-room-wrapper',\n  templateUrl: './video-room-wrapper.component.html',\n  styleUrls: ['./video-room-wrapper.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VideoRoomWrapperComponent implements OnInit, OnDestroy, OnChanges {\n\n  @Input() roomInfo: RoomInfo;\n  @Input() role: JanusRole;\n  @Input() devices?: Devices;\n  @Input() remoteFeeds: RemoteFeed[];\n\n  @Input() component?: Type;\n\n  @Output()\n  requestSubstream = new EventEmitter();\n\n  @Output()\n  publishOwnFeed = new EventEmitter();\n\n  @Output()\n  attachRemoteFeed = new EventEmitter();\n\n  @ViewChild(VideoRoomWrapperDirective, {static: true}) janusVideoRoomWrapper: VideoRoomWrapperDirective;\n\n  private destroy$ = new Subject();\n  private componentRef: any;\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) { }\n\n  ngOnInit(): void {\n    this.loadComponent();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  ngOnChanges(changes): void {\n    if (this.componentRef) {\n      this.syncComponentData();\n    }\n\n    if ('component' in changes && !changes.component.firstChange) {\n      this.loadComponent();\n    }\n  }\n\n  loadComponent(): void {\n    const componentClass = this.component ? this.component : DefaultVideoRoomComponent;\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentClass);\n    const viewContainerRef = this.janusVideoRoomWrapper.viewContainerRef;\n    viewContainerRef.clear();\n\n    this.componentRef = viewContainerRef.createComponent(componentFactory);\n\n    // Listen to the event and emit them here\n    this.componentRef.instance.publishOwnFeed.pipe(\n      takeUntil(this.destroy$),\n    ).subscribe((payload: PublishOwnFeedEvent) => {\n      this.publishOwnFeed.emit(payload);\n    });\n\n    this.componentRef.instance.requestSubstream.pipe(\n      takeUntil(this.destroy$),\n    ).subscribe((payload: RequestSubstreamEvent) => {\n      this.requestSubstream.emit(payload);\n    });\n\n    this.componentRef.instance.attachRemoteFeed.pipe(\n      takeUntil(this.destroy$),\n    ).subscribe((payload: AttachRemoteFeedEvent) => {\n      this.attachRemoteFeed.emit(payload);\n    });\n\n    this.syncComponentData();\n  }\n\n  syncComponentData(): void {\n    this.componentRef.instance.roomInfo = this.roomInfo;\n    this.componentRef.instance.role = this.role;\n    this.componentRef.instance.devices = this.devices;\n    this.componentRef.instance.remoteFeeds = this.remoteFeeds;\n  }\n}\n\n    \n\n    \n        \n\n    \n\n    \n                \n                    ./video-room-wrapper.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AudioBoxComponent', 'selector': 'janus-nvid-audio-box'},{'name': 'DefaultVideoRoomComponent', 'selector': 'janus-default-video-room'},{'name': 'DeviceSelectorComponent', 'selector': 'janus-device-selector'},{'name': 'JanusVideoroomComponent', 'selector': 'janus-videoroom'},{'name': 'SelfVideoComponent', 'selector': 'janus-self-video'},{'name': 'VideoBoxComponent', 'selector': 'janus-video-box'},{'name': 'VideoRoomWrapperComponent', 'selector': 'janus-video-room-wrapper'}];\n    var DIRECTIVES = [{'name': 'VideoRoomWrapperDirective', 'selector': '[janusVideoRoomWrapper]'}];\n    var ACTUAL_COMPONENT = {'name': 'VideoRoomWrapperComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/VideoRoomWrapperDirective.html":{"url":"directives/VideoRoomWrapperDirective.html","title":"directive - VideoRoomWrapperDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  VideoRoomWrapperDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/components/video-room-wrapper/video-room-wrapper.directive.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [janusVideoRoomWrapper]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                viewContainerRef\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(viewContainerRef: ViewContainerRef)\n                    \n                \n                        \n                            \n                                Defined in src/lib/components/video-room-wrapper/video-room-wrapper.directive.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        viewContainerRef\n                                                  \n                                                        \n                                                                        ViewContainerRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            viewContainerRef\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ViewContainerRef\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/components/video-room-wrapper/video-room-wrapper.directive.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n    \n\n\n    \n        import { Directive, ViewContainerRef } from '@angular/core';\n\n@Directive({\n  selector: '[janusVideoRoomWrapper]',\n})\nexport class VideoRoomWrapperDirective {\n  constructor(public viewContainerRef: ViewContainerRef) { }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WebrtcService.html":{"url":"injectables/WebrtcService.html","title":"injectable - WebrtcService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  WebrtcService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/services/janus.service.ts\n        \n\n            \n                Description\n            \n            \n                Various helper functions for querying devices\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearMediaStream\n                            \n                            \n                                    Async\n                                getDefaultDevices\n                            \n                            \n                                getUserMedia\n                            \n                            \n                                isSupportedDevice\n                            \n                            \n                                listDevices\n                            \n                            \n                                supportsSpeakerSelection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/lib/services/janus.service.ts:20\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearMediaStream\n                        \n                        \n                    \n                \n            \n            \n                \nclearMediaStream(stream: MediaStream)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/services/janus.service.ts:83\n                \n            \n\n\n            \n                \n                    Clear all resources for a previously created media stream\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stream\n                                    \n                                            MediaStream\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getDefaultDevices\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDefaultDevices()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/services/janus.service.ts:49\n                \n            \n\n\n            \n                \n                    Returns the device IDs for the default audio, video, and speaker device\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUserMedia\n                        \n                        \n                    \n                \n            \n            \n                \ngetUserMedia(audioDeviceId: string | null, videoDeviceId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/services/janus.service.ts:31\n                \n            \n\n\n            \n                \n                    Wrapper around getUserMedia that allows the user to specify the audio and video device ids\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    audioDeviceId\n                                    \n                                            string | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Device ID of the desired audio device. If null, audio will not be included\n\n                                    \n                                \n                                \n                                    videoDeviceId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Device ID of the desired video device.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isSupportedDevice\n                        \n                        \n                    \n                \n            \n            \n                \nisSupportedDevice()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/services/janus.service.ts:76\n                \n            \n\n\n            \n                \n                    Determines if the current device is supported. Currently, iPhone 6 and older are not supported.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            listDevices\n                        \n                        \n                    \n                \n            \n            \n                \nlistDevices()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/services/janus.service.ts:42\n                \n            \n\n\n            \n                \n                    Wrapper around navigator.mediaDevices.enumerateDevices\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            supportsSpeakerSelection\n                        \n                        \n                    \n                \n            \n            \n                \nsupportsSpeakerSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/services/janus.service.ts:66\n                \n            \n\n\n            \n                \n                    Determines if the current platform supports setting the speaker. Some devices, e.g., most android\nphones, do not allow the dynamic setting of the speaker from within the browser. For those devices,\nit's necessary to change the output device outside of the browser.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nimport { Observable, of, interval } from 'rxjs';\nimport { tap, takeWhile } from 'rxjs/operators';\n\nimport Janus from '../3rdparty/janus.es';\n\nimport * as fromModels from '../models/janus-server.models';\nimport { RemoteFeed, RoomInfo, IceServer } from '../models/janus.models';\n\n\nimport { randomString } from '../shared';\n\n/**\n * Various helper functions for querying devices\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebrtcService {\n  // Wrappers around some common webrtc functions\n\n  constructor() { }\n\n  /**\n   * Wrapper around getUserMedia that allows the user to specify the audio and video device ids\n   *\n   * @param audioDeviceId Device ID of the desired audio device. If null, audio will not be included\n   * @param videoDeviceId Device ID of the desired video device.\n   */\n  getUserMedia(audioDeviceId: string | null, videoDeviceId: string): Promise {\n    const constraints = {\n      audio: audioDeviceId !== null ? {deviceId: audioDeviceId} : false,\n      video: {deviceId: videoDeviceId, width: 1920, height: 1080},\n    };\n    return navigator.mediaDevices.getUserMedia(constraints);\n  }\n\n  /**\n   * Wrapper around `navigator.mediaDevices.enumerateDevices`\n   */\n  listDevices(): Promise {\n    return navigator.mediaDevices.enumerateDevices();\n  }\n\n  /**\n   * Returns the device IDs for the default audio, video, and speaker device\n   */\n  async getDefaultDevices(): Promise {\n    const devices = await this.listDevices();\n    const audioDevices = devices.filter((device) => device.kind === 'audioinput');\n    const videoDevices = devices.filter((device) => device.kind === 'videoinput');\n    const speakerDevices = devices.filter((device) => device.kind === 'audiooutput');\n    const audioDeviceId = audioDevices.length = 13;\n  }\n}\n\n/** @internal */\n@Injectable({\n  providedIn: 'root'\n})\nexport class JanusService {\n  private streams = {};\n  private initialized = false;\n  private janus: any;\n  private server: string;\n  private opaqueId: string = randomString(16);\n  public handle;   // Handle to the videoroom plugin\n  private remoteHandles: { [id: number]: any } = {};   // Handles to remote streams\n\n  private videoElement: any;\n  private localStream: any;\n  private publishWebrtcState = false;\n\n  private drawLoopActive: boolean;\n  private iceServers: {urls: string}[];\n\n  constructor(\n    private webrtcService: WebrtcService,\n  ) {}\n\n  init(iceServers: IceServer[]): Observable {\n    // Initialize Janus\n    this.iceServers = iceServers;\n\n    if (this.initialized) {\n      console.log('Warning: called janus init twice');\n      return of(true);\n    }\n\n    return new Observable(\n      subscriber => {\n        Janus.init({\n          debug: 'none',\n          callback(): void {\n            // Make sure the browser supports WebRTC\n            if (!Janus.isWebrtcSupported()) {\n              subscriber.error('WebRTC is not supported');\n            }\n            subscriber.next();\n            subscriber.complete();\n          }\n        });\n      }\n    );\n  }\n\n  destroy(): void {\n    const leave = { request: 'leave' };\n\n    if (this.handle) {\n      this.handle.send({message: leave});\n    }\n    this.cleanupLocalStream();\n    this.janus.destroy({unload: true});\n\n    // Clean up all variables used\n    this.janus = null;\n    this.handle = null;\n    this.streams = {};\n    this.initialized = false;\n    this.janus = null;\n    this.server = null;\n    this.handle = null;\n    this.remoteHandles = {};\n    this.videoElement = null;\n    this.localStream = null;\n    this.publishWebrtcState = false;\n    this.drawLoopActive = null;\n    this.iceServers = [];\n  }\n\n  cleanupLocalStream(): void {\n    if (this.videoElement) {\n      this.videoElement.remove();\n    }\n    if (this.localStream) {\n      this.webrtcService.clearMediaStream(this.localStream);\n    }\n    this.drawLoopActive = false;\n  }\n\n  _get_random_string(): string {\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n  }\n\n  _attachVideoRoomHelper(subscriber): void {\n    const instance = this;\n    this.janus.attach({\n      plugin: 'janus.plugin.videoroom',\n      opaqueId: this.opaqueId,\n      success(pluginHandle): void {\n        instance.handle = pluginHandle;\n        subscriber.next({\n          message: fromModels.ATTACH_SUCCESS\n        });\n      },\n      error(error): void {\n        subscriber.error(error);\n      },\n      consentDialog(on): void {\n        subscriber.next({\n          message: fromModels.CONSENT_DIALOG,\n          payload: {on},\n        });\n      },\n      mediaState(medium, on): void {\n        subscriber.next({\n          message: fromModels.MEDIA_STATE,\n          payload: {medium, on},\n        });\n      },\n      webrtcState(on): void {\n        instance.publishWebrtcState = on;\n        subscriber.next({\n          message: fromModels.WEBRTC_STATE,\n          payload: {on},\n        });\n      },\n      iceState(arg1, arg2): void {\n        // console.log('ICE STATE', arg1, arg2);\n      },\n      slowLink(msg): void {\n      },\n      onmessage(msg, jsep): void {\n        subscriber.next({\n          message: fromModels.ON_MESSAGE,\n          payload: {msg, jsep},\n        });\n        if (!!jsep) {\n          instance.handleRemoteJsep(jsep);\n        }\n      },\n      onlocalstream(stream): void {\n        const streamId = instance._get_random_string();\n        instance.streams[streamId] = stream;\n        subscriber.next({\n          message: fromModels.ON_LOCAL_STREAM,\n          payload: {stream_id: streamId},\n        });\n      },\n      onremotestream(stream): void {\n        // Don't expect this to ever happen\n        subscriber.next({\n          message: fromModels.ON_REMOTE_STREAM,\n          payload: {stream},\n        });\n      },\n      oncleanup(): void {\n        subscriber.next({\n          message: fromModels.ON_CLEANUP,\n        });\n      }\n    });\n  }\n\n  attachVideoRoom(url): Observable {\n    // Create session\n    const instance = this;\n    return new Observable(\n      subscriber => {\n        instance.janus = new Janus({\n          server: url,\n          iceServers: this.iceServers,\n          success: () => {\n            instance._attachVideoRoomHelper(subscriber);\n          },\n          error(error): void {\n            subscriber.error(error);\n          },\n          destroyed(): void {\n            // window.location.reload();\n          }\n        });\n      }\n    );\n  }\n\n  register(name: string, userId: string, roomId: string | number, pin: string): void {\n    const register = {\n      request: 'join',\n      room: roomId,\n      ptype: 'publisher',\n      display: name,\n      id: userId,\n      pin,\n    };\n    this.handle.send({message: register});\n  }\n\n  handleRemoteJsep(jsep): void {\n    this.handle.handleRemoteJsep({jsep});\n  }\n\n  answerRemoteFeedJsep(jsep, feed: RemoteFeed, room: RoomInfo): void {\n    // Handle a jsep message for a remote feed\n\n    const handle = this.remoteHandles[feed.id];\n    handle.createAnswer({\n      jsep,\n      trickle: true,\n      media: { audioSend: false, videoSend: false },  // We want recvonly audio/video\n      success(jsepBody): void {\n        const body = { request: 'start', room: room.id };\n        handle.send({message: body, jsep: jsepBody});\n      },\n      error(error): void {\n        console.log('ERROR in JSEP RESPONSE', error);\n      }\n    });\n  }\n\n  draw(canvasContext, videoElement): void {\n    canvasContext.drawImage(videoElement, 0, 0);\n    const centerX = canvasContext.canvas.width / 2;\n    const centerY = canvasContext.canvas.height / 2;\n    const videoWidth = videoElement.videoWidth;\n    const videoHeight = videoElement.videoHeight;\n\n    canvasContext.fillStyle = '#000';\n    canvasContext.fillRect(0, 0, canvasContext.canvas.width, canvasContext.canvas.height);\n\n    canvasContext.save();\n    canvasContext.translate(centerX, centerY);\n    canvasContext.drawImage(\n      videoElement,\n      -videoWidth / 2,\n      -videoHeight / 2,\n      videoWidth,\n      videoHeight,\n    );\n    canvasContext.restore();\n  }\n\n  startDrawingLoop(canvasElement, videoElement, frameRate: number): void {\n    // Drawing loop using AudioContext oscillator. requestAnimationFrame doesn't fire\n    // on background tabs, so this is a hack to make this work when the user switches tabs\n\n    const instance = this;\n    instance.drawLoopActive = true;\n    const canvasContext = canvasElement.getContext('2d');\n\n    const stepMilliSeconds = 1000 / frameRate;\n\n    function step(): void {\n      if (instance.drawLoopActive) {\n        instance.draw(canvasContext, videoElement);\n        setTimeout(step, stepMilliSeconds);\n        // requestAnimationFrame(step);\n      }\n    }\n    step();\n  }\n\n  _muteVideo(videoElement): void {\n    // Mute a given video element\n\n    const instance = this;\n    function mute(event): void {\n      videoElement.muted = 'muted';\n      videoElement.removeEventListener('playing', mute);\n    }\n\n    videoElement.addEventListener('playing', mute);\n  }\n\n  _sizeCanvasElement(videoWidth: number, videoHeight: number): {canvasWidth: number, canvasHeight: number} {\n    // We're keeping the height the same. Goal is to add black bars to the sides\n    // if we're in portrait mode and crop to the center if we're in landscape.\n    return {\n      canvasWidth: videoHeight * 4 / 3,\n      canvasHeight: videoHeight,\n    };\n  }\n\n  _videoElementSafariHacks(videoElement): void {\n    // safari requires that the video element be in the body\n    const body = document.getElementsByTagName('body')[0];\n    body.appendChild(videoElement);\n    videoElement.setAttribute('style', 'width: 0; height: 0;');\n\n    // safari doesn't always auto-play the way you'd like it to\n    videoElement.addEventListener('canplay', () => videoElement.play());\n  }\n\n  _createVideoElement(canvasId: string, videoStream: any): any {\n    // Create the video element and attach it to the canvas\n\n    const videoElement = document.createElement('video');\n    const canvasElement: any = document.getElementById(canvasId);\n\n    // Firefox has a bug where calling captureStream before calling getContext results in an error.\n    canvasElement.getContext('2d');\n\n    const canvasStream = canvasElement.captureStream();\n    const videoSettings = videoStream.getVideoTracks()[0].getSettings();\n\n    this._videoElementSafariHacks(videoElement);\n\n    Janus.attachMediaStream(videoElement, videoStream);\n    videoElement.autoplay = true;\n    videoElement.setAttribute('playsinline', 'true');\n    videoElement.setAttribute('id', 'self-video');\n\n    // Some browsers don't like it if we set the muted attribute before the video is playing\n    this._muteVideo(videoElement);\n\n    const { canvasWidth, canvasHeight } = this._sizeCanvasElement(videoSettings.width, videoSettings.height);\n    canvasElement.width = canvasWidth;\n    canvasElement.height = canvasHeight;\n\n    const audioTrack = videoStream.getAudioTracks().find((item) => item);\n    if (!!audioTrack) {\n        canvasStream.addTrack(videoStream.getAudioTracks()[0]);\n    }\n\n    this.startDrawingLoop(canvasElement, videoElement, videoSettings.frameRate);\n\n    return {\n      videoElement,\n      canvasStream,\n    };\n  }\n\n  unPublishOwnFeed(): void {\n    // Unpublish your own feed\n    const unpublish = { request: 'unpublish' };\n    this.handle.send({ message: unpublish });\n    this.cleanupLocalStream();\n  }\n\n  publishOwnFeed(\n    audioDeviceId: string | null,\n    videoDeviceId: string,\n    canvasId: string = 'canvas-self',\n    skipVideoCapture: boolean = false,\n  ): Observable {\n    // Publish our own feed\n\n    return new Observable(\n      subscriber => {\n        if (this.publishWebrtcState) {\n          // Already publishing. Need to unpublish, wait until we're done unpublishing, and then republish\n          this.unPublishOwnFeed();\n          interval(100).pipe(\n            takeWhile(() => this.publishWebrtcState)\n          ).subscribe({\n            complete: () => {\n              this.createStreamAndOffer(subscriber, audioDeviceId, videoDeviceId, canvasId, skipVideoCapture);\n            }\n          });\n        } else {\n          // Simple case. Not publishing yet\n          this.createStreamAndOffer(subscriber, audioDeviceId, videoDeviceId, canvasId, skipVideoCapture);\n        }\n      }\n    );\n  }\n\n  createStreamAndOffer(\n    subscriber,\n    audioDeviceId: string | null,\n    videoDeviceId: string,\n    canvasId: string,\n    skipVideoCapture: boolean,\n    retryCount = 0,\n  ): void {\n    const instance = this;\n    if (skipVideoCapture) {\n      // We don't create any video element, etc.\n      const canvasElement: any = document.getElementById(canvasId);\n      const canvasStream = canvasElement.captureStream();\n      return this.createOffer(subscriber, canvasStream);\n    } else {\n      // Common case. We need to create a video element\n      instance.webrtcService.getUserMedia(audioDeviceId, videoDeviceId)\n        .then((videoStream) => {\n          instance.localStream = videoStream;\n          const {videoElement, canvasStream} = instance._createVideoElement(canvasId, videoStream);\n          instance.videoElement = videoElement;\n          this.createOffer(subscriber, canvasStream);\n        }\n      ).catch((error) => {\n        // Some devices get intermittent errors. I'm doing a retry here. Not a warm-fuzzy solution. Future work might\n        // find a race condition where we need to wait for an event before calling getUserMedia\n        if (retryCount  {\n            instance.createStreamAndOffer(\n              subscriber,\n              audioDeviceId,\n              videoDeviceId,\n              canvasId,\n              skipVideoCapture,\n              retryCount + 1,\n            );\n          }, 1000);\n        }\n      });\n    }\n  }\n\n  createOffer(\n    subscriber,\n    stream,\n  ): void {\n    const instance = this;\n    this.handle.createOffer({\n      media: { audioRecv: false, videoRecv: false, audioSend: true, videoSend: true },\n      success(jsep): void {\n        const publish = { request: 'configure', audio: true, video: true };\n        instance.handle.send({message: publish, jsep});\n        subscriber.next(true);\n        subscriber.complete();\n      },\n      error(error): void {\n        subscriber.error(error);\n      },\n      simulcast: true,\n      simulcastMaxBitrates: {\n        high: 256000,\n        medium: 128000,\n        low: 64000,\n      },\n      trickle: true,\n      stream,\n    });\n  }\n\n  attachMediaStream(elemId: string, streamId: string): void {\n    const element: any = document.getElementById(elemId);\n    Janus.attachMediaStream(element, this.streams[streamId]);\n  }\n\n  attachRemoteFeed(\n    feed: RemoteFeed,\n    room: RoomInfo,\n    pin: string,\n  ): Observable {\n    // A new feed has been published, create a new plugin handle and attach to it as a subscriber\n\n    const instance = this;\n\n    return new Observable(\n      subscriber => {\n        instance.janus.attach({\n          plugin: 'janus.plugin.videoroom',\n          opaqueId: instance.opaqueId,\n          success(pluginHandle): void {\n            instance.remoteHandles[feed.id] = pluginHandle;\n            instance.remoteHandles[feed.id].videoCodec = feed.video_codec;\n\n            const subscribe = {\n              request: 'join',\n              room: room.id,\n              ptype: 'subscriber',\n              feed: feed.id,\n              private_id: room.privateId,\n              substream: 0,\n              pin,\n            };\n            instance.remoteHandles[feed.id].send({message: subscribe});\n          },\n\n          error(error): void {\n            subscriber.error(error);\n          },\n\n          onmessage(msg, jsep): void {\n            subscriber.next({\n              message: fromModels.ON_REMOTE_FEED_MESSAGE,\n              payload: {\n                msg,\n                jsep,\n                feed,\n                room,\n              },\n            });\n            if (!!jsep) {\n              instance.answerRemoteFeedJsep(jsep, feed, room);\n            }\n          },\n\n          webrtcState(on): void {\n            subscriber.next({\n              message: fromModels.REMOTE_FEED_WEBRTC_STATE,\n              payload: {\n                on,\n                feed,\n                room,\n              },\n            });\n          },\n\n          onlocalstream(stream): void {\n            console.log('Would never expect to get here');\n          },\n\n          slowLink(msg): void {\n            subscriber.next({\n              message: fromModels.REMOTE_FEED_SLOW_LINK,\n              payload: {\n                feedId: feed.id,\n              },\n            });\n          },\n\n          onremotestream(stream): void {\n            // Save off remote stream\n\n            const streamId = instance._get_random_string();\n            instance.streams[streamId] = stream;\n\n            const numVideoTracks = stream.getVideoTracks() ? stream.getVideoTracks().length : 0;\n            subscriber.next({\n              message: fromModels.ON_REMOTE_REMOTE_STREAM,\n              payload: {\n                streamId,\n                numVideoTracks,\n                feed,\n                room,\n              },\n            });\n          },\n          oncleanup(): void {\n            subscriber.next({\n              message: fromModels.ON_REMOTE_CLEANUP,\n              payload: {\n                feed,\n                room,\n              },\n            });\n          }\n        });\n      }\n    );\n  }\n\n  toggleMute(): boolean {\n    const muted = this.handle.isAudioMuted();\n    if (muted) {\n        this.handle.unmuteAudio();\n    } else {\n        this.handle.muteAudio();\n    }\n    return this.handle.isAudioMuted();\n  }\n\n  setMute(mute: boolean): boolean {\n    const muted = this.handle.isAudioMuted();\n    if (muted === mute) {\n      return this.handle.isAudioMuted();\n    }\n\n    if (mute) {\n        this.handle.muteAudio();\n    } else {\n        this.handle.unmuteAudio();\n    }\n    return this.handle.isAudioMuted();\n  }\n\n  requestSubstream(feed: RemoteFeed, substreamId: number): void {\n    this.remoteHandles[feed.id].send({message: {request: 'configure', substream: substreamId}});\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.0.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^10.1.1\n        \n            @angular/core : ^10.1.1\n        \n            @ngrx/component-store : ^10.0.1\n        \n            moment : ^2.29.1\n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            JanusRole   (src/.../janus.models.ts)\n                        \n                        \n                            PublishState   (src/.../janus.models.ts)\n                        \n                        \n                            RemoteFeedState   (src/.../janus.models.ts)\n                        \n                        \n                            RoomInfoState   (src/.../janus.models.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/models/janus.models.ts\n    \n        \n            \n                \n                    \n                        \n                        JanusRole\n                    \n                \n                    \n                        \n                            Possible roles for a user.\n\n                        \n                    \n                        \n                            \n                                 publisher\n                            \n                        \n                        \n                            \n                                Value : publisher\n                            \n                        \n                        \n                            \n                                 listener\n                            \n                        \n                        \n                            \n                                Value : listener\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PublishState\n                    \n                \n                    \n                        \n                            Current publish status\n\n                        \n                    \n                        \n                            \n                                 start\n                            \n                        \n                        \n                            \n                                Value : start\n                            \n                        \n                        \n                            \n                                 ready\n                            \n                        \n                        \n                            \n                                Value : ready\n                            \n                        \n                        \n                            \n                                 publishRequested\n                            \n                        \n                        \n                            \n                                Value : publish requested\n                            \n                        \n                        \n                            \n                                 publishing\n                            \n                        \n                        \n                            \n                                Value : publishing\n                            \n                        \n                        \n                            \n                                 error\n                            \n                        \n                        \n                            \n                                Value : error\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RemoteFeedState\n                    \n                \n                    \n                        \n                            Remote feed state machine\n\n                        \n                    \n                        \n                            \n                                 initialized\n                            \n                        \n                        \n                            \n                                Value : initialized\n                            \n                        \n                        \n                            \n                                 attaching\n                            \n                        \n                        \n                            \n                                Value : attaching\n                            \n                        \n                        \n                            \n                                 attached\n                            \n                        \n                        \n                            \n                                Value : attached\n                            \n                        \n                        \n                            \n                                 ready\n                            \n                        \n                        \n                            \n                                Value : ready\n                            \n                        \n                        \n                            \n                                 error\n                            \n                        \n                        \n                            \n                                Value : error\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RoomInfoState\n                    \n                \n                    \n                        \n                            Room state machine\n\n                        \n                    \n                        \n                            \n                                 start\n                            \n                        \n                        \n                            \n                                Value : start\n                            \n                        \n                        \n                            \n                                 initializing\n                            \n                        \n                        \n                            \n                                Value : initializing\n                            \n                        \n                        \n                            \n                                 initialized\n                            \n                        \n                        \n                            \n                                Value : initialized\n                            \n                        \n                        \n                            \n                                 attaching\n                            \n                        \n                        \n                            \n                                Value : attaching\n                            \n                        \n                        \n                            \n                                 attached\n                            \n                        \n                        \n                            \n                                Value : attached\n                            \n                        \n                        \n                            \n                                 attach_failed\n                            \n                        \n                        \n                            \n                                Value : attach_failed\n                            \n                        \n                        \n                            \n                                 joining\n                            \n                        \n                        \n                            \n                                Value : joining\n                            \n                        \n                        \n                            \n                                 joined\n                            \n                        \n                        \n                            \n                                Value : joined\n                            \n                        \n                        \n                            \n                                 error\n                            \n                        \n                        \n                            \n                                Value : error\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nJanus Videoroom Component\nThis is an angular library with features to make it easy to embed a videoroom\ninto any angular app. Once you have a properly configured, public instance of a\njanus server with the videoroom plugin enabled, this library includes a\ndirective that will connect clients in a videoroom.\nWhy build this?\nWhen building a product that incorporates a videoroom, the interesting part of\nthe product is how it helps users find, create, edit, join, and view\nvideorooms. That's what gives the product it's competitive advantage. However,\nwhen we started working on our own product, we spent the vast majority of our\nengineering time working with low level webrtc signalling. This mismatch led us\nto believe there's room for improvement in this field. Our goal is to help\nother developers spend more time on their app and less time on webrtc details.\nThe Janus documentation and demos are great for understanding how the service\nworks. However, the sample client code is not easy to adopt into your own\napplication. This makes it so that developers need to write a lot of the low\nlevel code themselves and understand many of the details of the videoroom\nplugin. While more knowledge is always better than less, we believe it's\npossible to implement a videoroom without requiring the developer to understand\nintimate details of webrtc.\nWhat does this implement?\nThe core function provided by this library is a component called JanusVideoroomComponent that implements a videoroom. The selector for the component is janus-videoroom. You can have a fully functional videoroom only specifying the URL of the janus gateway and the room ID. The videoroom supports the following features:\n\nRoom ID You can specify any roomId that is available on the janus gateway.\nhttp and websocket connections You can specify an http and/or websocket URL. The component will prefer the websocket URL and fallback to the http URL.\nPINs You can specify a PIN for any room that requires it.\nAuto Resize Videos are automatically enlarged to take up the maximum screen real estate upon changing the size or orientation of the screen.\nMultiple Aspect Ratios Different source video aspect ratios are handled smoothly.\nDisplay Names You can specify the display name for anyone joining a videoroom.\nPublishers or Read Only Users Users can be publishers, who will send a feed from their camera/microphone, or they can be read only users that don't transmit anything.\nSimulcast Supported clients will publish 3 different quality video feeds and clients will dynamically pick the appropriate stream based on current network conditions\nDevices Device IDs can be input and dynamically changed so that users can change which input or output devices to use.\nICE Servers In addition the the janus gateway, custom STUN/TURN servers can be specified.\nMute Audio Audio can be muted for publishers.\nSupported Platforms Tested and works on Chrome (Windows, macOS, and android) and Safari (macOS and iOS).\n\nWhat does this not implement?\nIn the spirit of doing one thing well, the janus-videoroom component does not\nimplement many necessary parts of an application. For example, the component\nsupports muting the feed of a publisher. However, it does not implement a mute\nbutton. The burden is put on the developer to implement the UX around how to\nmute a feed.\nThe following is a non-exhaustive list of necessary items for most webapps that\nare not implemented by JanusVideoroomComponent. These will have to be\nimplemented by the application outside of this library.\n\nJanus room configuration Create/edit/delete operations on janus rooms are not supported\nUI elements for interaction Mute, change device, etc. are supported by the component, but it does not include UI elements for these.\nUser Authentication\nBackend Storage\nJanus gateway deployment\n\nHow to use\nInstallation\nDependencies\njanus-angular has 3 peer dependencies: webrtc-adapter, @ngrx/component-store, and moment. These can be installed by yarn\nyarn add webrtc-adapter @ngrx/component-store momentInstalling janus-angular\nInstallation is available through yarn\nyarn add janus-angularIncluding the module\nThe JanusModule must be included in your imports for the module in which you wish to use the directive\nimport { JanusModule } from 'janus-angular';\n...\n@NgModule({\n  declarations: [\n    ...\n  ],\n  imports: [\n    ...\n    JanusModule,\n  ],\n})\nexport class YourAppModule { }Using the directive\nThe following minimal component will work with the demo deploy of janus.\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  styleUrls: ['./app.component.scss'],\n  template: `\n    \n    \n  `\n})\nexport class AppComponent {\n  roomId = 1234;\n  wsUrl = 'wss://janus.conf.meetecho.com/ws';\n}Inputs/Outputs for the component are documented in the API docs on this site. Page for the\ncomponent docs is here\nSample Application\nWe have written a small, sample application to show how to use the library. The\nrepo lives here.\nJanus setup\nThis is a client library tightly coupled with a Janus webrtc Server with the\nvideoroom plugin.  The documentation for that can be found on that Janus\nwebsite here.\nFuture Work\nIn addition to tireless bug fixing and making sure it works on all platforms\nand networks, future work will include adding additional touchpoints in which\nsomeone can customize the videoroom. Overlays work great to give rough\nfunctionality to all supported features. However, there are often times when an\napp wants to implement buttons on a publisher video itself, or change the\nentire look and feel of the videoroom. We do this internally, and are working\nto release those touchpoints to the public package.\nDonations\nAre you happy with the product and want to support future development? We\naccept donations\nhere. Donations\nfund development of new features on the library.\nSource Code\nSource code for this library lives here\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        JanusModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_JanusModule\n\n\n\ncluster_JanusModule_declarations\n\n\n\ncluster_JanusModule_exports\n\n\n\n\nAudioBoxComponent\n\nAudioBoxComponent\n\n\n\nJanusModule\n\nJanusModule\n\nJanusModule -->\n\nAudioBoxComponent->JanusModule\n\n\n\n\n\nDefaultVideoRoomComponent\n\nDefaultVideoRoomComponent\n\nJanusModule -->\n\nDefaultVideoRoomComponent->JanusModule\n\n\n\n\n\nDeviceSelectorComponent\n\nDeviceSelectorComponent\n\nJanusModule -->\n\nDeviceSelectorComponent->JanusModule\n\n\n\n\n\nJanusVideoroomComponent\n\nJanusVideoroomComponent\n\nJanusModule -->\n\nJanusVideoroomComponent->JanusModule\n\n\n\n\n\nSelfVideoComponent\n\nSelfVideoComponent\n\nJanusModule -->\n\nSelfVideoComponent->JanusModule\n\n\n\n\n\nVideoBoxComponent\n\nVideoBoxComponent\n\nJanusModule -->\n\nVideoBoxComponent->JanusModule\n\n\n\n\n\nVideoRoomWrapperComponent\n\nVideoRoomWrapperComponent\n\nJanusModule -->\n\nVideoRoomWrapperComponent->JanusModule\n\n\n\n\n\nVideoRoomWrapperDirective\n\nVideoRoomWrapperDirective\n\nJanusModule -->\n\nVideoRoomWrapperDirective->JanusModule\n\n\n\n\n\nAudioBoxComponent \n\nAudioBoxComponent \n\nAudioBoxComponent  -->\n\nJanusModule->AudioBoxComponent \n\n\n\n\n\nDefaultVideoRoomComponent \n\nDefaultVideoRoomComponent \n\nDefaultVideoRoomComponent  -->\n\nJanusModule->DefaultVideoRoomComponent \n\n\n\n\n\nDeviceSelectorComponent \n\nDeviceSelectorComponent \n\nDeviceSelectorComponent  -->\n\nJanusModule->DeviceSelectorComponent \n\n\n\n\n\nJanusVideoroomComponent \n\nJanusVideoroomComponent \n\nJanusVideoroomComponent  -->\n\nJanusModule->JanusVideoroomComponent \n\n\n\n\n\nSelfVideoComponent \n\nSelfVideoComponent \n\nSelfVideoComponent  -->\n\nJanusModule->SelfVideoComponent \n\n\n\n\n\nVideoBoxComponent \n\nVideoBoxComponent \n\nVideoBoxComponent  -->\n\nJanusModule->VideoBoxComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    9 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ATTACH_SUCCESS   (src/.../janus-server.models.ts)\n                        \n                        \n                            components   (src/.../index.ts)\n                        \n                        \n                            components   (src/.../index.ts)\n                        \n                        \n                            CONSENT_DIALOG   (src/.../janus-server.models.ts)\n                        \n                        \n                            DETACHED   (src/.../janus-server.models.ts)\n                        \n                        \n                            initialState   (src/.../janus.reducers.ts)\n                        \n                        \n                            MEDIA_STATE   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_CLEANUP   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_DATA   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_DATA_OPEN   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_LOCAL_STREAM   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_MESSAGE   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_REMOTE_CLEANUP   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_REMOTE_FEED_MESSAGE   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_REMOTE_LOCAL_STREAM   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_REMOTE_REMOTE_STREAM   (src/.../janus-server.models.ts)\n                        \n                        \n                            ON_REMOTE_STREAM   (src/.../janus-server.models.ts)\n                        \n                        \n                            randomString   (src/.../random.ts)\n                        \n                        \n                            REMOTE_FEED_SLOW_LINK   (src/.../janus-server.models.ts)\n                        \n                        \n                            REMOTE_FEED_WEBRTC_STATE   (src/.../janus-server.models.ts)\n                        \n                        \n                            RemoteFeedFactory   (src/.../janus.factories.ts)\n                        \n                        \n                            REQUEST_SUBSTREAM   (src/.../janus.actions.ts)\n                        \n                        \n                            RoomInfoFactory   (src/.../janus.factories.ts)\n                        \n                        \n                            SLOW_LINK   (src/.../janus-server.models.ts)\n                        \n                        \n                            TOGGLE_MUTE_SUCCESS   (src/.../janus.actions.ts)\n                        \n                        \n                            WEBRTC_STATE   (src/.../janus-server.models.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/models/janus-server.models.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ATTACH_SUCCESS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'attach success'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CONSENT_DIALOG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'consent dialog'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DETACHED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'detached'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MEDIA_STATE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'media state'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_CLEANUP\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'cleanup'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_DATA\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'data'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_DATA_OPEN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'data open'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_LOCAL_STREAM\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'local stream'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_MESSAGE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'message'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_REMOTE_CLEANUP\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[remote] cleanup'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_REMOTE_FEED_MESSAGE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[remote] message'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_REMOTE_LOCAL_STREAM\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[remote] local stream'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_REMOTE_REMOTE_STREAM\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[remote] remote stream'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_REMOTE_STREAM\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'remote stream'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            REMOTE_FEED_SLOW_LINK\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[remote] slow link'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            REMOTE_FEED_WEBRTC_STATE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[remote] webrtc state'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SLOW_LINK\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'slow link'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            WEBRTC_STATE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'webrtc state'\n                        \n                    \n\n\n            \n        \n\n    src/lib/components/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            components\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  AudioBoxComponent,\n  VideoBoxComponent,\n  DefaultVideoRoomComponent,\n  SelfVideoComponent,\n]\n                        \n                    \n\n\n            \n        \n\n    src/lib/containers/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            components\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  JanusVideoroomComponent,\n  DeviceSelectorComponent,\n]\n                        \n                    \n\n\n            \n        \n\n    src/lib/store/reducers/janus.reducers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            initialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     VideoroomState\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  roomInfo: {\n    state: RoomInfoState.start,\n    id: null,\n    description: null,\n    privateId: null,\n    otherRoomId: null,\n\n    errorCode: null,\n\n    publishState: PublishState.start,\n    localStreamId: null,\n    muted: false,\n  },\n  remoteFeeds: {},\n}\n                        \n                    \n\n\n            \n        \n\n    src/lib/shared/random.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            randomString\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ((bytes: number) => {\n  const array = new Uint8Array(bytes);\n  window.crypto.getRandomValues(array);\n\n  // Real pain to find a cross platform way to do this smoothly. Dropping into a for loop\n  let ret = '';\n  for (const item of array) {\n    ret += item.toString(36);\n  }\n\n  return ret;\n})\n                        \n                    \n\n\n            \n        \n\n    src/lib/factories/janus.factories.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            RemoteFeedFactory\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Factory.Sync.makeFactory({\n  state: RemoteFeedState.initialized,\n  id: Factory.each(i => i.toString()),\n  streamId: Factory.each(i => 'stream' + i.toString()),\n  numVideoTracks: 0,\n  requestedSubstream: 0,\n  currentSubstream: 0,\n  displayName: Factory.each(i => 'name' + i.toString()),\n  audio_codec: Factory.each(i => 'audio' + i.toString()),\n  video_codec: Factory.each(i => 'video' + i.toString()),\n  muted: false,\n  volume: 64,\n  slowLink: null,\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RoomInfoFactory\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Factory.Sync.makeFactory({\n  state: RoomInfoState.start,\n  id: Factory.each(i => i.toString()),\n  description: Factory.each(i => 'description' + i.toString()),\n  privateId: Factory.each(i => i),\n  otherRoomId: Factory.each(i => i),\n  errorCode: null,\n  publishState: PublishState.start,\n  localStreamId: Factory.each(i => 'stream' + i.toString()),\n  muted: false,\n})\n                        \n                    \n\n\n            \n        \n\n    src/lib/store/actions/janus.actions.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            REQUEST_SUBSTREAM\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[Janus] Request Substream'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TOGGLE_MUTE_SUCCESS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[Janus] Toggle Mute Success'\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
